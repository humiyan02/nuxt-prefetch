"use strict";Object.defineProperty(exports, "__esModule", {value: true}); function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }





var _chunkDUTQDV3Qjs = require('./chunk-DUTQDV3Q.js');

// node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/lib/constants.js
var require_constants = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/lib/constants.js"(exports, module) {
    "use strict";
    var path = _chunkDUTQDV3Qjs.__require.call(void 0, "path");
    var WIN_SLASH = "\\\\/";
    var WIN_NO_SLASH = `[^${WIN_SLASH}]`;
    var DOT_LITERAL = "\\.";
    var PLUS_LITERAL = "\\+";
    var QMARK_LITERAL = "\\?";
    var SLASH_LITERAL = "\\/";
    var ONE_CHAR = "(?=.)";
    var QMARK = "[^/]";
    var END_ANCHOR = `(?:${SLASH_LITERAL}|$)`;
    var START_ANCHOR = `(?:^|${SLASH_LITERAL})`;
    var DOTS_SLASH = `${DOT_LITERAL}{1,2}${END_ANCHOR}`;
    var NO_DOT = `(?!${DOT_LITERAL})`;
    var NO_DOTS = `(?!${START_ANCHOR}${DOTS_SLASH})`;
    var NO_DOT_SLASH = `(?!${DOT_LITERAL}{0,1}${END_ANCHOR})`;
    var NO_DOTS_SLASH = `(?!${DOTS_SLASH})`;
    var QMARK_NO_DOT = `[^.${SLASH_LITERAL}]`;
    var STAR = `${QMARK}*?`;
    var POSIX_CHARS = {
      DOT_LITERAL,
      PLUS_LITERAL,
      QMARK_LITERAL,
      SLASH_LITERAL,
      ONE_CHAR,
      QMARK,
      END_ANCHOR,
      DOTS_SLASH,
      NO_DOT,
      NO_DOTS,
      NO_DOT_SLASH,
      NO_DOTS_SLASH,
      QMARK_NO_DOT,
      STAR,
      START_ANCHOR
    };
    var WINDOWS_CHARS = _chunkDUTQDV3Qjs.__spreadProps.call(void 0, _chunkDUTQDV3Qjs.__spreadValues.call(void 0, {}, POSIX_CHARS), {
      SLASH_LITERAL: `[${WIN_SLASH}]`,
      QMARK: WIN_NO_SLASH,
      STAR: `${WIN_NO_SLASH}*?`,
      DOTS_SLASH: `${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$)`,
      NO_DOT: `(?!${DOT_LITERAL})`,
      NO_DOTS: `(?!(?:^|[${WIN_SLASH}])${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      NO_DOT_SLASH: `(?!${DOT_LITERAL}{0,1}(?:[${WIN_SLASH}]|$))`,
      NO_DOTS_SLASH: `(?!${DOT_LITERAL}{1,2}(?:[${WIN_SLASH}]|$))`,
      QMARK_NO_DOT: `[^.${WIN_SLASH}]`,
      START_ANCHOR: `(?:^|[${WIN_SLASH}])`,
      END_ANCHOR: `(?:[${WIN_SLASH}]|$)`
    });
    var POSIX_REGEX_SOURCE = {
      alnum: "a-zA-Z0-9",
      alpha: "a-zA-Z",
      ascii: "\\x00-\\x7F",
      blank: " \\t",
      cntrl: "\\x00-\\x1F\\x7F",
      digit: "0-9",
      graph: "\\x21-\\x7E",
      lower: "a-z",
      print: "\\x20-\\x7E ",
      punct: "\\-!\"#$%&'()\\*+,./:;<=>?@[\\]^_`{|}~",
      space: " \\t\\r\\n\\v\\f",
      upper: "A-Z",
      word: "A-Za-z0-9_",
      xdigit: "A-Fa-f0-9"
    };
    module.exports = {
      MAX_LENGTH: 1024 * 64,
      POSIX_REGEX_SOURCE,
      REGEX_BACKSLASH: /\\(?![*+?^${}(|)[\]])/g,
      REGEX_NON_SPECIAL_CHARS: /^[^@![\].,$*+?^{}()|\\/]+/,
      REGEX_SPECIAL_CHARS: /[-*+?.^${}(|)[\]]/,
      REGEX_SPECIAL_CHARS_BACKREF: /(\\?)((\W)(\3*))/g,
      REGEX_SPECIAL_CHARS_GLOBAL: /([-*+?.^${}(|)[\]])/g,
      REGEX_REMOVE_BACKSLASH: /(?:\[.*?[^\\]\]|\\(?=.))/g,
      REPLACEMENTS: {
        "***": "*",
        "**/**": "**",
        "**/**/**": "**"
      },
      CHAR_0: 48,
      CHAR_9: 57,
      CHAR_UPPERCASE_A: 65,
      CHAR_LOWERCASE_A: 97,
      CHAR_UPPERCASE_Z: 90,
      CHAR_LOWERCASE_Z: 122,
      CHAR_LEFT_PARENTHESES: 40,
      CHAR_RIGHT_PARENTHESES: 41,
      CHAR_ASTERISK: 42,
      CHAR_AMPERSAND: 38,
      CHAR_AT: 64,
      CHAR_BACKWARD_SLASH: 92,
      CHAR_CARRIAGE_RETURN: 13,
      CHAR_CIRCUMFLEX_ACCENT: 94,
      CHAR_COLON: 58,
      CHAR_COMMA: 44,
      CHAR_DOT: 46,
      CHAR_DOUBLE_QUOTE: 34,
      CHAR_EQUAL: 61,
      CHAR_EXCLAMATION_MARK: 33,
      CHAR_FORM_FEED: 12,
      CHAR_FORWARD_SLASH: 47,
      CHAR_GRAVE_ACCENT: 96,
      CHAR_HASH: 35,
      CHAR_HYPHEN_MINUS: 45,
      CHAR_LEFT_ANGLE_BRACKET: 60,
      CHAR_LEFT_CURLY_BRACE: 123,
      CHAR_LEFT_SQUARE_BRACKET: 91,
      CHAR_LINE_FEED: 10,
      CHAR_NO_BREAK_SPACE: 160,
      CHAR_PERCENT: 37,
      CHAR_PLUS: 43,
      CHAR_QUESTION_MARK: 63,
      CHAR_RIGHT_ANGLE_BRACKET: 62,
      CHAR_RIGHT_CURLY_BRACE: 125,
      CHAR_RIGHT_SQUARE_BRACKET: 93,
      CHAR_SEMICOLON: 59,
      CHAR_SINGLE_QUOTE: 39,
      CHAR_SPACE: 32,
      CHAR_TAB: 9,
      CHAR_UNDERSCORE: 95,
      CHAR_VERTICAL_LINE: 124,
      CHAR_ZERO_WIDTH_NOBREAK_SPACE: 65279,
      SEP: path.sep,
      extglobChars(chars) {
        return {
          "!": { type: "negate", open: "(?:(?!(?:", close: `))${chars.STAR})` },
          "?": { type: "qmark", open: "(?:", close: ")?" },
          "+": { type: "plus", open: "(?:", close: ")+" },
          "*": { type: "star", open: "(?:", close: ")*" },
          "@": { type: "at", open: "(?:", close: ")" }
        };
      },
      globChars(win322) {
        return win322 === true ? WINDOWS_CHARS : POSIX_CHARS;
      }
    };
  }
});

// node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/lib/utils.js
var require_utils = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/lib/utils.js"(exports) {
    "use strict";
    var path = _chunkDUTQDV3Qjs.__require.call(void 0, "path");
    var win322 = process.platform === "win32";
    var {
      REGEX_BACKSLASH,
      REGEX_REMOVE_BACKSLASH,
      REGEX_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_GLOBAL
    } = require_constants();
    exports.isObject = (val) => val !== null && typeof val === "object" && !Array.isArray(val);
    exports.hasRegexChars = (str) => REGEX_SPECIAL_CHARS.test(str);
    exports.isRegexChar = (str) => str.length === 1 && exports.hasRegexChars(str);
    exports.escapeRegex = (str) => str.replace(REGEX_SPECIAL_CHARS_GLOBAL, "\\$1");
    exports.toPosixSlashes = (str) => str.replace(REGEX_BACKSLASH, "/");
    exports.removeBackslashes = (str) => {
      return str.replace(REGEX_REMOVE_BACKSLASH, (match) => {
        return match === "\\" ? "" : match;
      });
    };
    exports.supportsLookbehinds = () => {
      const segs = process.version.slice(1).split(".").map(Number);
      if (segs.length === 3 && segs[0] >= 9 || segs[0] === 8 && segs[1] >= 10) {
        return true;
      }
      return false;
    };
    exports.isWindows = (options) => {
      if (options && typeof options.windows === "boolean") {
        return options.windows;
      }
      return win322 === true || path.sep === "\\";
    };
    exports.escapeLast = (input, char, lastIdx) => {
      const idx = input.lastIndexOf(char, lastIdx);
      if (idx === -1)
        return input;
      if (input[idx - 1] === "\\")
        return exports.escapeLast(input, char, idx - 1);
      return `${input.slice(0, idx)}\\${input.slice(idx)}`;
    };
    exports.removePrefix = (input, state = {}) => {
      let output = input;
      if (output.startsWith("./")) {
        output = output.slice(2);
        state.prefix = "./";
      }
      return output;
    };
    exports.wrapOutput = (input, state = {}, options = {}) => {
      const prepend = options.contains ? "" : "^";
      const append = options.contains ? "" : "$";
      let output = `${prepend}(?:${input})${append}`;
      if (state.negated === true) {
        output = `(?:^(?!${output}).*$)`;
      }
      return output;
    };
  }
});

// node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/lib/scan.js
var require_scan = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/lib/scan.js"(exports, module) {
    "use strict";
    var utils = require_utils();
    var {
      CHAR_ASTERISK,
      CHAR_AT,
      CHAR_BACKWARD_SLASH,
      CHAR_COMMA,
      CHAR_DOT,
      CHAR_EXCLAMATION_MARK,
      CHAR_FORWARD_SLASH,
      CHAR_LEFT_CURLY_BRACE,
      CHAR_LEFT_PARENTHESES,
      CHAR_LEFT_SQUARE_BRACKET,
      CHAR_PLUS,
      CHAR_QUESTION_MARK,
      CHAR_RIGHT_CURLY_BRACE,
      CHAR_RIGHT_PARENTHESES,
      CHAR_RIGHT_SQUARE_BRACKET
    } = require_constants();
    var isPathSeparator = (code) => {
      return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH;
    };
    var depth = (token) => {
      if (token.isPrefix !== true) {
        token.depth = token.isGlobstar ? Infinity : 1;
      }
    };
    var scan = (input, options) => {
      const opts = options || {};
      const length = input.length - 1;
      const scanToEnd = opts.parts === true || opts.scanToEnd === true;
      const slashes = [];
      const tokens = [];
      const parts = [];
      let str = input;
      let index = -1;
      let start = 0;
      let lastIndex = 0;
      let isBrace = false;
      let isBracket = false;
      let isGlob = false;
      let isExtglob = false;
      let isGlobstar = false;
      let braceEscaped = false;
      let backslashes = false;
      let negated = false;
      let negatedExtglob = false;
      let finished = false;
      let braces = 0;
      let prev;
      let code;
      let token = { value: "", depth: 0, isGlob: false };
      const eos = () => index >= length;
      const peek = () => str.charCodeAt(index + 1);
      const advance = () => {
        prev = code;
        return str.charCodeAt(++index);
      };
      while (index < length) {
        code = advance();
        let next;
        if (code === CHAR_BACKWARD_SLASH) {
          backslashes = token.backslashes = true;
          code = advance();
          if (code === CHAR_LEFT_CURLY_BRACE) {
            braceEscaped = true;
          }
          continue;
        }
        if (braceEscaped === true || code === CHAR_LEFT_CURLY_BRACE) {
          braces++;
          while (eos() !== true && (code = advance())) {
            if (code === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (code === CHAR_LEFT_CURLY_BRACE) {
              braces++;
              continue;
            }
            if (braceEscaped !== true && code === CHAR_DOT && (code = advance()) === CHAR_DOT) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (braceEscaped !== true && code === CHAR_COMMA) {
              isBrace = token.isBrace = true;
              isGlob = token.isGlob = true;
              finished = true;
              if (scanToEnd === true) {
                continue;
              }
              break;
            }
            if (code === CHAR_RIGHT_CURLY_BRACE) {
              braces--;
              if (braces === 0) {
                braceEscaped = false;
                isBrace = token.isBrace = true;
                finished = true;
                break;
              }
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_FORWARD_SLASH) {
          slashes.push(index);
          tokens.push(token);
          token = { value: "", depth: 0, isGlob: false };
          if (finished === true)
            continue;
          if (prev === CHAR_DOT && index === start + 1) {
            start += 2;
            continue;
          }
          lastIndex = index + 1;
          continue;
        }
        if (opts.noext !== true) {
          const isExtglobChar = code === CHAR_PLUS || code === CHAR_AT || code === CHAR_ASTERISK || code === CHAR_QUESTION_MARK || code === CHAR_EXCLAMATION_MARK;
          if (isExtglobChar === true && peek() === CHAR_LEFT_PARENTHESES) {
            isGlob = token.isGlob = true;
            isExtglob = token.isExtglob = true;
            finished = true;
            if (code === CHAR_EXCLAMATION_MARK && index === start) {
              negatedExtglob = true;
            }
            if (scanToEnd === true) {
              while (eos() !== true && (code = advance())) {
                if (code === CHAR_BACKWARD_SLASH) {
                  backslashes = token.backslashes = true;
                  code = advance();
                  continue;
                }
                if (code === CHAR_RIGHT_PARENTHESES) {
                  isGlob = token.isGlob = true;
                  finished = true;
                  break;
                }
              }
              continue;
            }
            break;
          }
        }
        if (code === CHAR_ASTERISK) {
          if (prev === CHAR_ASTERISK)
            isGlobstar = token.isGlobstar = true;
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_QUESTION_MARK) {
          isGlob = token.isGlob = true;
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (code === CHAR_LEFT_SQUARE_BRACKET) {
          while (eos() !== true && (next = advance())) {
            if (next === CHAR_BACKWARD_SLASH) {
              backslashes = token.backslashes = true;
              advance();
              continue;
            }
            if (next === CHAR_RIGHT_SQUARE_BRACKET) {
              isBracket = token.isBracket = true;
              isGlob = token.isGlob = true;
              finished = true;
              break;
            }
          }
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
        if (opts.nonegate !== true && code === CHAR_EXCLAMATION_MARK && index === start) {
          negated = token.negated = true;
          start++;
          continue;
        }
        if (opts.noparen !== true && code === CHAR_LEFT_PARENTHESES) {
          isGlob = token.isGlob = true;
          if (scanToEnd === true) {
            while (eos() !== true && (code = advance())) {
              if (code === CHAR_LEFT_PARENTHESES) {
                backslashes = token.backslashes = true;
                code = advance();
                continue;
              }
              if (code === CHAR_RIGHT_PARENTHESES) {
                finished = true;
                break;
              }
            }
            continue;
          }
          break;
        }
        if (isGlob === true) {
          finished = true;
          if (scanToEnd === true) {
            continue;
          }
          break;
        }
      }
      if (opts.noext === true) {
        isExtglob = false;
        isGlob = false;
      }
      let base = str;
      let prefix = "";
      let glob = "";
      if (start > 0) {
        prefix = str.slice(0, start);
        str = str.slice(start);
        lastIndex -= start;
      }
      if (base && isGlob === true && lastIndex > 0) {
        base = str.slice(0, lastIndex);
        glob = str.slice(lastIndex);
      } else if (isGlob === true) {
        base = "";
        glob = str;
      } else {
        base = str;
      }
      if (base && base !== "" && base !== "/" && base !== str) {
        if (isPathSeparator(base.charCodeAt(base.length - 1))) {
          base = base.slice(0, -1);
        }
      }
      if (opts.unescape === true) {
        if (glob)
          glob = utils.removeBackslashes(glob);
        if (base && backslashes === true) {
          base = utils.removeBackslashes(base);
        }
      }
      const state = {
        prefix,
        input,
        start,
        base,
        glob,
        isBrace,
        isBracket,
        isGlob,
        isExtglob,
        isGlobstar,
        negated,
        negatedExtglob
      };
      if (opts.tokens === true) {
        state.maxDepth = 0;
        if (!isPathSeparator(code)) {
          tokens.push(token);
        }
        state.tokens = tokens;
      }
      if (opts.parts === true || opts.tokens === true) {
        let prevIndex;
        for (let idx = 0; idx < slashes.length; idx++) {
          const n = prevIndex ? prevIndex + 1 : start;
          const i = slashes[idx];
          const value = input.slice(n, i);
          if (opts.tokens) {
            if (idx === 0 && start !== 0) {
              tokens[idx].isPrefix = true;
              tokens[idx].value = prefix;
            } else {
              tokens[idx].value = value;
            }
            depth(tokens[idx]);
            state.maxDepth += tokens[idx].depth;
          }
          if (idx !== 0 || value !== "") {
            parts.push(value);
          }
          prevIndex = i;
        }
        if (prevIndex && prevIndex + 1 < input.length) {
          const value = input.slice(prevIndex + 1);
          parts.push(value);
          if (opts.tokens) {
            tokens[tokens.length - 1].value = value;
            depth(tokens[tokens.length - 1]);
            state.maxDepth += tokens[tokens.length - 1].depth;
          }
        }
        state.slashes = slashes;
        state.parts = parts;
      }
      return state;
    };
    module.exports = scan;
  }
});

// node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/lib/parse.js
var require_parse = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/lib/parse.js"(exports, module) {
    "use strict";
    var constants = require_constants();
    var utils = require_utils();
    var {
      MAX_LENGTH,
      POSIX_REGEX_SOURCE,
      REGEX_NON_SPECIAL_CHARS,
      REGEX_SPECIAL_CHARS_BACKREF,
      REPLACEMENTS
    } = constants;
    var expandRange = (args, options) => {
      if (typeof options.expandRange === "function") {
        return options.expandRange(...args, options);
      }
      args.sort();
      const value = `[${args.join("-")}]`;
      try {
        new RegExp(value);
      } catch (ex) {
        return args.map((v) => utils.escapeRegex(v)).join("..");
      }
      return value;
    };
    var syntaxError = (type, char) => {
      return `Missing ${type}: "${char}" - use "\\\\${char}" to match literal characters`;
    };
    var parse3 = (input, options) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected a string");
      }
      input = REPLACEMENTS[input] || input;
      const opts = _chunkDUTQDV3Qjs.__spreadValues.call(void 0, {}, options);
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      let len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      const bos = { type: "bos", value: "", output: opts.prepend || "" };
      const tokens = [bos];
      const capture = opts.capture ? "" : "?:";
      const win322 = utils.isWindows(options);
      const PLATFORM_CHARS = constants.globChars(win322);
      const EXTGLOB_CHARS = constants.extglobChars(PLATFORM_CHARS);
      const {
        DOT_LITERAL,
        PLUS_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOT_SLASH,
        NO_DOTS_SLASH,
        QMARK,
        QMARK_NO_DOT,
        STAR,
        START_ANCHOR
      } = PLATFORM_CHARS;
      const globstar = (opts2) => {
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const nodot = opts.dot ? "" : NO_DOT;
      const qmarkNoDot = opts.dot ? QMARK : QMARK_NO_DOT;
      let star = opts.bash === true ? globstar(opts) : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      if (typeof opts.noext === "boolean") {
        opts.noextglob = opts.noext;
      }
      const state = {
        input,
        index: -1,
        start: 0,
        dot: opts.dot === true,
        consumed: "",
        output: "",
        prefix: "",
        backtrack: false,
        negated: false,
        brackets: 0,
        braces: 0,
        parens: 0,
        quotes: 0,
        globstar: false,
        tokens
      };
      input = utils.removePrefix(input, state);
      len = input.length;
      const extglobs = [];
      const braces = [];
      const stack = [];
      let prev = bos;
      let value;
      const eos = () => state.index === len - 1;
      const peek = state.peek = (n = 1) => input[state.index + n];
      const advance = state.advance = () => input[++state.index] || "";
      const remaining = () => input.slice(state.index + 1);
      const consume = (value2 = "", num = 0) => {
        state.consumed += value2;
        state.index += num;
      };
      const append = (token) => {
        state.output += token.output != null ? token.output : token.value;
        consume(token.value);
      };
      const negate = () => {
        let count = 1;
        while (peek() === "!" && (peek(2) !== "(" || peek(3) === "?")) {
          advance();
          state.start++;
          count++;
        }
        if (count % 2 === 0) {
          return false;
        }
        state.negated = true;
        state.start++;
        return true;
      };
      const increment = (type) => {
        state[type]++;
        stack.push(type);
      };
      const decrement = (type) => {
        state[type]--;
        stack.pop();
      };
      const push = (tok) => {
        if (prev.type === "globstar") {
          const isBrace = state.braces > 0 && (tok.type === "comma" || tok.type === "brace");
          const isExtglob = tok.extglob === true || extglobs.length && (tok.type === "pipe" || tok.type === "paren");
          if (tok.type !== "slash" && tok.type !== "paren" && !isBrace && !isExtglob) {
            state.output = state.output.slice(0, -prev.output.length);
            prev.type = "star";
            prev.value = "*";
            prev.output = star;
            state.output += prev.output;
          }
        }
        if (extglobs.length && tok.type !== "paren") {
          extglobs[extglobs.length - 1].inner += tok.value;
        }
        if (tok.value || tok.output)
          append(tok);
        if (prev && prev.type === "text" && tok.type === "text") {
          prev.value += tok.value;
          prev.output = (prev.output || "") + tok.value;
          return;
        }
        tok.prev = prev;
        tokens.push(tok);
        prev = tok;
      };
      const extglobOpen = (type, value2) => {
        const token = _chunkDUTQDV3Qjs.__spreadProps.call(void 0, _chunkDUTQDV3Qjs.__spreadValues.call(void 0, {}, EXTGLOB_CHARS[value2]), { conditions: 1, inner: "" });
        token.prev = prev;
        token.parens = state.parens;
        token.output = state.output;
        const output = (opts.capture ? "(" : "") + token.open;
        increment("parens");
        push({ type, value: value2, output: state.output ? "" : ONE_CHAR });
        push({ type: "paren", extglob: true, value: advance(), output });
        extglobs.push(token);
      };
      const extglobClose = (token) => {
        let output = token.close + (opts.capture ? ")" : "");
        let rest;
        if (token.type === "negate") {
          let extglobStar = star;
          if (token.inner && token.inner.length > 1 && token.inner.includes("/")) {
            extglobStar = globstar(opts);
          }
          if (extglobStar !== star || eos() || /^\)+$/.test(remaining())) {
            output = token.close = `)$))${extglobStar}`;
          }
          if (token.inner.includes("*") && (rest = remaining()) && /^\.[^\\/.]+$/.test(rest)) {
            output = token.close = `)${rest})${extglobStar})`;
          }
          if (token.prev.type === "bos") {
            state.negatedExtglob = true;
          }
        }
        push({ type: "paren", extglob: true, value, output });
        decrement("parens");
      };
      if (opts.fastpaths !== false && !/(^[*!]|[/()[\]{}"])/.test(input)) {
        let backslashes = false;
        let output = input.replace(REGEX_SPECIAL_CHARS_BACKREF, (m, esc, chars, first, rest, index) => {
          if (first === "\\") {
            backslashes = true;
            return m;
          }
          if (first === "?") {
            if (esc) {
              return esc + first + (rest ? QMARK.repeat(rest.length) : "");
            }
            if (index === 0) {
              return qmarkNoDot + (rest ? QMARK.repeat(rest.length) : "");
            }
            return QMARK.repeat(chars.length);
          }
          if (first === ".") {
            return DOT_LITERAL.repeat(chars.length);
          }
          if (first === "*") {
            if (esc) {
              return esc + first + (rest ? star : "");
            }
            return star;
          }
          return esc ? m : `\\${m}`;
        });
        if (backslashes === true) {
          if (opts.unescape === true) {
            output = output.replace(/\\/g, "");
          } else {
            output = output.replace(/\\+/g, (m) => {
              return m.length % 2 === 0 ? "\\\\" : m ? "\\" : "";
            });
          }
        }
        if (output === input && opts.contains === true) {
          state.output = input;
          return state;
        }
        state.output = utils.wrapOutput(output, state, options);
        return state;
      }
      while (!eos()) {
        value = advance();
        if (value === "\0") {
          continue;
        }
        if (value === "\\") {
          const next = peek();
          if (next === "/" && opts.bash !== true) {
            continue;
          }
          if (next === "." || next === ";") {
            continue;
          }
          if (!next) {
            value += "\\";
            push({ type: "text", value });
            continue;
          }
          const match = /^\\+/.exec(remaining());
          let slashes = 0;
          if (match && match[0].length > 2) {
            slashes = match[0].length;
            state.index += slashes;
            if (slashes % 2 !== 0) {
              value += "\\";
            }
          }
          if (opts.unescape === true) {
            value = advance();
          } else {
            value += advance();
          }
          if (state.brackets === 0) {
            push({ type: "text", value });
            continue;
          }
        }
        if (state.brackets > 0 && (value !== "]" || prev.value === "[" || prev.value === "[^")) {
          if (opts.posix !== false && value === ":") {
            const inner = prev.value.slice(1);
            if (inner.includes("[")) {
              prev.posix = true;
              if (inner.includes(":")) {
                const idx = prev.value.lastIndexOf("[");
                const pre = prev.value.slice(0, idx);
                const rest2 = prev.value.slice(idx + 2);
                const posix2 = POSIX_REGEX_SOURCE[rest2];
                if (posix2) {
                  prev.value = pre + posix2;
                  state.backtrack = true;
                  advance();
                  if (!bos.output && tokens.indexOf(prev) === 1) {
                    bos.output = ONE_CHAR;
                  }
                  continue;
                }
              }
            }
          }
          if (value === "[" && peek() !== ":" || value === "-" && peek() === "]") {
            value = `\\${value}`;
          }
          if (value === "]" && (prev.value === "[" || prev.value === "[^")) {
            value = `\\${value}`;
          }
          if (opts.posix === true && value === "!" && prev.value === "[") {
            value = "^";
          }
          prev.value += value;
          append({ value });
          continue;
        }
        if (state.quotes === 1 && value !== '"') {
          value = utils.escapeRegex(value);
          prev.value += value;
          append({ value });
          continue;
        }
        if (value === '"') {
          state.quotes = state.quotes === 1 ? 0 : 1;
          if (opts.keepQuotes === true) {
            push({ type: "text", value });
          }
          continue;
        }
        if (value === "(") {
          increment("parens");
          push({ type: "paren", value });
          continue;
        }
        if (value === ")") {
          if (state.parens === 0 && opts.strictBrackets === true) {
            throw new SyntaxError(syntaxError("opening", "("));
          }
          const extglob = extglobs[extglobs.length - 1];
          if (extglob && state.parens === extglob.parens + 1) {
            extglobClose(extglobs.pop());
            continue;
          }
          push({ type: "paren", value, output: state.parens ? ")" : "\\)" });
          decrement("parens");
          continue;
        }
        if (value === "[") {
          if (opts.nobracket === true || !remaining().includes("]")) {
            if (opts.nobracket !== true && opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("closing", "]"));
            }
            value = `\\${value}`;
          } else {
            increment("brackets");
          }
          push({ type: "bracket", value });
          continue;
        }
        if (value === "]") {
          if (opts.nobracket === true || prev && prev.type === "bracket" && prev.value.length === 1) {
            push({ type: "text", value, output: `\\${value}` });
            continue;
          }
          if (state.brackets === 0) {
            if (opts.strictBrackets === true) {
              throw new SyntaxError(syntaxError("opening", "["));
            }
            push({ type: "text", value, output: `\\${value}` });
            continue;
          }
          decrement("brackets");
          const prevValue = prev.value.slice(1);
          if (prev.posix !== true && prevValue[0] === "^" && !prevValue.includes("/")) {
            value = `/${value}`;
          }
          prev.value += value;
          append({ value });
          if (opts.literalBrackets === false || utils.hasRegexChars(prevValue)) {
            continue;
          }
          const escaped = utils.escapeRegex(prev.value);
          state.output = state.output.slice(0, -prev.value.length);
          if (opts.literalBrackets === true) {
            state.output += escaped;
            prev.value = escaped;
            continue;
          }
          prev.value = `(${capture}${escaped}|${prev.value})`;
          state.output += prev.value;
          continue;
        }
        if (value === "{" && opts.nobrace !== true) {
          increment("braces");
          const open = {
            type: "brace",
            value,
            output: "(",
            outputIndex: state.output.length,
            tokensIndex: state.tokens.length
          };
          braces.push(open);
          push(open);
          continue;
        }
        if (value === "}") {
          const brace = braces[braces.length - 1];
          if (opts.nobrace === true || !brace) {
            push({ type: "text", value, output: value });
            continue;
          }
          let output = ")";
          if (brace.dots === true) {
            const arr = tokens.slice();
            const range = [];
            for (let i = arr.length - 1; i >= 0; i--) {
              tokens.pop();
              if (arr[i].type === "brace") {
                break;
              }
              if (arr[i].type !== "dots") {
                range.unshift(arr[i].value);
              }
            }
            output = expandRange(range, opts);
            state.backtrack = true;
          }
          if (brace.comma !== true && brace.dots !== true) {
            const out = state.output.slice(0, brace.outputIndex);
            const toks = state.tokens.slice(brace.tokensIndex);
            brace.value = brace.output = "\\{";
            value = output = "\\}";
            state.output = out;
            for (const t4 of toks) {
              state.output += t4.output || t4.value;
            }
          }
          push({ type: "brace", value, output });
          decrement("braces");
          braces.pop();
          continue;
        }
        if (value === "|") {
          if (extglobs.length > 0) {
            extglobs[extglobs.length - 1].conditions++;
          }
          push({ type: "text", value });
          continue;
        }
        if (value === ",") {
          let output = value;
          const brace = braces[braces.length - 1];
          if (brace && stack[stack.length - 1] === "braces") {
            brace.comma = true;
            output = "|";
          }
          push({ type: "comma", value, output });
          continue;
        }
        if (value === "/") {
          if (prev.type === "dot" && state.index === state.start + 1) {
            state.start = state.index + 1;
            state.consumed = "";
            state.output = "";
            tokens.pop();
            prev = bos;
            continue;
          }
          push({ type: "slash", value, output: SLASH_LITERAL });
          continue;
        }
        if (value === ".") {
          if (state.braces > 0 && prev.type === "dot") {
            if (prev.value === ".")
              prev.output = DOT_LITERAL;
            const brace = braces[braces.length - 1];
            prev.type = "dots";
            prev.output += value;
            prev.value += value;
            brace.dots = true;
            continue;
          }
          if (state.braces + state.parens === 0 && prev.type !== "bos" && prev.type !== "slash") {
            push({ type: "text", value, output: DOT_LITERAL });
            continue;
          }
          push({ type: "dot", value, output: DOT_LITERAL });
          continue;
        }
        if (value === "?") {
          const isGroup = prev && prev.value === "(";
          if (!isGroup && opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("qmark", value);
            continue;
          }
          if (prev && prev.type === "paren") {
            const next = peek();
            let output = value;
            if (next === "<" && !utils.supportsLookbehinds()) {
              throw new Error("Node.js v10 or higher is required for regex lookbehinds");
            }
            if (prev.value === "(" && !/[!=<:]/.test(next) || next === "<" && !/<([!=]|\w+>)/.test(remaining())) {
              output = `\\${value}`;
            }
            push({ type: "text", value, output });
            continue;
          }
          if (opts.dot !== true && (prev.type === "slash" || prev.type === "bos")) {
            push({ type: "qmark", value, output: QMARK_NO_DOT });
            continue;
          }
          push({ type: "qmark", value, output: QMARK });
          continue;
        }
        if (value === "!") {
          if (opts.noextglob !== true && peek() === "(") {
            if (peek(2) !== "?" || !/[!=<:]/.test(peek(3))) {
              extglobOpen("negate", value);
              continue;
            }
          }
          if (opts.nonegate !== true && state.index === 0) {
            negate();
            continue;
          }
        }
        if (value === "+") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            extglobOpen("plus", value);
            continue;
          }
          if (prev && prev.value === "(" || opts.regex === false) {
            push({ type: "plus", value, output: PLUS_LITERAL });
            continue;
          }
          if (prev && (prev.type === "bracket" || prev.type === "paren" || prev.type === "brace") || state.parens > 0) {
            push({ type: "plus", value });
            continue;
          }
          push({ type: "plus", value: PLUS_LITERAL });
          continue;
        }
        if (value === "@") {
          if (opts.noextglob !== true && peek() === "(" && peek(2) !== "?") {
            push({ type: "at", extglob: true, value, output: "" });
            continue;
          }
          push({ type: "text", value });
          continue;
        }
        if (value !== "*") {
          if (value === "$" || value === "^") {
            value = `\\${value}`;
          }
          const match = REGEX_NON_SPECIAL_CHARS.exec(remaining());
          if (match) {
            value += match[0];
            state.index += match[0].length;
          }
          push({ type: "text", value });
          continue;
        }
        if (prev && (prev.type === "globstar" || prev.star === true)) {
          prev.type = "star";
          prev.star = true;
          prev.value += value;
          prev.output = star;
          state.backtrack = true;
          state.globstar = true;
          consume(value);
          continue;
        }
        let rest = remaining();
        if (opts.noextglob !== true && /^\([^?]/.test(rest)) {
          extglobOpen("star", value);
          continue;
        }
        if (prev.type === "star") {
          if (opts.noglobstar === true) {
            consume(value);
            continue;
          }
          const prior = prev.prev;
          const before = prior.prev;
          const isStart = prior.type === "slash" || prior.type === "bos";
          const afterStar = before && (before.type === "star" || before.type === "globstar");
          if (opts.bash === true && (!isStart || rest[0] && rest[0] !== "/")) {
            push({ type: "star", value, output: "" });
            continue;
          }
          const isBrace = state.braces > 0 && (prior.type === "comma" || prior.type === "brace");
          const isExtglob = extglobs.length && (prior.type === "pipe" || prior.type === "paren");
          if (!isStart && prior.type !== "paren" && !isBrace && !isExtglob) {
            push({ type: "star", value, output: "" });
            continue;
          }
          while (rest.slice(0, 3) === "/**") {
            const after = input[state.index + 4];
            if (after && after !== "/") {
              break;
            }
            rest = rest.slice(3);
            consume("/**", 3);
          }
          if (prior.type === "bos" && eos()) {
            prev.type = "globstar";
            prev.value += value;
            prev.output = globstar(opts);
            state.output = prev.output;
            state.globstar = true;
            consume(value);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && !afterStar && eos()) {
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = globstar(opts) + (opts.strictSlashes ? ")" : "|$)");
            prev.value += value;
            state.globstar = true;
            state.output += prior.output + prev.output;
            consume(value);
            continue;
          }
          if (prior.type === "slash" && prior.prev.type !== "bos" && rest[0] === "/") {
            const end = rest[1] !== void 0 ? "|$" : "";
            state.output = state.output.slice(0, -(prior.output + prev.output).length);
            prior.output = `(?:${prior.output}`;
            prev.type = "globstar";
            prev.output = `${globstar(opts)}${SLASH_LITERAL}|${SLASH_LITERAL}${end})`;
            prev.value += value;
            state.output += prior.output + prev.output;
            state.globstar = true;
            consume(value + advance());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          if (prior.type === "bos" && rest[0] === "/") {
            prev.type = "globstar";
            prev.value += value;
            prev.output = `(?:^|${SLASH_LITERAL}|${globstar(opts)}${SLASH_LITERAL})`;
            state.output = prev.output;
            state.globstar = true;
            consume(value + advance());
            push({ type: "slash", value: "/", output: "" });
            continue;
          }
          state.output = state.output.slice(0, -prev.output.length);
          prev.type = "globstar";
          prev.output = globstar(opts);
          prev.value += value;
          state.output += prev.output;
          state.globstar = true;
          consume(value);
          continue;
        }
        const token = { type: "star", value, output: star };
        if (opts.bash === true) {
          token.output = ".*?";
          if (prev.type === "bos" || prev.type === "slash") {
            token.output = nodot + token.output;
          }
          push(token);
          continue;
        }
        if (prev && (prev.type === "bracket" || prev.type === "paren") && opts.regex === true) {
          token.output = value;
          push(token);
          continue;
        }
        if (state.index === state.start || prev.type === "slash" || prev.type === "dot") {
          if (prev.type === "dot") {
            state.output += NO_DOT_SLASH;
            prev.output += NO_DOT_SLASH;
          } else if (opts.dot === true) {
            state.output += NO_DOTS_SLASH;
            prev.output += NO_DOTS_SLASH;
          } else {
            state.output += nodot;
            prev.output += nodot;
          }
          if (peek() !== "*") {
            state.output += ONE_CHAR;
            prev.output += ONE_CHAR;
          }
        }
        push(token);
      }
      while (state.brackets > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", "]"));
        state.output = utils.escapeLast(state.output, "[");
        decrement("brackets");
      }
      while (state.parens > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", ")"));
        state.output = utils.escapeLast(state.output, "(");
        decrement("parens");
      }
      while (state.braces > 0) {
        if (opts.strictBrackets === true)
          throw new SyntaxError(syntaxError("closing", "}"));
        state.output = utils.escapeLast(state.output, "{");
        decrement("braces");
      }
      if (opts.strictSlashes !== true && (prev.type === "star" || prev.type === "bracket")) {
        push({ type: "maybe_slash", value: "", output: `${SLASH_LITERAL}?` });
      }
      if (state.backtrack === true) {
        state.output = "";
        for (const token of state.tokens) {
          state.output += token.output != null ? token.output : token.value;
          if (token.suffix) {
            state.output += token.suffix;
          }
        }
      }
      return state;
    };
    parse3.fastpaths = (input, options) => {
      const opts = _chunkDUTQDV3Qjs.__spreadValues.call(void 0, {}, options);
      const max = typeof opts.maxLength === "number" ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;
      const len = input.length;
      if (len > max) {
        throw new SyntaxError(`Input length: ${len}, exceeds maximum allowed length: ${max}`);
      }
      input = REPLACEMENTS[input] || input;
      const win322 = utils.isWindows(options);
      const {
        DOT_LITERAL,
        SLASH_LITERAL,
        ONE_CHAR,
        DOTS_SLASH,
        NO_DOT,
        NO_DOTS,
        NO_DOTS_SLASH,
        STAR,
        START_ANCHOR
      } = constants.globChars(win322);
      const nodot = opts.dot ? NO_DOTS : NO_DOT;
      const slashDot = opts.dot ? NO_DOTS_SLASH : NO_DOT;
      const capture = opts.capture ? "" : "?:";
      const state = { negated: false, prefix: "" };
      let star = opts.bash === true ? ".*?" : STAR;
      if (opts.capture) {
        star = `(${star})`;
      }
      const globstar = (opts2) => {
        if (opts2.noglobstar === true)
          return star;
        return `(${capture}(?:(?!${START_ANCHOR}${opts2.dot ? DOTS_SLASH : DOT_LITERAL}).)*?)`;
      };
      const create = (str) => {
        switch (str) {
          case "*":
            return `${nodot}${ONE_CHAR}${star}`;
          case ".*":
            return `${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*.*":
            return `${nodot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "*/*":
            return `${nodot}${star}${SLASH_LITERAL}${ONE_CHAR}${slashDot}${star}`;
          case "**":
            return nodot + globstar(opts);
          case "**/*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${ONE_CHAR}${star}`;
          case "**/*.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${slashDot}${star}${DOT_LITERAL}${ONE_CHAR}${star}`;
          case "**/.*":
            return `(?:${nodot}${globstar(opts)}${SLASH_LITERAL})?${DOT_LITERAL}${ONE_CHAR}${star}`;
          default: {
            const match = /^(.*?)\.(\w+)$/.exec(str);
            if (!match)
              return;
            const source2 = create(match[1]);
            if (!source2)
              return;
            return source2 + DOT_LITERAL + match[2];
          }
        }
      };
      const output = utils.removePrefix(input, state);
      let source = create(output);
      if (source && opts.strictSlashes !== true) {
        source += `${SLASH_LITERAL}?`;
      }
      return source;
    };
    module.exports = parse3;
  }
});

// node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/lib/picomatch.js
var require_picomatch = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/lib/picomatch.js"(exports, module) {
    "use strict";
    var path = _chunkDUTQDV3Qjs.__require.call(void 0, "path");
    var scan = require_scan();
    var parse3 = require_parse();
    var utils = require_utils();
    var constants = require_constants();
    var isObject = (val) => val && typeof val === "object" && !Array.isArray(val);
    var picomatch = (glob, options, returnState = false) => {
      if (Array.isArray(glob)) {
        const fns = glob.map((input) => picomatch(input, options, returnState));
        const arrayMatcher = (str) => {
          for (const isMatch of fns) {
            const state2 = isMatch(str);
            if (state2)
              return state2;
          }
          return false;
        };
        return arrayMatcher;
      }
      const isState = isObject(glob) && glob.tokens && glob.input;
      if (glob === "" || typeof glob !== "string" && !isState) {
        throw new TypeError("Expected pattern to be a non-empty string");
      }
      const opts = options || {};
      const posix2 = utils.isWindows(options);
      const regex = isState ? picomatch.compileRe(glob, options) : picomatch.makeRe(glob, options, false, true);
      const state = regex.state;
      delete regex.state;
      let isIgnored = () => false;
      if (opts.ignore) {
        const ignoreOpts = _chunkDUTQDV3Qjs.__spreadProps.call(void 0, _chunkDUTQDV3Qjs.__spreadValues.call(void 0, {}, options), { ignore: null, onMatch: null, onResult: null });
        isIgnored = picomatch(opts.ignore, ignoreOpts, returnState);
      }
      const matcher = (input, returnObject = false) => {
        const { isMatch, match, output } = picomatch.test(input, regex, options, { glob, posix: posix2 });
        const result = { glob, state, regex, posix: posix2, input, output, match, isMatch };
        if (typeof opts.onResult === "function") {
          opts.onResult(result);
        }
        if (isMatch === false) {
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (isIgnored(input)) {
          if (typeof opts.onIgnore === "function") {
            opts.onIgnore(result);
          }
          result.isMatch = false;
          return returnObject ? result : false;
        }
        if (typeof opts.onMatch === "function") {
          opts.onMatch(result);
        }
        return returnObject ? result : true;
      };
      if (returnState) {
        matcher.state = state;
      }
      return matcher;
    };
    picomatch.test = (input, regex, options, { glob, posix: posix2 } = {}) => {
      if (typeof input !== "string") {
        throw new TypeError("Expected input to be a string");
      }
      if (input === "") {
        return { isMatch: false, output: "" };
      }
      const opts = options || {};
      const format = opts.format || (posix2 ? utils.toPosixSlashes : null);
      let match = input === glob;
      let output = match && format ? format(input) : input;
      if (match === false) {
        output = format ? format(input) : input;
        match = output === glob;
      }
      if (match === false || opts.capture === true) {
        if (opts.matchBase === true || opts.basename === true) {
          match = picomatch.matchBase(input, regex, options, posix2);
        } else {
          match = regex.exec(output);
        }
      }
      return { isMatch: Boolean(match), match, output };
    };
    picomatch.matchBase = (input, glob, options, posix2 = utils.isWindows(options)) => {
      const regex = glob instanceof RegExp ? glob : picomatch.makeRe(glob, options);
      return regex.test(path.basename(input));
    };
    picomatch.isMatch = (str, patterns, options) => picomatch(patterns, options)(str);
    picomatch.parse = (pattern, options) => {
      if (Array.isArray(pattern))
        return pattern.map((p) => picomatch.parse(p, options));
      return parse3(pattern, _chunkDUTQDV3Qjs.__spreadProps.call(void 0, _chunkDUTQDV3Qjs.__spreadValues.call(void 0, {}, options), { fastpaths: false }));
    };
    picomatch.scan = (input, options) => scan(input, options);
    picomatch.compileRe = (state, options, returnOutput = false, returnState = false) => {
      if (returnOutput === true) {
        return state.output;
      }
      const opts = options || {};
      const prepend = opts.contains ? "" : "^";
      const append = opts.contains ? "" : "$";
      let source = `${prepend}(?:${state.output})${append}`;
      if (state && state.negated === true) {
        source = `^(?!${source}).*$`;
      }
      const regex = picomatch.toRegex(source, options);
      if (returnState === true) {
        regex.state = state;
      }
      return regex;
    };
    picomatch.makeRe = (input, options = {}, returnOutput = false, returnState = false) => {
      if (!input || typeof input !== "string") {
        throw new TypeError("Expected a non-empty string");
      }
      let parsed = { negated: false, fastpaths: true };
      if (options.fastpaths !== false && (input[0] === "." || input[0] === "*")) {
        parsed.output = parse3.fastpaths(input, options);
      }
      if (!parsed.output) {
        parsed = parse3(input, options);
      }
      return picomatch.compileRe(parsed, options, returnOutput, returnState);
    };
    picomatch.toRegex = (source, options) => {
      try {
        const opts = options || {};
        return new RegExp(source, opts.flags || (opts.nocase ? "i" : ""));
      } catch (err) {
        if (options && options.debug === true)
          throw err;
        return /$^/;
      }
    };
    picomatch.constants = constants;
    module.exports = picomatch;
  }
});

// node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/index.js
var require_picomatch2 = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/picomatch@2.3.0/node_modules/picomatch/index.js"(exports, module) {
    "use strict";
    module.exports = require_picomatch();
  }
});

// node_modules/.pnpm/acorn@7.4.1/node_modules/acorn/dist/acorn.js
var require_acorn = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/acorn@7.4.1/node_modules/acorn/dist/acorn.js"(exports, module) {
    (function(global, factory) {
      typeof exports === "object" && typeof module !== "undefined" ? factory(exports) : typeof define === "function" && define.amd ? define(["exports"], factory) : (global = global || self, factory(global.acorn = {}));
    })(exports, function(exports2) {
      "use strict";
      var reservedWords2 = {
        3: "abstract boolean byte char class double enum export extends final float goto implements import int interface long native package private protected public short static super synchronized throws transient volatile",
        5: "class enum extends super const export import",
        6: "enum",
        strict: "implements interface let package private protected public static yield",
        strictBind: "eval arguments"
      };
      var ecma5AndLessKeywords = "break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this";
      var keywords = {
        5: ecma5AndLessKeywords,
        "5module": ecma5AndLessKeywords + " export import",
        6: ecma5AndLessKeywords + " const class extends export import super"
      };
      var keywordRelationalOperator = /^in(stanceof)?$/;
      var nonASCIIidentifierStartChars = "\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
      var nonASCIIidentifierChars = "\u200C\u200D\xB7\u0300-\u036F\u0387\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u0669\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u06F0-\u06F9\u0711\u0730-\u074A\u07A6-\u07B0\u07C0-\u07C9\u07EB-\u07F3\u07FD\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D3-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0966-\u096F\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u09E6-\u09EF\u09FE\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A66-\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AE6-\u0AEF\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B55-\u0B57\u0B62\u0B63\u0B66-\u0B6F\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0BE6-\u0BEF\u0C00-\u0C04\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0CE6-\u0CEF\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D66-\u0D6F\u0D81-\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0E50-\u0E59\u0EB1\u0EB4-\u0EBC\u0EC8-\u0ECD\u0ED0-\u0ED9\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1040-\u1049\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F-\u109D\u135D-\u135F\u1369-\u1371\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u18A9\u1920-\u192B\u1930-\u193B\u1946-\u194F\u19D0-\u19DA\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AB0-\u1ABD\u1ABF\u1AC0\u1B00-\u1B04\u1B34-\u1B44\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BB0-\u1BB9\u1BE6-\u1BF3\u1C24-\u1C37\u1C40-\u1C49\u1C50-\u1C59\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u203F\u2040\u2054\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA620-\uA629\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA82C\uA880\uA881\uA8B4-\uA8C5\uA8D0-\uA8D9\uA8E0-\uA8F1\uA8FF-\uA909\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9D0-\uA9D9\uA9E5\uA9F0-\uA9F9\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA50-\uAA59\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uABF0-\uABF9\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F\uFE33\uFE34\uFE4D-\uFE4F\uFF10-\uFF19\uFF3F";
      var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
      var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");
      nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;
      var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 107, 20, 28, 22, 13, 52, 76, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 230, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 35, 56, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2749, 1070, 4050, 582, 8634, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8952, 286, 50, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 2357, 44, 11, 6, 17, 0, 370, 43, 1301, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42717, 35, 4148, 12, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];
      var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 176, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 135, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 419, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];
      function isInAstralSet(code, set) {
        var pos = 65536;
        for (var i = 0; i < set.length; i += 2) {
          pos += set[i];
          if (pos > code) {
            return false;
          }
          pos += set[i + 1];
          if (pos >= code) {
            return true;
          }
        }
      }
      function isIdentifierStart(code, astral) {
        if (code < 65) {
          return code === 36;
        }
        if (code < 91) {
          return true;
        }
        if (code < 97) {
          return code === 95;
        }
        if (code < 123) {
          return true;
        }
        if (code <= 65535) {
          return code >= 170 && nonASCIIidentifierStart.test(String.fromCharCode(code));
        }
        if (astral === false) {
          return false;
        }
        return isInAstralSet(code, astralIdentifierStartCodes);
      }
      function isIdentifierChar(code, astral) {
        if (code < 48) {
          return code === 36;
        }
        if (code < 58) {
          return true;
        }
        if (code < 65) {
          return false;
        }
        if (code < 91) {
          return true;
        }
        if (code < 97) {
          return code === 95;
        }
        if (code < 123) {
          return true;
        }
        if (code <= 65535) {
          return code >= 170 && nonASCIIidentifier.test(String.fromCharCode(code));
        }
        if (astral === false) {
          return false;
        }
        return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
      }
      var TokenType = function TokenType2(label, conf) {
        if (conf === void 0)
          conf = {};
        this.label = label;
        this.keyword = conf.keyword;
        this.beforeExpr = !!conf.beforeExpr;
        this.startsExpr = !!conf.startsExpr;
        this.isLoop = !!conf.isLoop;
        this.isAssign = !!conf.isAssign;
        this.prefix = !!conf.prefix;
        this.postfix = !!conf.postfix;
        this.binop = conf.binop || null;
        this.updateContext = null;
      };
      function binop(name, prec) {
        return new TokenType(name, { beforeExpr: true, binop: prec });
      }
      var beforeExpr = { beforeExpr: true }, startsExpr = { startsExpr: true };
      var keywords$1 = {};
      function kw(name, options) {
        if (options === void 0)
          options = {};
        options.keyword = name;
        return keywords$1[name] = new TokenType(name, options);
      }
      var types = {
        num: new TokenType("num", startsExpr),
        regexp: new TokenType("regexp", startsExpr),
        string: new TokenType("string", startsExpr),
        name: new TokenType("name", startsExpr),
        eof: new TokenType("eof"),
        bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
        bracketR: new TokenType("]"),
        braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
        braceR: new TokenType("}"),
        parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
        parenR: new TokenType(")"),
        comma: new TokenType(",", beforeExpr),
        semi: new TokenType(";", beforeExpr),
        colon: new TokenType(":", beforeExpr),
        dot: new TokenType("."),
        question: new TokenType("?", beforeExpr),
        questionDot: new TokenType("?."),
        arrow: new TokenType("=>", beforeExpr),
        template: new TokenType("template"),
        invalidTemplate: new TokenType("invalidTemplate"),
        ellipsis: new TokenType("...", beforeExpr),
        backQuote: new TokenType("`", startsExpr),
        dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
        eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
        assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
        incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
        prefix: new TokenType("!/~", { beforeExpr: true, prefix: true, startsExpr: true }),
        logicalOR: binop("||", 1),
        logicalAND: binop("&&", 2),
        bitwiseOR: binop("|", 3),
        bitwiseXOR: binop("^", 4),
        bitwiseAND: binop("&", 5),
        equality: binop("==/!=/===/!==", 6),
        relational: binop("</>/<=/>=", 7),
        bitShift: binop("<</>>/>>>", 8),
        plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
        modulo: binop("%", 10),
        star: binop("*", 10),
        slash: binop("/", 10),
        starstar: new TokenType("**", { beforeExpr: true }),
        coalesce: binop("??", 1),
        _break: kw("break"),
        _case: kw("case", beforeExpr),
        _catch: kw("catch"),
        _continue: kw("continue"),
        _debugger: kw("debugger"),
        _default: kw("default", beforeExpr),
        _do: kw("do", { isLoop: true, beforeExpr: true }),
        _else: kw("else", beforeExpr),
        _finally: kw("finally"),
        _for: kw("for", { isLoop: true }),
        _function: kw("function", startsExpr),
        _if: kw("if"),
        _return: kw("return", beforeExpr),
        _switch: kw("switch"),
        _throw: kw("throw", beforeExpr),
        _try: kw("try"),
        _var: kw("var"),
        _const: kw("const"),
        _while: kw("while", { isLoop: true }),
        _with: kw("with"),
        _new: kw("new", { beforeExpr: true, startsExpr: true }),
        _this: kw("this", startsExpr),
        _super: kw("super", startsExpr),
        _class: kw("class", startsExpr),
        _extends: kw("extends", beforeExpr),
        _export: kw("export"),
        _import: kw("import", startsExpr),
        _null: kw("null", startsExpr),
        _true: kw("true", startsExpr),
        _false: kw("false", startsExpr),
        _in: kw("in", { beforeExpr: true, binop: 7 }),
        _instanceof: kw("instanceof", { beforeExpr: true, binop: 7 }),
        _typeof: kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true }),
        _void: kw("void", { beforeExpr: true, prefix: true, startsExpr: true }),
        _delete: kw("delete", { beforeExpr: true, prefix: true, startsExpr: true })
      };
      var lineBreak = /\r\n?|\n|\u2028|\u2029/;
      var lineBreakG = new RegExp(lineBreak.source, "g");
      function isNewLine(code, ecma2019String) {
        return code === 10 || code === 13 || !ecma2019String && (code === 8232 || code === 8233);
      }
      var nonASCIIwhitespace = /[\u1680\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
      var skipWhiteSpace = /(?:\s|\/\/.*|\/\*[^]*?\*\/)*/g;
      var ref = Object.prototype;
      var hasOwnProperty = ref.hasOwnProperty;
      var toString2 = ref.toString;
      function has(obj, propName) {
        return hasOwnProperty.call(obj, propName);
      }
      var isArray2 = Array.isArray || function(obj) {
        return toString2.call(obj) === "[object Array]";
      };
      function wordsRegexp(words) {
        return new RegExp("^(?:" + words.replace(/ /g, "|") + ")$");
      }
      var Position = function Position2(line, col) {
        this.line = line;
        this.column = col;
      };
      Position.prototype.offset = function offset(n) {
        return new Position(this.line, this.column + n);
      };
      var SourceLocation = function SourceLocation2(p, start, end) {
        this.start = start;
        this.end = end;
        if (p.sourceFile !== null) {
          this.source = p.sourceFile;
        }
      };
      function getLineInfo(input, offset) {
        for (var line = 1, cur = 0; ; ) {
          lineBreakG.lastIndex = cur;
          var match = lineBreakG.exec(input);
          if (match && match.index < offset) {
            ++line;
            cur = match.index + match[0].length;
          } else {
            return new Position(line, offset - cur);
          }
        }
      }
      var defaultOptions = {
        ecmaVersion: 10,
        sourceType: "script",
        onInsertedSemicolon: null,
        onTrailingComma: null,
        allowReserved: null,
        allowReturnOutsideFunction: false,
        allowImportExportEverywhere: false,
        allowAwaitOutsideFunction: false,
        allowHashBang: false,
        locations: false,
        onToken: null,
        onComment: null,
        ranges: false,
        program: null,
        sourceFile: null,
        directSourceFile: null,
        preserveParens: false
      };
      function getOptions(opts) {
        var options = {};
        for (var opt in defaultOptions) {
          options[opt] = opts && has(opts, opt) ? opts[opt] : defaultOptions[opt];
        }
        if (options.ecmaVersion >= 2015) {
          options.ecmaVersion -= 2009;
        }
        if (options.allowReserved == null) {
          options.allowReserved = options.ecmaVersion < 5;
        }
        if (isArray2(options.onToken)) {
          var tokens = options.onToken;
          options.onToken = function(token) {
            return tokens.push(token);
          };
        }
        if (isArray2(options.onComment)) {
          options.onComment = pushComment(options, options.onComment);
        }
        return options;
      }
      function pushComment(options, array) {
        return function(block, text, start, end, startLoc, endLoc) {
          var comment = {
            type: block ? "Block" : "Line",
            value: text,
            start,
            end
          };
          if (options.locations) {
            comment.loc = new SourceLocation(this, startLoc, endLoc);
          }
          if (options.ranges) {
            comment.range = [start, end];
          }
          array.push(comment);
        };
      }
      var SCOPE_TOP = 1, SCOPE_FUNCTION = 2, SCOPE_VAR = SCOPE_TOP | SCOPE_FUNCTION, SCOPE_ASYNC = 4, SCOPE_GENERATOR = 8, SCOPE_ARROW = 16, SCOPE_SIMPLE_CATCH = 32, SCOPE_SUPER = 64, SCOPE_DIRECT_SUPER = 128;
      function functionFlags(async, generator) {
        return SCOPE_FUNCTION | (async ? SCOPE_ASYNC : 0) | (generator ? SCOPE_GENERATOR : 0);
      }
      var BIND_NONE = 0, BIND_VAR = 1, BIND_LEXICAL = 2, BIND_FUNCTION = 3, BIND_SIMPLE_CATCH = 4, BIND_OUTSIDE = 5;
      var Parser = function Parser2(options, input, startPos) {
        this.options = options = getOptions(options);
        this.sourceFile = options.sourceFile;
        this.keywords = wordsRegexp(keywords[options.ecmaVersion >= 6 ? 6 : options.sourceType === "module" ? "5module" : 5]);
        var reserved = "";
        if (options.allowReserved !== true) {
          for (var v = options.ecmaVersion; ; v--) {
            if (reserved = reservedWords2[v]) {
              break;
            }
          }
          if (options.sourceType === "module") {
            reserved += " await";
          }
        }
        this.reservedWords = wordsRegexp(reserved);
        var reservedStrict = (reserved ? reserved + " " : "") + reservedWords2.strict;
        this.reservedWordsStrict = wordsRegexp(reservedStrict);
        this.reservedWordsStrictBind = wordsRegexp(reservedStrict + " " + reservedWords2.strictBind);
        this.input = String(input);
        this.containsEsc = false;
        if (startPos) {
          this.pos = startPos;
          this.lineStart = this.input.lastIndexOf("\n", startPos - 1) + 1;
          this.curLine = this.input.slice(0, this.lineStart).split(lineBreak).length;
        } else {
          this.pos = this.lineStart = 0;
          this.curLine = 1;
        }
        this.type = types.eof;
        this.value = null;
        this.start = this.end = this.pos;
        this.startLoc = this.endLoc = this.curPosition();
        this.lastTokEndLoc = this.lastTokStartLoc = null;
        this.lastTokStart = this.lastTokEnd = this.pos;
        this.context = this.initialContext();
        this.exprAllowed = true;
        this.inModule = options.sourceType === "module";
        this.strict = this.inModule || this.strictDirective(this.pos);
        this.potentialArrowAt = -1;
        this.yieldPos = this.awaitPos = this.awaitIdentPos = 0;
        this.labels = [];
        this.undefinedExports = {};
        if (this.pos === 0 && options.allowHashBang && this.input.slice(0, 2) === "#!") {
          this.skipLineComment(2);
        }
        this.scopeStack = [];
        this.enterScope(SCOPE_TOP);
        this.regexpState = null;
      };
      var prototypeAccessors = { inFunction: { configurable: true }, inGenerator: { configurable: true }, inAsync: { configurable: true }, allowSuper: { configurable: true }, allowDirectSuper: { configurable: true }, treatFunctionsAsVar: { configurable: true } };
      Parser.prototype.parse = function parse4() {
        var node = this.options.program || this.startNode();
        this.nextToken();
        return this.parseTopLevel(node);
      };
      prototypeAccessors.inFunction.get = function() {
        return (this.currentVarScope().flags & SCOPE_FUNCTION) > 0;
      };
      prototypeAccessors.inGenerator.get = function() {
        return (this.currentVarScope().flags & SCOPE_GENERATOR) > 0;
      };
      prototypeAccessors.inAsync.get = function() {
        return (this.currentVarScope().flags & SCOPE_ASYNC) > 0;
      };
      prototypeAccessors.allowSuper.get = function() {
        return (this.currentThisScope().flags & SCOPE_SUPER) > 0;
      };
      prototypeAccessors.allowDirectSuper.get = function() {
        return (this.currentThisScope().flags & SCOPE_DIRECT_SUPER) > 0;
      };
      prototypeAccessors.treatFunctionsAsVar.get = function() {
        return this.treatFunctionsAsVarInScope(this.currentScope());
      };
      Parser.prototype.inNonArrowFunction = function inNonArrowFunction() {
        return (this.currentThisScope().flags & SCOPE_FUNCTION) > 0;
      };
      Parser.extend = function extend() {
        var plugins = [], len = arguments.length;
        while (len--)
          plugins[len] = arguments[len];
        var cls = this;
        for (var i = 0; i < plugins.length; i++) {
          cls = plugins[i](cls);
        }
        return cls;
      };
      Parser.parse = function parse4(input, options) {
        return new this(options, input).parse();
      };
      Parser.parseExpressionAt = function parseExpressionAt2(input, pos, options) {
        var parser = new this(options, input, pos);
        parser.nextToken();
        return parser.parseExpression();
      };
      Parser.tokenizer = function tokenizer2(input, options) {
        return new this(options, input);
      };
      Object.defineProperties(Parser.prototype, prototypeAccessors);
      var pp = Parser.prototype;
      var literal = /^(?:'((?:\\.|[^'\\])*?)'|"((?:\\.|[^"\\])*?)")/;
      pp.strictDirective = function(start) {
        for (; ; ) {
          skipWhiteSpace.lastIndex = start;
          start += skipWhiteSpace.exec(this.input)[0].length;
          var match = literal.exec(this.input.slice(start));
          if (!match) {
            return false;
          }
          if ((match[1] || match[2]) === "use strict") {
            skipWhiteSpace.lastIndex = start + match[0].length;
            var spaceAfter = skipWhiteSpace.exec(this.input), end = spaceAfter.index + spaceAfter[0].length;
            var next = this.input.charAt(end);
            return next === ";" || next === "}" || lineBreak.test(spaceAfter[0]) && !(/[(`.[+\-/*%<>=,?^&]/.test(next) || next === "!" && this.input.charAt(end + 1) === "=");
          }
          start += match[0].length;
          skipWhiteSpace.lastIndex = start;
          start += skipWhiteSpace.exec(this.input)[0].length;
          if (this.input[start] === ";") {
            start++;
          }
        }
      };
      pp.eat = function(type) {
        if (this.type === type) {
          this.next();
          return true;
        } else {
          return false;
        }
      };
      pp.isContextual = function(name) {
        return this.type === types.name && this.value === name && !this.containsEsc;
      };
      pp.eatContextual = function(name) {
        if (!this.isContextual(name)) {
          return false;
        }
        this.next();
        return true;
      };
      pp.expectContextual = function(name) {
        if (!this.eatContextual(name)) {
          this.unexpected();
        }
      };
      pp.canInsertSemicolon = function() {
        return this.type === types.eof || this.type === types.braceR || lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
      };
      pp.insertSemicolon = function() {
        if (this.canInsertSemicolon()) {
          if (this.options.onInsertedSemicolon) {
            this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc);
          }
          return true;
        }
      };
      pp.semicolon = function() {
        if (!this.eat(types.semi) && !this.insertSemicolon()) {
          this.unexpected();
        }
      };
      pp.afterTrailingComma = function(tokType, notNext) {
        if (this.type === tokType) {
          if (this.options.onTrailingComma) {
            this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc);
          }
          if (!notNext) {
            this.next();
          }
          return true;
        }
      };
      pp.expect = function(type) {
        this.eat(type) || this.unexpected();
      };
      pp.unexpected = function(pos) {
        this.raise(pos != null ? pos : this.start, "Unexpected token");
      };
      function DestructuringErrors() {
        this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = this.doubleProto = -1;
      }
      pp.checkPatternErrors = function(refDestructuringErrors, isAssign) {
        if (!refDestructuringErrors) {
          return;
        }
        if (refDestructuringErrors.trailingComma > -1) {
          this.raiseRecoverable(refDestructuringErrors.trailingComma, "Comma is not permitted after the rest element");
        }
        var parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind;
        if (parens > -1) {
          this.raiseRecoverable(parens, "Parenthesized pattern");
        }
      };
      pp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {
        if (!refDestructuringErrors) {
          return false;
        }
        var shorthandAssign = refDestructuringErrors.shorthandAssign;
        var doubleProto = refDestructuringErrors.doubleProto;
        if (!andThrow) {
          return shorthandAssign >= 0 || doubleProto >= 0;
        }
        if (shorthandAssign >= 0) {
          this.raise(shorthandAssign, "Shorthand property assignments are valid only in destructuring patterns");
        }
        if (doubleProto >= 0) {
          this.raiseRecoverable(doubleProto, "Redefinition of __proto__ property");
        }
      };
      pp.checkYieldAwaitInDefaultParams = function() {
        if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos)) {
          this.raise(this.yieldPos, "Yield expression cannot be a default value");
        }
        if (this.awaitPos) {
          this.raise(this.awaitPos, "Await expression cannot be a default value");
        }
      };
      pp.isSimpleAssignTarget = function(expr) {
        if (expr.type === "ParenthesizedExpression") {
          return this.isSimpleAssignTarget(expr.expression);
        }
        return expr.type === "Identifier" || expr.type === "MemberExpression";
      };
      var pp$1 = Parser.prototype;
      pp$1.parseTopLevel = function(node) {
        var exports3 = {};
        if (!node.body) {
          node.body = [];
        }
        while (this.type !== types.eof) {
          var stmt = this.parseStatement(null, true, exports3);
          node.body.push(stmt);
        }
        if (this.inModule) {
          for (var i = 0, list = Object.keys(this.undefinedExports); i < list.length; i += 1) {
            var name = list[i];
            this.raiseRecoverable(this.undefinedExports[name].start, "Export '" + name + "' is not defined");
          }
        }
        this.adaptDirectivePrologue(node.body);
        this.next();
        node.sourceType = this.options.sourceType;
        return this.finishNode(node, "Program");
      };
      var loopLabel = { kind: "loop" }, switchLabel = { kind: "switch" };
      pp$1.isLet = function(context) {
        if (this.options.ecmaVersion < 6 || !this.isContextual("let")) {
          return false;
        }
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
        if (nextCh === 91) {
          return true;
        }
        if (context) {
          return false;
        }
        if (nextCh === 123) {
          return true;
        }
        if (isIdentifierStart(nextCh, true)) {
          var pos = next + 1;
          while (isIdentifierChar(this.input.charCodeAt(pos), true)) {
            ++pos;
          }
          var ident = this.input.slice(next, pos);
          if (!keywordRelationalOperator.test(ident)) {
            return true;
          }
        }
        return false;
      };
      pp$1.isAsyncFunction = function() {
        if (this.options.ecmaVersion < 8 || !this.isContextual("async")) {
          return false;
        }
        skipWhiteSpace.lastIndex = this.pos;
        var skip = skipWhiteSpace.exec(this.input);
        var next = this.pos + skip[0].length;
        return !lineBreak.test(this.input.slice(this.pos, next)) && this.input.slice(next, next + 8) === "function" && (next + 8 === this.input.length || !isIdentifierChar(this.input.charAt(next + 8)));
      };
      pp$1.parseStatement = function(context, topLevel, exports3) {
        var starttype = this.type, node = this.startNode(), kind;
        if (this.isLet(context)) {
          starttype = types._var;
          kind = "let";
        }
        switch (starttype) {
          case types._break:
          case types._continue:
            return this.parseBreakContinueStatement(node, starttype.keyword);
          case types._debugger:
            return this.parseDebuggerStatement(node);
          case types._do:
            return this.parseDoStatement(node);
          case types._for:
            return this.parseForStatement(node);
          case types._function:
            if (context && (this.strict || context !== "if" && context !== "label") && this.options.ecmaVersion >= 6) {
              this.unexpected();
            }
            return this.parseFunctionStatement(node, false, !context);
          case types._class:
            if (context) {
              this.unexpected();
            }
            return this.parseClass(node, true);
          case types._if:
            return this.parseIfStatement(node);
          case types._return:
            return this.parseReturnStatement(node);
          case types._switch:
            return this.parseSwitchStatement(node);
          case types._throw:
            return this.parseThrowStatement(node);
          case types._try:
            return this.parseTryStatement(node);
          case types._const:
          case types._var:
            kind = kind || this.value;
            if (context && kind !== "var") {
              this.unexpected();
            }
            return this.parseVarStatement(node, kind);
          case types._while:
            return this.parseWhileStatement(node);
          case types._with:
            return this.parseWithStatement(node);
          case types.braceL:
            return this.parseBlock(true, node);
          case types.semi:
            return this.parseEmptyStatement(node);
          case types._export:
          case types._import:
            if (this.options.ecmaVersion > 10 && starttype === types._import) {
              skipWhiteSpace.lastIndex = this.pos;
              var skip = skipWhiteSpace.exec(this.input);
              var next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next);
              if (nextCh === 40 || nextCh === 46) {
                return this.parseExpressionStatement(node, this.parseExpression());
              }
            }
            if (!this.options.allowImportExportEverywhere) {
              if (!topLevel) {
                this.raise(this.start, "'import' and 'export' may only appear at the top level");
              }
              if (!this.inModule) {
                this.raise(this.start, "'import' and 'export' may appear only with 'sourceType: module'");
              }
            }
            return starttype === types._import ? this.parseImport(node) : this.parseExport(node, exports3);
          default:
            if (this.isAsyncFunction()) {
              if (context) {
                this.unexpected();
              }
              this.next();
              return this.parseFunctionStatement(node, true, !context);
            }
            var maybeName = this.value, expr = this.parseExpression();
            if (starttype === types.name && expr.type === "Identifier" && this.eat(types.colon)) {
              return this.parseLabeledStatement(node, maybeName, expr, context);
            } else {
              return this.parseExpressionStatement(node, expr);
            }
        }
      };
      pp$1.parseBreakContinueStatement = function(node, keyword) {
        var isBreak = keyword === "break";
        this.next();
        if (this.eat(types.semi) || this.insertSemicolon()) {
          node.label = null;
        } else if (this.type !== types.name) {
          this.unexpected();
        } else {
          node.label = this.parseIdent();
          this.semicolon();
        }
        var i = 0;
        for (; i < this.labels.length; ++i) {
          var lab = this.labels[i];
          if (node.label == null || lab.name === node.label.name) {
            if (lab.kind != null && (isBreak || lab.kind === "loop")) {
              break;
            }
            if (node.label && isBreak) {
              break;
            }
          }
        }
        if (i === this.labels.length) {
          this.raise(node.start, "Unsyntactic " + keyword);
        }
        return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
      };
      pp$1.parseDebuggerStatement = function(node) {
        this.next();
        this.semicolon();
        return this.finishNode(node, "DebuggerStatement");
      };
      pp$1.parseDoStatement = function(node) {
        this.next();
        this.labels.push(loopLabel);
        node.body = this.parseStatement("do");
        this.labels.pop();
        this.expect(types._while);
        node.test = this.parseParenExpression();
        if (this.options.ecmaVersion >= 6) {
          this.eat(types.semi);
        } else {
          this.semicolon();
        }
        return this.finishNode(node, "DoWhileStatement");
      };
      pp$1.parseForStatement = function(node) {
        this.next();
        var awaitAt = this.options.ecmaVersion >= 9 && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction) && this.eatContextual("await") ? this.lastTokStart : -1;
        this.labels.push(loopLabel);
        this.enterScope(0);
        this.expect(types.parenL);
        if (this.type === types.semi) {
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, null);
        }
        var isLet = this.isLet();
        if (this.type === types._var || this.type === types._const || isLet) {
          var init$1 = this.startNode(), kind = isLet ? "let" : this.value;
          this.next();
          this.parseVar(init$1, true, kind);
          this.finishNode(init$1, "VariableDeclaration");
          if ((this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) && init$1.declarations.length === 1) {
            if (this.options.ecmaVersion >= 9) {
              if (this.type === types._in) {
                if (awaitAt > -1) {
                  this.unexpected(awaitAt);
                }
              } else {
                node.await = awaitAt > -1;
              }
            }
            return this.parseForIn(node, init$1);
          }
          if (awaitAt > -1) {
            this.unexpected(awaitAt);
          }
          return this.parseFor(node, init$1);
        }
        var refDestructuringErrors = new DestructuringErrors();
        var init = this.parseExpression(true, refDestructuringErrors);
        if (this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of")) {
          if (this.options.ecmaVersion >= 9) {
            if (this.type === types._in) {
              if (awaitAt > -1) {
                this.unexpected(awaitAt);
              }
            } else {
              node.await = awaitAt > -1;
            }
          }
          this.toAssignable(init, false, refDestructuringErrors);
          this.checkLVal(init);
          return this.parseForIn(node, init);
        } else {
          this.checkExpressionErrors(refDestructuringErrors, true);
        }
        if (awaitAt > -1) {
          this.unexpected(awaitAt);
        }
        return this.parseFor(node, init);
      };
      pp$1.parseFunctionStatement = function(node, isAsync, declarationPosition) {
        this.next();
        return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), false, isAsync);
      };
      pp$1.parseIfStatement = function(node) {
        this.next();
        node.test = this.parseParenExpression();
        node.consequent = this.parseStatement("if");
        node.alternate = this.eat(types._else) ? this.parseStatement("if") : null;
        return this.finishNode(node, "IfStatement");
      };
      pp$1.parseReturnStatement = function(node) {
        if (!this.inFunction && !this.options.allowReturnOutsideFunction) {
          this.raise(this.start, "'return' outside of function");
        }
        this.next();
        if (this.eat(types.semi) || this.insertSemicolon()) {
          node.argument = null;
        } else {
          node.argument = this.parseExpression();
          this.semicolon();
        }
        return this.finishNode(node, "ReturnStatement");
      };
      pp$1.parseSwitchStatement = function(node) {
        this.next();
        node.discriminant = this.parseParenExpression();
        node.cases = [];
        this.expect(types.braceL);
        this.labels.push(switchLabel);
        this.enterScope(0);
        var cur;
        for (var sawDefault = false; this.type !== types.braceR; ) {
          if (this.type === types._case || this.type === types._default) {
            var isCase = this.type === types._case;
            if (cur) {
              this.finishNode(cur, "SwitchCase");
            }
            node.cases.push(cur = this.startNode());
            cur.consequent = [];
            this.next();
            if (isCase) {
              cur.test = this.parseExpression();
            } else {
              if (sawDefault) {
                this.raiseRecoverable(this.lastTokStart, "Multiple default clauses");
              }
              sawDefault = true;
              cur.test = null;
            }
            this.expect(types.colon);
          } else {
            if (!cur) {
              this.unexpected();
            }
            cur.consequent.push(this.parseStatement(null));
          }
        }
        this.exitScope();
        if (cur) {
          this.finishNode(cur, "SwitchCase");
        }
        this.next();
        this.labels.pop();
        return this.finishNode(node, "SwitchStatement");
      };
      pp$1.parseThrowStatement = function(node) {
        this.next();
        if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) {
          this.raise(this.lastTokEnd, "Illegal newline after throw");
        }
        node.argument = this.parseExpression();
        this.semicolon();
        return this.finishNode(node, "ThrowStatement");
      };
      var empty = [];
      pp$1.parseTryStatement = function(node) {
        this.next();
        node.block = this.parseBlock();
        node.handler = null;
        if (this.type === types._catch) {
          var clause = this.startNode();
          this.next();
          if (this.eat(types.parenL)) {
            clause.param = this.parseBindingAtom();
            var simple = clause.param.type === "Identifier";
            this.enterScope(simple ? SCOPE_SIMPLE_CATCH : 0);
            this.checkLVal(clause.param, simple ? BIND_SIMPLE_CATCH : BIND_LEXICAL);
            this.expect(types.parenR);
          } else {
            if (this.options.ecmaVersion < 10) {
              this.unexpected();
            }
            clause.param = null;
            this.enterScope(0);
          }
          clause.body = this.parseBlock(false);
          this.exitScope();
          node.handler = this.finishNode(clause, "CatchClause");
        }
        node.finalizer = this.eat(types._finally) ? this.parseBlock() : null;
        if (!node.handler && !node.finalizer) {
          this.raise(node.start, "Missing catch or finally clause");
        }
        return this.finishNode(node, "TryStatement");
      };
      pp$1.parseVarStatement = function(node, kind) {
        this.next();
        this.parseVar(node, false, kind);
        this.semicolon();
        return this.finishNode(node, "VariableDeclaration");
      };
      pp$1.parseWhileStatement = function(node) {
        this.next();
        node.test = this.parseParenExpression();
        this.labels.push(loopLabel);
        node.body = this.parseStatement("while");
        this.labels.pop();
        return this.finishNode(node, "WhileStatement");
      };
      pp$1.parseWithStatement = function(node) {
        if (this.strict) {
          this.raise(this.start, "'with' in strict mode");
        }
        this.next();
        node.object = this.parseParenExpression();
        node.body = this.parseStatement("with");
        return this.finishNode(node, "WithStatement");
      };
      pp$1.parseEmptyStatement = function(node) {
        this.next();
        return this.finishNode(node, "EmptyStatement");
      };
      pp$1.parseLabeledStatement = function(node, maybeName, expr, context) {
        for (var i$1 = 0, list = this.labels; i$1 < list.length; i$1 += 1) {
          var label = list[i$1];
          if (label.name === maybeName) {
            this.raise(expr.start, "Label '" + maybeName + "' is already declared");
          }
        }
        var kind = this.type.isLoop ? "loop" : this.type === types._switch ? "switch" : null;
        for (var i = this.labels.length - 1; i >= 0; i--) {
          var label$1 = this.labels[i];
          if (label$1.statementStart === node.start) {
            label$1.statementStart = this.start;
            label$1.kind = kind;
          } else {
            break;
          }
        }
        this.labels.push({ name: maybeName, kind, statementStart: this.start });
        node.body = this.parseStatement(context ? context.indexOf("label") === -1 ? context + "label" : context : "label");
        this.labels.pop();
        node.label = expr;
        return this.finishNode(node, "LabeledStatement");
      };
      pp$1.parseExpressionStatement = function(node, expr) {
        node.expression = expr;
        this.semicolon();
        return this.finishNode(node, "ExpressionStatement");
      };
      pp$1.parseBlock = function(createNewLexicalScope, node, exitStrict) {
        if (createNewLexicalScope === void 0)
          createNewLexicalScope = true;
        if (node === void 0)
          node = this.startNode();
        node.body = [];
        this.expect(types.braceL);
        if (createNewLexicalScope) {
          this.enterScope(0);
        }
        while (this.type !== types.braceR) {
          var stmt = this.parseStatement(null);
          node.body.push(stmt);
        }
        if (exitStrict) {
          this.strict = false;
        }
        this.next();
        if (createNewLexicalScope) {
          this.exitScope();
        }
        return this.finishNode(node, "BlockStatement");
      };
      pp$1.parseFor = function(node, init) {
        node.init = init;
        this.expect(types.semi);
        node.test = this.type === types.semi ? null : this.parseExpression();
        this.expect(types.semi);
        node.update = this.type === types.parenR ? null : this.parseExpression();
        this.expect(types.parenR);
        node.body = this.parseStatement("for");
        this.exitScope();
        this.labels.pop();
        return this.finishNode(node, "ForStatement");
      };
      pp$1.parseForIn = function(node, init) {
        var isForIn = this.type === types._in;
        this.next();
        if (init.type === "VariableDeclaration" && init.declarations[0].init != null && (!isForIn || this.options.ecmaVersion < 8 || this.strict || init.kind !== "var" || init.declarations[0].id.type !== "Identifier")) {
          this.raise(init.start, (isForIn ? "for-in" : "for-of") + " loop variable declaration may not have an initializer");
        } else if (init.type === "AssignmentPattern") {
          this.raise(init.start, "Invalid left-hand side in for-loop");
        }
        node.left = init;
        node.right = isForIn ? this.parseExpression() : this.parseMaybeAssign();
        this.expect(types.parenR);
        node.body = this.parseStatement("for");
        this.exitScope();
        this.labels.pop();
        return this.finishNode(node, isForIn ? "ForInStatement" : "ForOfStatement");
      };
      pp$1.parseVar = function(node, isFor, kind) {
        node.declarations = [];
        node.kind = kind;
        for (; ; ) {
          var decl = this.startNode();
          this.parseVarId(decl, kind);
          if (this.eat(types.eq)) {
            decl.init = this.parseMaybeAssign(isFor);
          } else if (kind === "const" && !(this.type === types._in || this.options.ecmaVersion >= 6 && this.isContextual("of"))) {
            this.unexpected();
          } else if (decl.id.type !== "Identifier" && !(isFor && (this.type === types._in || this.isContextual("of")))) {
            this.raise(this.lastTokEnd, "Complex binding patterns require an initialization value");
          } else {
            decl.init = null;
          }
          node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
          if (!this.eat(types.comma)) {
            break;
          }
        }
        return node;
      };
      pp$1.parseVarId = function(decl, kind) {
        decl.id = this.parseBindingAtom();
        this.checkLVal(decl.id, kind === "var" ? BIND_VAR : BIND_LEXICAL, false);
      };
      var FUNC_STATEMENT = 1, FUNC_HANGING_STATEMENT = 2, FUNC_NULLABLE_ID = 4;
      pp$1.parseFunction = function(node, statement, allowExpressionBody, isAsync) {
        this.initFunction(node);
        if (this.options.ecmaVersion >= 9 || this.options.ecmaVersion >= 6 && !isAsync) {
          if (this.type === types.star && statement & FUNC_HANGING_STATEMENT) {
            this.unexpected();
          }
          node.generator = this.eat(types.star);
        }
        if (this.options.ecmaVersion >= 8) {
          node.async = !!isAsync;
        }
        if (statement & FUNC_STATEMENT) {
          node.id = statement & FUNC_NULLABLE_ID && this.type !== types.name ? null : this.parseIdent();
          if (node.id && !(statement & FUNC_HANGING_STATEMENT)) {
            this.checkLVal(node.id, this.strict || node.generator || node.async ? this.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION);
          }
        }
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        this.enterScope(functionFlags(node.async, node.generator));
        if (!(statement & FUNC_STATEMENT)) {
          node.id = this.type === types.name ? this.parseIdent() : null;
        }
        this.parseFunctionParams(node);
        this.parseFunctionBody(node, allowExpressionBody, false);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node, statement & FUNC_STATEMENT ? "FunctionDeclaration" : "FunctionExpression");
      };
      pp$1.parseFunctionParams = function(node) {
        this.expect(types.parenL);
        node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
        this.checkYieldAwaitInDefaultParams();
      };
      pp$1.parseClass = function(node, isStatement) {
        this.next();
        var oldStrict = this.strict;
        this.strict = true;
        this.parseClassId(node, isStatement);
        this.parseClassSuper(node);
        var classBody = this.startNode();
        var hadConstructor = false;
        classBody.body = [];
        this.expect(types.braceL);
        while (this.type !== types.braceR) {
          var element = this.parseClassElement(node.superClass !== null);
          if (element) {
            classBody.body.push(element);
            if (element.type === "MethodDefinition" && element.kind === "constructor") {
              if (hadConstructor) {
                this.raise(element.start, "Duplicate constructor in the same class");
              }
              hadConstructor = true;
            }
          }
        }
        this.strict = oldStrict;
        this.next();
        node.body = this.finishNode(classBody, "ClassBody");
        return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
      };
      pp$1.parseClassElement = function(constructorAllowsSuper) {
        var this$1 = this;
        if (this.eat(types.semi)) {
          return null;
        }
        var method = this.startNode();
        var tryContextual = function(k, noLineBreak) {
          if (noLineBreak === void 0)
            noLineBreak = false;
          var start = this$1.start, startLoc = this$1.startLoc;
          if (!this$1.eatContextual(k)) {
            return false;
          }
          if (this$1.type !== types.parenL && (!noLineBreak || !this$1.canInsertSemicolon())) {
            return true;
          }
          if (method.key) {
            this$1.unexpected();
          }
          method.computed = false;
          method.key = this$1.startNodeAt(start, startLoc);
          method.key.name = k;
          this$1.finishNode(method.key, "Identifier");
          return false;
        };
        method.kind = "method";
        method.static = tryContextual("static");
        var isGenerator = this.eat(types.star);
        var isAsync = false;
        if (!isGenerator) {
          if (this.options.ecmaVersion >= 8 && tryContextual("async", true)) {
            isAsync = true;
            isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
          } else if (tryContextual("get")) {
            method.kind = "get";
          } else if (tryContextual("set")) {
            method.kind = "set";
          }
        }
        if (!method.key) {
          this.parsePropertyName(method);
        }
        var key = method.key;
        var allowsDirectSuper = false;
        if (!method.computed && !method.static && (key.type === "Identifier" && key.name === "constructor" || key.type === "Literal" && key.value === "constructor")) {
          if (method.kind !== "method") {
            this.raise(key.start, "Constructor can't have get/set modifier");
          }
          if (isGenerator) {
            this.raise(key.start, "Constructor can't be a generator");
          }
          if (isAsync) {
            this.raise(key.start, "Constructor can't be an async method");
          }
          method.kind = "constructor";
          allowsDirectSuper = constructorAllowsSuper;
        } else if (method.static && key.type === "Identifier" && key.name === "prototype") {
          this.raise(key.start, "Classes may not have a static property named prototype");
        }
        this.parseClassMethod(method, isGenerator, isAsync, allowsDirectSuper);
        if (method.kind === "get" && method.value.params.length !== 0) {
          this.raiseRecoverable(method.value.start, "getter should have no params");
        }
        if (method.kind === "set" && method.value.params.length !== 1) {
          this.raiseRecoverable(method.value.start, "setter should have exactly one param");
        }
        if (method.kind === "set" && method.value.params[0].type === "RestElement") {
          this.raiseRecoverable(method.value.params[0].start, "Setter cannot use rest params");
        }
        return method;
      };
      pp$1.parseClassMethod = function(method, isGenerator, isAsync, allowsDirectSuper) {
        method.value = this.parseMethod(isGenerator, isAsync, allowsDirectSuper);
        return this.finishNode(method, "MethodDefinition");
      };
      pp$1.parseClassId = function(node, isStatement) {
        if (this.type === types.name) {
          node.id = this.parseIdent();
          if (isStatement) {
            this.checkLVal(node.id, BIND_LEXICAL, false);
          }
        } else {
          if (isStatement === true) {
            this.unexpected();
          }
          node.id = null;
        }
      };
      pp$1.parseClassSuper = function(node) {
        node.superClass = this.eat(types._extends) ? this.parseExprSubscripts() : null;
      };
      pp$1.parseExport = function(node, exports3) {
        this.next();
        if (this.eat(types.star)) {
          if (this.options.ecmaVersion >= 11) {
            if (this.eatContextual("as")) {
              node.exported = this.parseIdent(true);
              this.checkExport(exports3, node.exported.name, this.lastTokStart);
            } else {
              node.exported = null;
            }
          }
          this.expectContextual("from");
          if (this.type !== types.string) {
            this.unexpected();
          }
          node.source = this.parseExprAtom();
          this.semicolon();
          return this.finishNode(node, "ExportAllDeclaration");
        }
        if (this.eat(types._default)) {
          this.checkExport(exports3, "default", this.lastTokStart);
          var isAsync;
          if (this.type === types._function || (isAsync = this.isAsyncFunction())) {
            var fNode = this.startNode();
            this.next();
            if (isAsync) {
              this.next();
            }
            node.declaration = this.parseFunction(fNode, FUNC_STATEMENT | FUNC_NULLABLE_ID, false, isAsync);
          } else if (this.type === types._class) {
            var cNode = this.startNode();
            node.declaration = this.parseClass(cNode, "nullableID");
          } else {
            node.declaration = this.parseMaybeAssign();
            this.semicolon();
          }
          return this.finishNode(node, "ExportDefaultDeclaration");
        }
        if (this.shouldParseExportStatement()) {
          node.declaration = this.parseStatement(null);
          if (node.declaration.type === "VariableDeclaration") {
            this.checkVariableExport(exports3, node.declaration.declarations);
          } else {
            this.checkExport(exports3, node.declaration.id.name, node.declaration.id.start);
          }
          node.specifiers = [];
          node.source = null;
        } else {
          node.declaration = null;
          node.specifiers = this.parseExportSpecifiers(exports3);
          if (this.eatContextual("from")) {
            if (this.type !== types.string) {
              this.unexpected();
            }
            node.source = this.parseExprAtom();
          } else {
            for (var i = 0, list = node.specifiers; i < list.length; i += 1) {
              var spec = list[i];
              this.checkUnreserved(spec.local);
              this.checkLocalExport(spec.local);
            }
            node.source = null;
          }
          this.semicolon();
        }
        return this.finishNode(node, "ExportNamedDeclaration");
      };
      pp$1.checkExport = function(exports3, name, pos) {
        if (!exports3) {
          return;
        }
        if (has(exports3, name)) {
          this.raiseRecoverable(pos, "Duplicate export '" + name + "'");
        }
        exports3[name] = true;
      };
      pp$1.checkPatternExport = function(exports3, pat) {
        var type = pat.type;
        if (type === "Identifier") {
          this.checkExport(exports3, pat.name, pat.start);
        } else if (type === "ObjectPattern") {
          for (var i = 0, list = pat.properties; i < list.length; i += 1) {
            var prop = list[i];
            this.checkPatternExport(exports3, prop);
          }
        } else if (type === "ArrayPattern") {
          for (var i$1 = 0, list$1 = pat.elements; i$1 < list$1.length; i$1 += 1) {
            var elt = list$1[i$1];
            if (elt) {
              this.checkPatternExport(exports3, elt);
            }
          }
        } else if (type === "Property") {
          this.checkPatternExport(exports3, pat.value);
        } else if (type === "AssignmentPattern") {
          this.checkPatternExport(exports3, pat.left);
        } else if (type === "RestElement") {
          this.checkPatternExport(exports3, pat.argument);
        } else if (type === "ParenthesizedExpression") {
          this.checkPatternExport(exports3, pat.expression);
        }
      };
      pp$1.checkVariableExport = function(exports3, decls) {
        if (!exports3) {
          return;
        }
        for (var i = 0, list = decls; i < list.length; i += 1) {
          var decl = list[i];
          this.checkPatternExport(exports3, decl.id);
        }
      };
      pp$1.shouldParseExportStatement = function() {
        return this.type.keyword === "var" || this.type.keyword === "const" || this.type.keyword === "class" || this.type.keyword === "function" || this.isLet() || this.isAsyncFunction();
      };
      pp$1.parseExportSpecifiers = function(exports3) {
        var nodes = [], first = true;
        this.expect(types.braceL);
        while (!this.eat(types.braceR)) {
          if (!first) {
            this.expect(types.comma);
            if (this.afterTrailingComma(types.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          var node = this.startNode();
          node.local = this.parseIdent(true);
          node.exported = this.eatContextual("as") ? this.parseIdent(true) : node.local;
          this.checkExport(exports3, node.exported.name, node.exported.start);
          nodes.push(this.finishNode(node, "ExportSpecifier"));
        }
        return nodes;
      };
      pp$1.parseImport = function(node) {
        this.next();
        if (this.type === types.string) {
          node.specifiers = empty;
          node.source = this.parseExprAtom();
        } else {
          node.specifiers = this.parseImportSpecifiers();
          this.expectContextual("from");
          node.source = this.type === types.string ? this.parseExprAtom() : this.unexpected();
        }
        this.semicolon();
        return this.finishNode(node, "ImportDeclaration");
      };
      pp$1.parseImportSpecifiers = function() {
        var nodes = [], first = true;
        if (this.type === types.name) {
          var node = this.startNode();
          node.local = this.parseIdent();
          this.checkLVal(node.local, BIND_LEXICAL);
          nodes.push(this.finishNode(node, "ImportDefaultSpecifier"));
          if (!this.eat(types.comma)) {
            return nodes;
          }
        }
        if (this.type === types.star) {
          var node$1 = this.startNode();
          this.next();
          this.expectContextual("as");
          node$1.local = this.parseIdent();
          this.checkLVal(node$1.local, BIND_LEXICAL);
          nodes.push(this.finishNode(node$1, "ImportNamespaceSpecifier"));
          return nodes;
        }
        this.expect(types.braceL);
        while (!this.eat(types.braceR)) {
          if (!first) {
            this.expect(types.comma);
            if (this.afterTrailingComma(types.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          var node$2 = this.startNode();
          node$2.imported = this.parseIdent(true);
          if (this.eatContextual("as")) {
            node$2.local = this.parseIdent();
          } else {
            this.checkUnreserved(node$2.imported);
            node$2.local = node$2.imported;
          }
          this.checkLVal(node$2.local, BIND_LEXICAL);
          nodes.push(this.finishNode(node$2, "ImportSpecifier"));
        }
        return nodes;
      };
      pp$1.adaptDirectivePrologue = function(statements) {
        for (var i = 0; i < statements.length && this.isDirectiveCandidate(statements[i]); ++i) {
          statements[i].directive = statements[i].expression.raw.slice(1, -1);
        }
      };
      pp$1.isDirectiveCandidate = function(statement) {
        return statement.type === "ExpressionStatement" && statement.expression.type === "Literal" && typeof statement.expression.value === "string" && (this.input[statement.start] === '"' || this.input[statement.start] === "'");
      };
      var pp$2 = Parser.prototype;
      pp$2.toAssignable = function(node, isBinding, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 6 && node) {
          switch (node.type) {
            case "Identifier":
              if (this.inAsync && node.name === "await") {
                this.raise(node.start, "Cannot use 'await' as identifier inside an async function");
              }
              break;
            case "ObjectPattern":
            case "ArrayPattern":
            case "RestElement":
              break;
            case "ObjectExpression":
              node.type = "ObjectPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              for (var i = 0, list = node.properties; i < list.length; i += 1) {
                var prop = list[i];
                this.toAssignable(prop, isBinding);
                if (prop.type === "RestElement" && (prop.argument.type === "ArrayPattern" || prop.argument.type === "ObjectPattern")) {
                  this.raise(prop.argument.start, "Unexpected token");
                }
              }
              break;
            case "Property":
              if (node.kind !== "init") {
                this.raise(node.key.start, "Object pattern can't contain getter or setter");
              }
              this.toAssignable(node.value, isBinding);
              break;
            case "ArrayExpression":
              node.type = "ArrayPattern";
              if (refDestructuringErrors) {
                this.checkPatternErrors(refDestructuringErrors, true);
              }
              this.toAssignableList(node.elements, isBinding);
              break;
            case "SpreadElement":
              node.type = "RestElement";
              this.toAssignable(node.argument, isBinding);
              if (node.argument.type === "AssignmentPattern") {
                this.raise(node.argument.start, "Rest elements cannot have a default value");
              }
              break;
            case "AssignmentExpression":
              if (node.operator !== "=") {
                this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
              }
              node.type = "AssignmentPattern";
              delete node.operator;
              this.toAssignable(node.left, isBinding);
            case "AssignmentPattern":
              break;
            case "ParenthesizedExpression":
              this.toAssignable(node.expression, isBinding, refDestructuringErrors);
              break;
            case "ChainExpression":
              this.raiseRecoverable(node.start, "Optional chaining cannot appear in left-hand side");
              break;
            case "MemberExpression":
              if (!isBinding) {
                break;
              }
            default:
              this.raise(node.start, "Assigning to rvalue");
          }
        } else if (refDestructuringErrors) {
          this.checkPatternErrors(refDestructuringErrors, true);
        }
        return node;
      };
      pp$2.toAssignableList = function(exprList, isBinding) {
        var end = exprList.length;
        for (var i = 0; i < end; i++) {
          var elt = exprList[i];
          if (elt) {
            this.toAssignable(elt, isBinding);
          }
        }
        if (end) {
          var last = exprList[end - 1];
          if (this.options.ecmaVersion === 6 && isBinding && last && last.type === "RestElement" && last.argument.type !== "Identifier") {
            this.unexpected(last.argument.start);
          }
        }
        return exprList;
      };
      pp$2.parseSpread = function(refDestructuringErrors) {
        var node = this.startNode();
        this.next();
        node.argument = this.parseMaybeAssign(false, refDestructuringErrors);
        return this.finishNode(node, "SpreadElement");
      };
      pp$2.parseRestBinding = function() {
        var node = this.startNode();
        this.next();
        if (this.options.ecmaVersion === 6 && this.type !== types.name) {
          this.unexpected();
        }
        node.argument = this.parseBindingAtom();
        return this.finishNode(node, "RestElement");
      };
      pp$2.parseBindingAtom = function() {
        if (this.options.ecmaVersion >= 6) {
          switch (this.type) {
            case types.bracketL:
              var node = this.startNode();
              this.next();
              node.elements = this.parseBindingList(types.bracketR, true, true);
              return this.finishNode(node, "ArrayPattern");
            case types.braceL:
              return this.parseObj(true);
          }
        }
        return this.parseIdent();
      };
      pp$2.parseBindingList = function(close, allowEmpty, allowTrailingComma) {
        var elts = [], first = true;
        while (!this.eat(close)) {
          if (first) {
            first = false;
          } else {
            this.expect(types.comma);
          }
          if (allowEmpty && this.type === types.comma) {
            elts.push(null);
          } else if (allowTrailingComma && this.afterTrailingComma(close)) {
            break;
          } else if (this.type === types.ellipsis) {
            var rest = this.parseRestBinding();
            this.parseBindingListItem(rest);
            elts.push(rest);
            if (this.type === types.comma) {
              this.raise(this.start, "Comma is not permitted after the rest element");
            }
            this.expect(close);
            break;
          } else {
            var elem = this.parseMaybeDefault(this.start, this.startLoc);
            this.parseBindingListItem(elem);
            elts.push(elem);
          }
        }
        return elts;
      };
      pp$2.parseBindingListItem = function(param) {
        return param;
      };
      pp$2.parseMaybeDefault = function(startPos, startLoc, left) {
        left = left || this.parseBindingAtom();
        if (this.options.ecmaVersion < 6 || !this.eat(types.eq)) {
          return left;
        }
        var node = this.startNodeAt(startPos, startLoc);
        node.left = left;
        node.right = this.parseMaybeAssign();
        return this.finishNode(node, "AssignmentPattern");
      };
      pp$2.checkLVal = function(expr, bindingType, checkClashes) {
        if (bindingType === void 0)
          bindingType = BIND_NONE;
        switch (expr.type) {
          case "Identifier":
            if (bindingType === BIND_LEXICAL && expr.name === "let") {
              this.raiseRecoverable(expr.start, "let is disallowed as a lexically bound name");
            }
            if (this.strict && this.reservedWordsStrictBind.test(expr.name)) {
              this.raiseRecoverable(expr.start, (bindingType ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
            }
            if (checkClashes) {
              if (has(checkClashes, expr.name)) {
                this.raiseRecoverable(expr.start, "Argument name clash");
              }
              checkClashes[expr.name] = true;
            }
            if (bindingType !== BIND_NONE && bindingType !== BIND_OUTSIDE) {
              this.declareName(expr.name, bindingType, expr.start);
            }
            break;
          case "ChainExpression":
            this.raiseRecoverable(expr.start, "Optional chaining cannot appear in left-hand side");
            break;
          case "MemberExpression":
            if (bindingType) {
              this.raiseRecoverable(expr.start, "Binding member expression");
            }
            break;
          case "ObjectPattern":
            for (var i = 0, list = expr.properties; i < list.length; i += 1) {
              var prop = list[i];
              this.checkLVal(prop, bindingType, checkClashes);
            }
            break;
          case "Property":
            this.checkLVal(expr.value, bindingType, checkClashes);
            break;
          case "ArrayPattern":
            for (var i$1 = 0, list$1 = expr.elements; i$1 < list$1.length; i$1 += 1) {
              var elem = list$1[i$1];
              if (elem) {
                this.checkLVal(elem, bindingType, checkClashes);
              }
            }
            break;
          case "AssignmentPattern":
            this.checkLVal(expr.left, bindingType, checkClashes);
            break;
          case "RestElement":
            this.checkLVal(expr.argument, bindingType, checkClashes);
            break;
          case "ParenthesizedExpression":
            this.checkLVal(expr.expression, bindingType, checkClashes);
            break;
          default:
            this.raise(expr.start, (bindingType ? "Binding" : "Assigning to") + " rvalue");
        }
      };
      var pp$3 = Parser.prototype;
      pp$3.checkPropClash = function(prop, propHash, refDestructuringErrors) {
        if (this.options.ecmaVersion >= 9 && prop.type === "SpreadElement") {
          return;
        }
        if (this.options.ecmaVersion >= 6 && (prop.computed || prop.method || prop.shorthand)) {
          return;
        }
        var key = prop.key;
        var name;
        switch (key.type) {
          case "Identifier":
            name = key.name;
            break;
          case "Literal":
            name = String(key.value);
            break;
          default:
            return;
        }
        var kind = prop.kind;
        if (this.options.ecmaVersion >= 6) {
          if (name === "__proto__" && kind === "init") {
            if (propHash.proto) {
              if (refDestructuringErrors) {
                if (refDestructuringErrors.doubleProto < 0) {
                  refDestructuringErrors.doubleProto = key.start;
                }
              } else {
                this.raiseRecoverable(key.start, "Redefinition of __proto__ property");
              }
            }
            propHash.proto = true;
          }
          return;
        }
        name = "$" + name;
        var other = propHash[name];
        if (other) {
          var redefinition;
          if (kind === "init") {
            redefinition = this.strict && other.init || other.get || other.set;
          } else {
            redefinition = other.init || other[kind];
          }
          if (redefinition) {
            this.raiseRecoverable(key.start, "Redefinition of property");
          }
        } else {
          other = propHash[name] = {
            init: false,
            get: false,
            set: false
          };
        }
        other[kind] = true;
      };
      pp$3.parseExpression = function(noIn, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseMaybeAssign(noIn, refDestructuringErrors);
        if (this.type === types.comma) {
          var node = this.startNodeAt(startPos, startLoc);
          node.expressions = [expr];
          while (this.eat(types.comma)) {
            node.expressions.push(this.parseMaybeAssign(noIn, refDestructuringErrors));
          }
          return this.finishNode(node, "SequenceExpression");
        }
        return expr;
      };
      pp$3.parseMaybeAssign = function(noIn, refDestructuringErrors, afterLeftParse) {
        if (this.isContextual("yield")) {
          if (this.inGenerator) {
            return this.parseYield(noIn);
          } else {
            this.exprAllowed = false;
          }
        }
        var ownDestructuringErrors = false, oldParenAssign = -1, oldTrailingComma = -1;
        if (refDestructuringErrors) {
          oldParenAssign = refDestructuringErrors.parenthesizedAssign;
          oldTrailingComma = refDestructuringErrors.trailingComma;
          refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = -1;
        } else {
          refDestructuringErrors = new DestructuringErrors();
          ownDestructuringErrors = true;
        }
        var startPos = this.start, startLoc = this.startLoc;
        if (this.type === types.parenL || this.type === types.name) {
          this.potentialArrowAt = this.start;
        }
        var left = this.parseMaybeConditional(noIn, refDestructuringErrors);
        if (afterLeftParse) {
          left = afterLeftParse.call(this, left, startPos, startLoc);
        }
        if (this.type.isAssign) {
          var node = this.startNodeAt(startPos, startLoc);
          node.operator = this.value;
          node.left = this.type === types.eq ? this.toAssignable(left, false, refDestructuringErrors) : left;
          if (!ownDestructuringErrors) {
            refDestructuringErrors.parenthesizedAssign = refDestructuringErrors.trailingComma = refDestructuringErrors.doubleProto = -1;
          }
          if (refDestructuringErrors.shorthandAssign >= node.left.start) {
            refDestructuringErrors.shorthandAssign = -1;
          }
          this.checkLVal(left);
          this.next();
          node.right = this.parseMaybeAssign(noIn);
          return this.finishNode(node, "AssignmentExpression");
        } else {
          if (ownDestructuringErrors) {
            this.checkExpressionErrors(refDestructuringErrors, true);
          }
        }
        if (oldParenAssign > -1) {
          refDestructuringErrors.parenthesizedAssign = oldParenAssign;
        }
        if (oldTrailingComma > -1) {
          refDestructuringErrors.trailingComma = oldTrailingComma;
        }
        return left;
      };
      pp$3.parseMaybeConditional = function(noIn, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseExprOps(noIn, refDestructuringErrors);
        if (this.checkExpressionErrors(refDestructuringErrors)) {
          return expr;
        }
        if (this.eat(types.question)) {
          var node = this.startNodeAt(startPos, startLoc);
          node.test = expr;
          node.consequent = this.parseMaybeAssign();
          this.expect(types.colon);
          node.alternate = this.parseMaybeAssign(noIn);
          return this.finishNode(node, "ConditionalExpression");
        }
        return expr;
      };
      pp$3.parseExprOps = function(noIn, refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseMaybeUnary(refDestructuringErrors, false);
        if (this.checkExpressionErrors(refDestructuringErrors)) {
          return expr;
        }
        return expr.start === startPos && expr.type === "ArrowFunctionExpression" ? expr : this.parseExprOp(expr, startPos, startLoc, -1, noIn);
      };
      pp$3.parseExprOp = function(left, leftStartPos, leftStartLoc, minPrec, noIn) {
        var prec = this.type.binop;
        if (prec != null && (!noIn || this.type !== types._in)) {
          if (prec > minPrec) {
            var logical = this.type === types.logicalOR || this.type === types.logicalAND;
            var coalesce = this.type === types.coalesce;
            if (coalesce) {
              prec = types.logicalAND.binop;
            }
            var op = this.value;
            this.next();
            var startPos = this.start, startLoc = this.startLoc;
            var right = this.parseExprOp(this.parseMaybeUnary(null, false), startPos, startLoc, prec, noIn);
            var node = this.buildBinary(leftStartPos, leftStartLoc, left, right, op, logical || coalesce);
            if (logical && this.type === types.coalesce || coalesce && (this.type === types.logicalOR || this.type === types.logicalAND)) {
              this.raiseRecoverable(this.start, "Logical expressions and coalesce expressions cannot be mixed. Wrap either by parentheses");
            }
            return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
          }
        }
        return left;
      };
      pp$3.buildBinary = function(startPos, startLoc, left, right, op, logical) {
        var node = this.startNodeAt(startPos, startLoc);
        node.left = left;
        node.operator = op;
        node.right = right;
        return this.finishNode(node, logical ? "LogicalExpression" : "BinaryExpression");
      };
      pp$3.parseMaybeUnary = function(refDestructuringErrors, sawUnary) {
        var startPos = this.start, startLoc = this.startLoc, expr;
        if (this.isContextual("await") && (this.inAsync || !this.inFunction && this.options.allowAwaitOutsideFunction)) {
          expr = this.parseAwait();
          sawUnary = true;
        } else if (this.type.prefix) {
          var node = this.startNode(), update = this.type === types.incDec;
          node.operator = this.value;
          node.prefix = true;
          this.next();
          node.argument = this.parseMaybeUnary(null, true);
          this.checkExpressionErrors(refDestructuringErrors, true);
          if (update) {
            this.checkLVal(node.argument);
          } else if (this.strict && node.operator === "delete" && node.argument.type === "Identifier") {
            this.raiseRecoverable(node.start, "Deleting local variable in strict mode");
          } else {
            sawUnary = true;
          }
          expr = this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
        } else {
          expr = this.parseExprSubscripts(refDestructuringErrors);
          if (this.checkExpressionErrors(refDestructuringErrors)) {
            return expr;
          }
          while (this.type.postfix && !this.canInsertSemicolon()) {
            var node$1 = this.startNodeAt(startPos, startLoc);
            node$1.operator = this.value;
            node$1.prefix = false;
            node$1.argument = expr;
            this.checkLVal(expr);
            this.next();
            expr = this.finishNode(node$1, "UpdateExpression");
          }
        }
        if (!sawUnary && this.eat(types.starstar)) {
          return this.buildBinary(startPos, startLoc, expr, this.parseMaybeUnary(null, false), "**", false);
        } else {
          return expr;
        }
      };
      pp$3.parseExprSubscripts = function(refDestructuringErrors) {
        var startPos = this.start, startLoc = this.startLoc;
        var expr = this.parseExprAtom(refDestructuringErrors);
        if (expr.type === "ArrowFunctionExpression" && this.input.slice(this.lastTokStart, this.lastTokEnd) !== ")") {
          return expr;
        }
        var result = this.parseSubscripts(expr, startPos, startLoc);
        if (refDestructuringErrors && result.type === "MemberExpression") {
          if (refDestructuringErrors.parenthesizedAssign >= result.start) {
            refDestructuringErrors.parenthesizedAssign = -1;
          }
          if (refDestructuringErrors.parenthesizedBind >= result.start) {
            refDestructuringErrors.parenthesizedBind = -1;
          }
        }
        return result;
      };
      pp$3.parseSubscripts = function(base, startPos, startLoc, noCalls) {
        var maybeAsyncArrow = this.options.ecmaVersion >= 8 && base.type === "Identifier" && base.name === "async" && this.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && this.potentialArrowAt === base.start;
        var optionalChained = false;
        while (true) {
          var element = this.parseSubscript(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained);
          if (element.optional) {
            optionalChained = true;
          }
          if (element === base || element.type === "ArrowFunctionExpression") {
            if (optionalChained) {
              var chainNode = this.startNodeAt(startPos, startLoc);
              chainNode.expression = element;
              element = this.finishNode(chainNode, "ChainExpression");
            }
            return element;
          }
          base = element;
        }
      };
      pp$3.parseSubscript = function(base, startPos, startLoc, noCalls, maybeAsyncArrow, optionalChained) {
        var optionalSupported = this.options.ecmaVersion >= 11;
        var optional = optionalSupported && this.eat(types.questionDot);
        if (noCalls && optional) {
          this.raise(this.lastTokStart, "Optional chaining cannot appear in the callee of new expressions");
        }
        var computed = this.eat(types.bracketL);
        if (computed || optional && this.type !== types.parenL && this.type !== types.backQuote || this.eat(types.dot)) {
          var node = this.startNodeAt(startPos, startLoc);
          node.object = base;
          node.property = computed ? this.parseExpression() : this.parseIdent(this.options.allowReserved !== "never");
          node.computed = !!computed;
          if (computed) {
            this.expect(types.bracketR);
          }
          if (optionalSupported) {
            node.optional = optional;
          }
          base = this.finishNode(node, "MemberExpression");
        } else if (!noCalls && this.eat(types.parenL)) {
          var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
          this.yieldPos = 0;
          this.awaitPos = 0;
          this.awaitIdentPos = 0;
          var exprList = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false, refDestructuringErrors);
          if (maybeAsyncArrow && !optional && !this.canInsertSemicolon() && this.eat(types.arrow)) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            if (this.awaitIdentPos > 0) {
              this.raise(this.awaitIdentPos, "Cannot use 'await' as identifier inside an async function");
            }
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            this.awaitIdentPos = oldAwaitIdentPos;
            return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, true);
          }
          this.checkExpressionErrors(refDestructuringErrors, true);
          this.yieldPos = oldYieldPos || this.yieldPos;
          this.awaitPos = oldAwaitPos || this.awaitPos;
          this.awaitIdentPos = oldAwaitIdentPos || this.awaitIdentPos;
          var node$1 = this.startNodeAt(startPos, startLoc);
          node$1.callee = base;
          node$1.arguments = exprList;
          if (optionalSupported) {
            node$1.optional = optional;
          }
          base = this.finishNode(node$1, "CallExpression");
        } else if (this.type === types.backQuote) {
          if (optional || optionalChained) {
            this.raise(this.start, "Optional chaining cannot appear in the tag of tagged template expressions");
          }
          var node$2 = this.startNodeAt(startPos, startLoc);
          node$2.tag = base;
          node$2.quasi = this.parseTemplate({ isTagged: true });
          base = this.finishNode(node$2, "TaggedTemplateExpression");
        }
        return base;
      };
      pp$3.parseExprAtom = function(refDestructuringErrors) {
        if (this.type === types.slash) {
          this.readRegexp();
        }
        var node, canBeArrow = this.potentialArrowAt === this.start;
        switch (this.type) {
          case types._super:
            if (!this.allowSuper) {
              this.raise(this.start, "'super' keyword outside a method");
            }
            node = this.startNode();
            this.next();
            if (this.type === types.parenL && !this.allowDirectSuper) {
              this.raise(node.start, "super() call outside constructor of a subclass");
            }
            if (this.type !== types.dot && this.type !== types.bracketL && this.type !== types.parenL) {
              this.unexpected();
            }
            return this.finishNode(node, "Super");
          case types._this:
            node = this.startNode();
            this.next();
            return this.finishNode(node, "ThisExpression");
          case types.name:
            var startPos = this.start, startLoc = this.startLoc, containsEsc = this.containsEsc;
            var id = this.parseIdent(false);
            if (this.options.ecmaVersion >= 8 && !containsEsc && id.name === "async" && !this.canInsertSemicolon() && this.eat(types._function)) {
              return this.parseFunction(this.startNodeAt(startPos, startLoc), 0, false, true);
            }
            if (canBeArrow && !this.canInsertSemicolon()) {
              if (this.eat(types.arrow)) {
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], false);
              }
              if (this.options.ecmaVersion >= 8 && id.name === "async" && this.type === types.name && !containsEsc) {
                id = this.parseIdent(false);
                if (this.canInsertSemicolon() || !this.eat(types.arrow)) {
                  this.unexpected();
                }
                return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), [id], true);
              }
            }
            return id;
          case types.regexp:
            var value = this.value;
            node = this.parseLiteral(value.value);
            node.regex = { pattern: value.pattern, flags: value.flags };
            return node;
          case types.num:
          case types.string:
            return this.parseLiteral(this.value);
          case types._null:
          case types._true:
          case types._false:
            node = this.startNode();
            node.value = this.type === types._null ? null : this.type === types._true;
            node.raw = this.type.keyword;
            this.next();
            return this.finishNode(node, "Literal");
          case types.parenL:
            var start = this.start, expr = this.parseParenAndDistinguishExpression(canBeArrow);
            if (refDestructuringErrors) {
              if (refDestructuringErrors.parenthesizedAssign < 0 && !this.isSimpleAssignTarget(expr)) {
                refDestructuringErrors.parenthesizedAssign = start;
              }
              if (refDestructuringErrors.parenthesizedBind < 0) {
                refDestructuringErrors.parenthesizedBind = start;
              }
            }
            return expr;
          case types.bracketL:
            node = this.startNode();
            this.next();
            node.elements = this.parseExprList(types.bracketR, true, true, refDestructuringErrors);
            return this.finishNode(node, "ArrayExpression");
          case types.braceL:
            return this.parseObj(false, refDestructuringErrors);
          case types._function:
            node = this.startNode();
            this.next();
            return this.parseFunction(node, 0);
          case types._class:
            return this.parseClass(this.startNode(), false);
          case types._new:
            return this.parseNew();
          case types.backQuote:
            return this.parseTemplate();
          case types._import:
            if (this.options.ecmaVersion >= 11) {
              return this.parseExprImport();
            } else {
              return this.unexpected();
            }
          default:
            this.unexpected();
        }
      };
      pp$3.parseExprImport = function() {
        var node = this.startNode();
        if (this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword import");
        }
        var meta = this.parseIdent(true);
        switch (this.type) {
          case types.parenL:
            return this.parseDynamicImport(node);
          case types.dot:
            node.meta = meta;
            return this.parseImportMeta(node);
          default:
            this.unexpected();
        }
      };
      pp$3.parseDynamicImport = function(node) {
        this.next();
        node.source = this.parseMaybeAssign();
        if (!this.eat(types.parenR)) {
          var errorPos = this.start;
          if (this.eat(types.comma) && this.eat(types.parenR)) {
            this.raiseRecoverable(errorPos, "Trailing comma is not allowed in import()");
          } else {
            this.unexpected(errorPos);
          }
        }
        return this.finishNode(node, "ImportExpression");
      };
      pp$3.parseImportMeta = function(node) {
        this.next();
        var containsEsc = this.containsEsc;
        node.property = this.parseIdent(true);
        if (node.property.name !== "meta") {
          this.raiseRecoverable(node.property.start, "The only valid meta property for import is 'import.meta'");
        }
        if (containsEsc) {
          this.raiseRecoverable(node.start, "'import.meta' must not contain escaped characters");
        }
        if (this.options.sourceType !== "module") {
          this.raiseRecoverable(node.start, "Cannot use 'import.meta' outside a module");
        }
        return this.finishNode(node, "MetaProperty");
      };
      pp$3.parseLiteral = function(value) {
        var node = this.startNode();
        node.value = value;
        node.raw = this.input.slice(this.start, this.end);
        if (node.raw.charCodeAt(node.raw.length - 1) === 110) {
          node.bigint = node.raw.slice(0, -1).replace(/_/g, "");
        }
        this.next();
        return this.finishNode(node, "Literal");
      };
      pp$3.parseParenExpression = function() {
        this.expect(types.parenL);
        var val = this.parseExpression();
        this.expect(types.parenR);
        return val;
      };
      pp$3.parseParenAndDistinguishExpression = function(canBeArrow) {
        var startPos = this.start, startLoc = this.startLoc, val, allowTrailingComma = this.options.ecmaVersion >= 8;
        if (this.options.ecmaVersion >= 6) {
          this.next();
          var innerStartPos = this.start, innerStartLoc = this.startLoc;
          var exprList = [], first = true, lastIsComma = false;
          var refDestructuringErrors = new DestructuringErrors(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, spreadStart;
          this.yieldPos = 0;
          this.awaitPos = 0;
          while (this.type !== types.parenR) {
            first ? first = false : this.expect(types.comma);
            if (allowTrailingComma && this.afterTrailingComma(types.parenR, true)) {
              lastIsComma = true;
              break;
            } else if (this.type === types.ellipsis) {
              spreadStart = this.start;
              exprList.push(this.parseParenItem(this.parseRestBinding()));
              if (this.type === types.comma) {
                this.raise(this.start, "Comma is not permitted after the rest element");
              }
              break;
            } else {
              exprList.push(this.parseMaybeAssign(false, refDestructuringErrors, this.parseParenItem));
            }
          }
          var innerEndPos = this.start, innerEndLoc = this.startLoc;
          this.expect(types.parenR);
          if (canBeArrow && !this.canInsertSemicolon() && this.eat(types.arrow)) {
            this.checkPatternErrors(refDestructuringErrors, false);
            this.checkYieldAwaitInDefaultParams();
            this.yieldPos = oldYieldPos;
            this.awaitPos = oldAwaitPos;
            return this.parseParenArrowList(startPos, startLoc, exprList);
          }
          if (!exprList.length || lastIsComma) {
            this.unexpected(this.lastTokStart);
          }
          if (spreadStart) {
            this.unexpected(spreadStart);
          }
          this.checkExpressionErrors(refDestructuringErrors, true);
          this.yieldPos = oldYieldPos || this.yieldPos;
          this.awaitPos = oldAwaitPos || this.awaitPos;
          if (exprList.length > 1) {
            val = this.startNodeAt(innerStartPos, innerStartLoc);
            val.expressions = exprList;
            this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
          } else {
            val = exprList[0];
          }
        } else {
          val = this.parseParenExpression();
        }
        if (this.options.preserveParens) {
          var par = this.startNodeAt(startPos, startLoc);
          par.expression = val;
          return this.finishNode(par, "ParenthesizedExpression");
        } else {
          return val;
        }
      };
      pp$3.parseParenItem = function(item) {
        return item;
      };
      pp$3.parseParenArrowList = function(startPos, startLoc, exprList) {
        return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList);
      };
      var empty$1 = [];
      pp$3.parseNew = function() {
        if (this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword new");
        }
        var node = this.startNode();
        var meta = this.parseIdent(true);
        if (this.options.ecmaVersion >= 6 && this.eat(types.dot)) {
          node.meta = meta;
          var containsEsc = this.containsEsc;
          node.property = this.parseIdent(true);
          if (node.property.name !== "target") {
            this.raiseRecoverable(node.property.start, "The only valid meta property for new is 'new.target'");
          }
          if (containsEsc) {
            this.raiseRecoverable(node.start, "'new.target' must not contain escaped characters");
          }
          if (!this.inNonArrowFunction()) {
            this.raiseRecoverable(node.start, "'new.target' can only be used in functions");
          }
          return this.finishNode(node, "MetaProperty");
        }
        var startPos = this.start, startLoc = this.startLoc, isImport = this.type === types._import;
        node.callee = this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
        if (isImport && node.callee.type === "ImportExpression") {
          this.raise(startPos, "Cannot use new with import()");
        }
        if (this.eat(types.parenL)) {
          node.arguments = this.parseExprList(types.parenR, this.options.ecmaVersion >= 8, false);
        } else {
          node.arguments = empty$1;
        }
        return this.finishNode(node, "NewExpression");
      };
      pp$3.parseTemplateElement = function(ref2) {
        var isTagged = ref2.isTagged;
        var elem = this.startNode();
        if (this.type === types.invalidTemplate) {
          if (!isTagged) {
            this.raiseRecoverable(this.start, "Bad escape sequence in untagged template literal");
          }
          elem.value = {
            raw: this.value,
            cooked: null
          };
        } else {
          elem.value = {
            raw: this.input.slice(this.start, this.end).replace(/\r\n?/g, "\n"),
            cooked: this.value
          };
        }
        this.next();
        elem.tail = this.type === types.backQuote;
        return this.finishNode(elem, "TemplateElement");
      };
      pp$3.parseTemplate = function(ref2) {
        if (ref2 === void 0)
          ref2 = {};
        var isTagged = ref2.isTagged;
        if (isTagged === void 0)
          isTagged = false;
        var node = this.startNode();
        this.next();
        node.expressions = [];
        var curElt = this.parseTemplateElement({ isTagged });
        node.quasis = [curElt];
        while (!curElt.tail) {
          if (this.type === types.eof) {
            this.raise(this.pos, "Unterminated template literal");
          }
          this.expect(types.dollarBraceL);
          node.expressions.push(this.parseExpression());
          this.expect(types.braceR);
          node.quasis.push(curElt = this.parseTemplateElement({ isTagged }));
        }
        this.next();
        return this.finishNode(node, "TemplateLiteral");
      };
      pp$3.isAsyncProp = function(prop) {
        return !prop.computed && prop.key.type === "Identifier" && prop.key.name === "async" && (this.type === types.name || this.type === types.num || this.type === types.string || this.type === types.bracketL || this.type.keyword || this.options.ecmaVersion >= 9 && this.type === types.star) && !lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
      };
      pp$3.parseObj = function(isPattern, refDestructuringErrors) {
        var node = this.startNode(), first = true, propHash = {};
        node.properties = [];
        this.next();
        while (!this.eat(types.braceR)) {
          if (!first) {
            this.expect(types.comma);
            if (this.options.ecmaVersion >= 5 && this.afterTrailingComma(types.braceR)) {
              break;
            }
          } else {
            first = false;
          }
          var prop = this.parseProperty(isPattern, refDestructuringErrors);
          if (!isPattern) {
            this.checkPropClash(prop, propHash, refDestructuringErrors);
          }
          node.properties.push(prop);
        }
        return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
      };
      pp$3.parseProperty = function(isPattern, refDestructuringErrors) {
        var prop = this.startNode(), isGenerator, isAsync, startPos, startLoc;
        if (this.options.ecmaVersion >= 9 && this.eat(types.ellipsis)) {
          if (isPattern) {
            prop.argument = this.parseIdent(false);
            if (this.type === types.comma) {
              this.raise(this.start, "Comma is not permitted after the rest element");
            }
            return this.finishNode(prop, "RestElement");
          }
          if (this.type === types.parenL && refDestructuringErrors) {
            if (refDestructuringErrors.parenthesizedAssign < 0) {
              refDestructuringErrors.parenthesizedAssign = this.start;
            }
            if (refDestructuringErrors.parenthesizedBind < 0) {
              refDestructuringErrors.parenthesizedBind = this.start;
            }
          }
          prop.argument = this.parseMaybeAssign(false, refDestructuringErrors);
          if (this.type === types.comma && refDestructuringErrors && refDestructuringErrors.trailingComma < 0) {
            refDestructuringErrors.trailingComma = this.start;
          }
          return this.finishNode(prop, "SpreadElement");
        }
        if (this.options.ecmaVersion >= 6) {
          prop.method = false;
          prop.shorthand = false;
          if (isPattern || refDestructuringErrors) {
            startPos = this.start;
            startLoc = this.startLoc;
          }
          if (!isPattern) {
            isGenerator = this.eat(types.star);
          }
        }
        var containsEsc = this.containsEsc;
        this.parsePropertyName(prop);
        if (!isPattern && !containsEsc && this.options.ecmaVersion >= 8 && !isGenerator && this.isAsyncProp(prop)) {
          isAsync = true;
          isGenerator = this.options.ecmaVersion >= 9 && this.eat(types.star);
          this.parsePropertyName(prop, refDestructuringErrors);
        } else {
          isAsync = false;
        }
        this.parsePropertyValue(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc);
        return this.finishNode(prop, "Property");
      };
      pp$3.parsePropertyValue = function(prop, isPattern, isGenerator, isAsync, startPos, startLoc, refDestructuringErrors, containsEsc) {
        if ((isGenerator || isAsync) && this.type === types.colon) {
          this.unexpected();
        }
        if (this.eat(types.colon)) {
          prop.value = isPattern ? this.parseMaybeDefault(this.start, this.startLoc) : this.parseMaybeAssign(false, refDestructuringErrors);
          prop.kind = "init";
        } else if (this.options.ecmaVersion >= 6 && this.type === types.parenL) {
          if (isPattern) {
            this.unexpected();
          }
          prop.kind = "init";
          prop.method = true;
          prop.value = this.parseMethod(isGenerator, isAsync);
        } else if (!isPattern && !containsEsc && this.options.ecmaVersion >= 5 && !prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && (this.type !== types.comma && this.type !== types.braceR && this.type !== types.eq)) {
          if (isGenerator || isAsync) {
            this.unexpected();
          }
          prop.kind = prop.key.name;
          this.parsePropertyName(prop);
          prop.value = this.parseMethod(false);
          var paramCount = prop.kind === "get" ? 0 : 1;
          if (prop.value.params.length !== paramCount) {
            var start = prop.value.start;
            if (prop.kind === "get") {
              this.raiseRecoverable(start, "getter should have no params");
            } else {
              this.raiseRecoverable(start, "setter should have exactly one param");
            }
          } else {
            if (prop.kind === "set" && prop.value.params[0].type === "RestElement") {
              this.raiseRecoverable(prop.value.params[0].start, "Setter cannot use rest params");
            }
          }
        } else if (this.options.ecmaVersion >= 6 && !prop.computed && prop.key.type === "Identifier") {
          if (isGenerator || isAsync) {
            this.unexpected();
          }
          this.checkUnreserved(prop.key);
          if (prop.key.name === "await" && !this.awaitIdentPos) {
            this.awaitIdentPos = startPos;
          }
          prop.kind = "init";
          if (isPattern) {
            prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
          } else if (this.type === types.eq && refDestructuringErrors) {
            if (refDestructuringErrors.shorthandAssign < 0) {
              refDestructuringErrors.shorthandAssign = this.start;
            }
            prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key);
          } else {
            prop.value = prop.key;
          }
          prop.shorthand = true;
        } else {
          this.unexpected();
        }
      };
      pp$3.parsePropertyName = function(prop) {
        if (this.options.ecmaVersion >= 6) {
          if (this.eat(types.bracketL)) {
            prop.computed = true;
            prop.key = this.parseMaybeAssign();
            this.expect(types.bracketR);
            return prop.key;
          } else {
            prop.computed = false;
          }
        }
        return prop.key = this.type === types.num || this.type === types.string ? this.parseExprAtom() : this.parseIdent(this.options.allowReserved !== "never");
      };
      pp$3.initFunction = function(node) {
        node.id = null;
        if (this.options.ecmaVersion >= 6) {
          node.generator = node.expression = false;
        }
        if (this.options.ecmaVersion >= 8) {
          node.async = false;
        }
      };
      pp$3.parseMethod = function(isGenerator, isAsync, allowDirectSuper) {
        var node = this.startNode(), oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.initFunction(node);
        if (this.options.ecmaVersion >= 6) {
          node.generator = isGenerator;
        }
        if (this.options.ecmaVersion >= 8) {
          node.async = !!isAsync;
        }
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        this.enterScope(functionFlags(isAsync, node.generator) | SCOPE_SUPER | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));
        this.expect(types.parenL);
        node.params = this.parseBindingList(types.parenR, false, this.options.ecmaVersion >= 8);
        this.checkYieldAwaitInDefaultParams();
        this.parseFunctionBody(node, false, true);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node, "FunctionExpression");
      };
      pp$3.parseArrowExpression = function(node, params, isAsync) {
        var oldYieldPos = this.yieldPos, oldAwaitPos = this.awaitPos, oldAwaitIdentPos = this.awaitIdentPos;
        this.enterScope(functionFlags(isAsync, false) | SCOPE_ARROW);
        this.initFunction(node);
        if (this.options.ecmaVersion >= 8) {
          node.async = !!isAsync;
        }
        this.yieldPos = 0;
        this.awaitPos = 0;
        this.awaitIdentPos = 0;
        node.params = this.toAssignableList(params, true);
        this.parseFunctionBody(node, true, false);
        this.yieldPos = oldYieldPos;
        this.awaitPos = oldAwaitPos;
        this.awaitIdentPos = oldAwaitIdentPos;
        return this.finishNode(node, "ArrowFunctionExpression");
      };
      pp$3.parseFunctionBody = function(node, isArrowFunction, isMethod) {
        var isExpression = isArrowFunction && this.type !== types.braceL;
        var oldStrict = this.strict, useStrict = false;
        if (isExpression) {
          node.body = this.parseMaybeAssign();
          node.expression = true;
          this.checkParams(node, false);
        } else {
          var nonSimple = this.options.ecmaVersion >= 7 && !this.isSimpleParamList(node.params);
          if (!oldStrict || nonSimple) {
            useStrict = this.strictDirective(this.end);
            if (useStrict && nonSimple) {
              this.raiseRecoverable(node.start, "Illegal 'use strict' directive in function with non-simple parameter list");
            }
          }
          var oldLabels = this.labels;
          this.labels = [];
          if (useStrict) {
            this.strict = true;
          }
          this.checkParams(node, !oldStrict && !useStrict && !isArrowFunction && !isMethod && this.isSimpleParamList(node.params));
          if (this.strict && node.id) {
            this.checkLVal(node.id, BIND_OUTSIDE);
          }
          node.body = this.parseBlock(false, void 0, useStrict && !oldStrict);
          node.expression = false;
          this.adaptDirectivePrologue(node.body.body);
          this.labels = oldLabels;
        }
        this.exitScope();
      };
      pp$3.isSimpleParamList = function(params) {
        for (var i = 0, list = params; i < list.length; i += 1) {
          var param = list[i];
          if (param.type !== "Identifier") {
            return false;
          }
        }
        return true;
      };
      pp$3.checkParams = function(node, allowDuplicates) {
        var nameHash = {};
        for (var i = 0, list = node.params; i < list.length; i += 1) {
          var param = list[i];
          this.checkLVal(param, BIND_VAR, allowDuplicates ? null : nameHash);
        }
      };
      pp$3.parseExprList = function(close, allowTrailingComma, allowEmpty, refDestructuringErrors) {
        var elts = [], first = true;
        while (!this.eat(close)) {
          if (!first) {
            this.expect(types.comma);
            if (allowTrailingComma && this.afterTrailingComma(close)) {
              break;
            }
          } else {
            first = false;
          }
          var elt = void 0;
          if (allowEmpty && this.type === types.comma) {
            elt = null;
          } else if (this.type === types.ellipsis) {
            elt = this.parseSpread(refDestructuringErrors);
            if (refDestructuringErrors && this.type === types.comma && refDestructuringErrors.trailingComma < 0) {
              refDestructuringErrors.trailingComma = this.start;
            }
          } else {
            elt = this.parseMaybeAssign(false, refDestructuringErrors);
          }
          elts.push(elt);
        }
        return elts;
      };
      pp$3.checkUnreserved = function(ref2) {
        var start = ref2.start;
        var end = ref2.end;
        var name = ref2.name;
        if (this.inGenerator && name === "yield") {
          this.raiseRecoverable(start, "Cannot use 'yield' as identifier inside a generator");
        }
        if (this.inAsync && name === "await") {
          this.raiseRecoverable(start, "Cannot use 'await' as identifier inside an async function");
        }
        if (this.keywords.test(name)) {
          this.raise(start, "Unexpected keyword '" + name + "'");
        }
        if (this.options.ecmaVersion < 6 && this.input.slice(start, end).indexOf("\\") !== -1) {
          return;
        }
        var re = this.strict ? this.reservedWordsStrict : this.reservedWords;
        if (re.test(name)) {
          if (!this.inAsync && name === "await") {
            this.raiseRecoverable(start, "Cannot use keyword 'await' outside an async function");
          }
          this.raiseRecoverable(start, "The keyword '" + name + "' is reserved");
        }
      };
      pp$3.parseIdent = function(liberal, isBinding) {
        var node = this.startNode();
        if (this.type === types.name) {
          node.name = this.value;
        } else if (this.type.keyword) {
          node.name = this.type.keyword;
          if ((node.name === "class" || node.name === "function") && (this.lastTokEnd !== this.lastTokStart + 1 || this.input.charCodeAt(this.lastTokStart) !== 46)) {
            this.context.pop();
          }
        } else {
          this.unexpected();
        }
        this.next(!!liberal);
        this.finishNode(node, "Identifier");
        if (!liberal) {
          this.checkUnreserved(node);
          if (node.name === "await" && !this.awaitIdentPos) {
            this.awaitIdentPos = node.start;
          }
        }
        return node;
      };
      pp$3.parseYield = function(noIn) {
        if (!this.yieldPos) {
          this.yieldPos = this.start;
        }
        var node = this.startNode();
        this.next();
        if (this.type === types.semi || this.canInsertSemicolon() || this.type !== types.star && !this.type.startsExpr) {
          node.delegate = false;
          node.argument = null;
        } else {
          node.delegate = this.eat(types.star);
          node.argument = this.parseMaybeAssign(noIn);
        }
        return this.finishNode(node, "YieldExpression");
      };
      pp$3.parseAwait = function() {
        if (!this.awaitPos) {
          this.awaitPos = this.start;
        }
        var node = this.startNode();
        this.next();
        node.argument = this.parseMaybeUnary(null, false);
        return this.finishNode(node, "AwaitExpression");
      };
      var pp$4 = Parser.prototype;
      pp$4.raise = function(pos, message) {
        var loc = getLineInfo(this.input, pos);
        message += " (" + loc.line + ":" + loc.column + ")";
        var err = new SyntaxError(message);
        err.pos = pos;
        err.loc = loc;
        err.raisedAt = this.pos;
        throw err;
      };
      pp$4.raiseRecoverable = pp$4.raise;
      pp$4.curPosition = function() {
        if (this.options.locations) {
          return new Position(this.curLine, this.pos - this.lineStart);
        }
      };
      var pp$5 = Parser.prototype;
      var Scope = function Scope2(flags) {
        this.flags = flags;
        this.var = [];
        this.lexical = [];
        this.functions = [];
      };
      pp$5.enterScope = function(flags) {
        this.scopeStack.push(new Scope(flags));
      };
      pp$5.exitScope = function() {
        this.scopeStack.pop();
      };
      pp$5.treatFunctionsAsVarInScope = function(scope) {
        return scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_TOP;
      };
      pp$5.declareName = function(name, bindingType, pos) {
        var redeclared = false;
        if (bindingType === BIND_LEXICAL) {
          var scope = this.currentScope();
          redeclared = scope.lexical.indexOf(name) > -1 || scope.functions.indexOf(name) > -1 || scope.var.indexOf(name) > -1;
          scope.lexical.push(name);
          if (this.inModule && scope.flags & SCOPE_TOP) {
            delete this.undefinedExports[name];
          }
        } else if (bindingType === BIND_SIMPLE_CATCH) {
          var scope$1 = this.currentScope();
          scope$1.lexical.push(name);
        } else if (bindingType === BIND_FUNCTION) {
          var scope$2 = this.currentScope();
          if (this.treatFunctionsAsVar) {
            redeclared = scope$2.lexical.indexOf(name) > -1;
          } else {
            redeclared = scope$2.lexical.indexOf(name) > -1 || scope$2.var.indexOf(name) > -1;
          }
          scope$2.functions.push(name);
        } else {
          for (var i = this.scopeStack.length - 1; i >= 0; --i) {
            var scope$3 = this.scopeStack[i];
            if (scope$3.lexical.indexOf(name) > -1 && !(scope$3.flags & SCOPE_SIMPLE_CATCH && scope$3.lexical[0] === name) || !this.treatFunctionsAsVarInScope(scope$3) && scope$3.functions.indexOf(name) > -1) {
              redeclared = true;
              break;
            }
            scope$3.var.push(name);
            if (this.inModule && scope$3.flags & SCOPE_TOP) {
              delete this.undefinedExports[name];
            }
            if (scope$3.flags & SCOPE_VAR) {
              break;
            }
          }
        }
        if (redeclared) {
          this.raiseRecoverable(pos, "Identifier '" + name + "' has already been declared");
        }
      };
      pp$5.checkLocalExport = function(id) {
        if (this.scopeStack[0].lexical.indexOf(id.name) === -1 && this.scopeStack[0].var.indexOf(id.name) === -1) {
          this.undefinedExports[id.name] = id;
        }
      };
      pp$5.currentScope = function() {
        return this.scopeStack[this.scopeStack.length - 1];
      };
      pp$5.currentVarScope = function() {
        for (var i = this.scopeStack.length - 1; ; i--) {
          var scope = this.scopeStack[i];
          if (scope.flags & SCOPE_VAR) {
            return scope;
          }
        }
      };
      pp$5.currentThisScope = function() {
        for (var i = this.scopeStack.length - 1; ; i--) {
          var scope = this.scopeStack[i];
          if (scope.flags & SCOPE_VAR && !(scope.flags & SCOPE_ARROW)) {
            return scope;
          }
        }
      };
      var Node = function Node2(parser, pos, loc) {
        this.type = "";
        this.start = pos;
        this.end = 0;
        if (parser.options.locations) {
          this.loc = new SourceLocation(parser, loc);
        }
        if (parser.options.directSourceFile) {
          this.sourceFile = parser.options.directSourceFile;
        }
        if (parser.options.ranges) {
          this.range = [pos, 0];
        }
      };
      var pp$6 = Parser.prototype;
      pp$6.startNode = function() {
        return new Node(this, this.start, this.startLoc);
      };
      pp$6.startNodeAt = function(pos, loc) {
        return new Node(this, pos, loc);
      };
      function finishNodeAt(node, type, pos, loc) {
        node.type = type;
        node.end = pos;
        if (this.options.locations) {
          node.loc.end = loc;
        }
        if (this.options.ranges) {
          node.range[1] = pos;
        }
        return node;
      }
      pp$6.finishNode = function(node, type) {
        return finishNodeAt.call(this, node, type, this.lastTokEnd, this.lastTokEndLoc);
      };
      pp$6.finishNodeAt = function(node, type, pos, loc) {
        return finishNodeAt.call(this, node, type, pos, loc);
      };
      var TokContext = function TokContext2(token, isExpr, preserveSpace, override, generator) {
        this.token = token;
        this.isExpr = !!isExpr;
        this.preserveSpace = !!preserveSpace;
        this.override = override;
        this.generator = !!generator;
      };
      var types$1 = {
        b_stat: new TokContext("{", false),
        b_expr: new TokContext("{", true),
        b_tmpl: new TokContext("${", false),
        p_stat: new TokContext("(", false),
        p_expr: new TokContext("(", true),
        q_tmpl: new TokContext("`", true, true, function(p) {
          return p.tryReadTemplateToken();
        }),
        f_stat: new TokContext("function", false),
        f_expr: new TokContext("function", true),
        f_expr_gen: new TokContext("function", true, false, null, true),
        f_gen: new TokContext("function", false, false, null, true)
      };
      var pp$7 = Parser.prototype;
      pp$7.initialContext = function() {
        return [types$1.b_stat];
      };
      pp$7.braceIsBlock = function(prevType) {
        var parent = this.curContext();
        if (parent === types$1.f_expr || parent === types$1.f_stat) {
          return true;
        }
        if (prevType === types.colon && (parent === types$1.b_stat || parent === types$1.b_expr)) {
          return !parent.isExpr;
        }
        if (prevType === types._return || prevType === types.name && this.exprAllowed) {
          return lineBreak.test(this.input.slice(this.lastTokEnd, this.start));
        }
        if (prevType === types._else || prevType === types.semi || prevType === types.eof || prevType === types.parenR || prevType === types.arrow) {
          return true;
        }
        if (prevType === types.braceL) {
          return parent === types$1.b_stat;
        }
        if (prevType === types._var || prevType === types._const || prevType === types.name) {
          return false;
        }
        return !this.exprAllowed;
      };
      pp$7.inGeneratorContext = function() {
        for (var i = this.context.length - 1; i >= 1; i--) {
          var context = this.context[i];
          if (context.token === "function") {
            return context.generator;
          }
        }
        return false;
      };
      pp$7.updateContext = function(prevType) {
        var update, type = this.type;
        if (type.keyword && prevType === types.dot) {
          this.exprAllowed = false;
        } else if (update = type.updateContext) {
          update.call(this, prevType);
        } else {
          this.exprAllowed = type.beforeExpr;
        }
      };
      types.parenR.updateContext = types.braceR.updateContext = function() {
        if (this.context.length === 1) {
          this.exprAllowed = true;
          return;
        }
        var out = this.context.pop();
        if (out === types$1.b_stat && this.curContext().token === "function") {
          out = this.context.pop();
        }
        this.exprAllowed = !out.isExpr;
      };
      types.braceL.updateContext = function(prevType) {
        this.context.push(this.braceIsBlock(prevType) ? types$1.b_stat : types$1.b_expr);
        this.exprAllowed = true;
      };
      types.dollarBraceL.updateContext = function() {
        this.context.push(types$1.b_tmpl);
        this.exprAllowed = true;
      };
      types.parenL.updateContext = function(prevType) {
        var statementParens = prevType === types._if || prevType === types._for || prevType === types._with || prevType === types._while;
        this.context.push(statementParens ? types$1.p_stat : types$1.p_expr);
        this.exprAllowed = true;
      };
      types.incDec.updateContext = function() {
      };
      types._function.updateContext = types._class.updateContext = function(prevType) {
        if (prevType.beforeExpr && prevType !== types.semi && prevType !== types._else && !(prevType === types._return && lineBreak.test(this.input.slice(this.lastTokEnd, this.start))) && !((prevType === types.colon || prevType === types.braceL) && this.curContext() === types$1.b_stat)) {
          this.context.push(types$1.f_expr);
        } else {
          this.context.push(types$1.f_stat);
        }
        this.exprAllowed = false;
      };
      types.backQuote.updateContext = function() {
        if (this.curContext() === types$1.q_tmpl) {
          this.context.pop();
        } else {
          this.context.push(types$1.q_tmpl);
        }
        this.exprAllowed = false;
      };
      types.star.updateContext = function(prevType) {
        if (prevType === types._function) {
          var index = this.context.length - 1;
          if (this.context[index] === types$1.f_expr) {
            this.context[index] = types$1.f_expr_gen;
          } else {
            this.context[index] = types$1.f_gen;
          }
        }
        this.exprAllowed = true;
      };
      types.name.updateContext = function(prevType) {
        var allowed = false;
        if (this.options.ecmaVersion >= 6 && prevType !== types.dot) {
          if (this.value === "of" && !this.exprAllowed || this.value === "yield" && this.inGeneratorContext()) {
            allowed = true;
          }
        }
        this.exprAllowed = allowed;
      };
      var ecma9BinaryProperties = "ASCII ASCII_Hex_Digit AHex Alphabetic Alpha Any Assigned Bidi_Control Bidi_C Bidi_Mirrored Bidi_M Case_Ignorable CI Cased Changes_When_Casefolded CWCF Changes_When_Casemapped CWCM Changes_When_Lowercased CWL Changes_When_NFKC_Casefolded CWKCF Changes_When_Titlecased CWT Changes_When_Uppercased CWU Dash Default_Ignorable_Code_Point DI Deprecated Dep Diacritic Dia Emoji Emoji_Component Emoji_Modifier Emoji_Modifier_Base Emoji_Presentation Extender Ext Grapheme_Base Gr_Base Grapheme_Extend Gr_Ext Hex_Digit Hex IDS_Binary_Operator IDSB IDS_Trinary_Operator IDST ID_Continue IDC ID_Start IDS Ideographic Ideo Join_Control Join_C Logical_Order_Exception LOE Lowercase Lower Math Noncharacter_Code_Point NChar Pattern_Syntax Pat_Syn Pattern_White_Space Pat_WS Quotation_Mark QMark Radical Regional_Indicator RI Sentence_Terminal STerm Soft_Dotted SD Terminal_Punctuation Term Unified_Ideograph UIdeo Uppercase Upper Variation_Selector VS White_Space space XID_Continue XIDC XID_Start XIDS";
      var ecma10BinaryProperties = ecma9BinaryProperties + " Extended_Pictographic";
      var ecma11BinaryProperties = ecma10BinaryProperties;
      var unicodeBinaryProperties = {
        9: ecma9BinaryProperties,
        10: ecma10BinaryProperties,
        11: ecma11BinaryProperties
      };
      var unicodeGeneralCategoryValues = "Cased_Letter LC Close_Punctuation Pe Connector_Punctuation Pc Control Cc cntrl Currency_Symbol Sc Dash_Punctuation Pd Decimal_Number Nd digit Enclosing_Mark Me Final_Punctuation Pf Format Cf Initial_Punctuation Pi Letter L Letter_Number Nl Line_Separator Zl Lowercase_Letter Ll Mark M Combining_Mark Math_Symbol Sm Modifier_Letter Lm Modifier_Symbol Sk Nonspacing_Mark Mn Number N Open_Punctuation Ps Other C Other_Letter Lo Other_Number No Other_Punctuation Po Other_Symbol So Paragraph_Separator Zp Private_Use Co Punctuation P punct Separator Z Space_Separator Zs Spacing_Mark Mc Surrogate Cs Symbol S Titlecase_Letter Lt Unassigned Cn Uppercase_Letter Lu";
      var ecma9ScriptValues = "Adlam Adlm Ahom Ahom Anatolian_Hieroglyphs Hluw Arabic Arab Armenian Armn Avestan Avst Balinese Bali Bamum Bamu Bassa_Vah Bass Batak Batk Bengali Beng Bhaiksuki Bhks Bopomofo Bopo Brahmi Brah Braille Brai Buginese Bugi Buhid Buhd Canadian_Aboriginal Cans Carian Cari Caucasian_Albanian Aghb Chakma Cakm Cham Cham Cherokee Cher Common Zyyy Coptic Copt Qaac Cuneiform Xsux Cypriot Cprt Cyrillic Cyrl Deseret Dsrt Devanagari Deva Duployan Dupl Egyptian_Hieroglyphs Egyp Elbasan Elba Ethiopic Ethi Georgian Geor Glagolitic Glag Gothic Goth Grantha Gran Greek Grek Gujarati Gujr Gurmukhi Guru Han Hani Hangul Hang Hanunoo Hano Hatran Hatr Hebrew Hebr Hiragana Hira Imperial_Aramaic Armi Inherited Zinh Qaai Inscriptional_Pahlavi Phli Inscriptional_Parthian Prti Javanese Java Kaithi Kthi Kannada Knda Katakana Kana Kayah_Li Kali Kharoshthi Khar Khmer Khmr Khojki Khoj Khudawadi Sind Lao Laoo Latin Latn Lepcha Lepc Limbu Limb Linear_A Lina Linear_B Linb Lisu Lisu Lycian Lyci Lydian Lydi Mahajani Mahj Malayalam Mlym Mandaic Mand Manichaean Mani Marchen Marc Masaram_Gondi Gonm Meetei_Mayek Mtei Mende_Kikakui Mend Meroitic_Cursive Merc Meroitic_Hieroglyphs Mero Miao Plrd Modi Modi Mongolian Mong Mro Mroo Multani Mult Myanmar Mymr Nabataean Nbat New_Tai_Lue Talu Newa Newa Nko Nkoo Nushu Nshu Ogham Ogam Ol_Chiki Olck Old_Hungarian Hung Old_Italic Ital Old_North_Arabian Narb Old_Permic Perm Old_Persian Xpeo Old_South_Arabian Sarb Old_Turkic Orkh Oriya Orya Osage Osge Osmanya Osma Pahawh_Hmong Hmng Palmyrene Palm Pau_Cin_Hau Pauc Phags_Pa Phag Phoenician Phnx Psalter_Pahlavi Phlp Rejang Rjng Runic Runr Samaritan Samr Saurashtra Saur Sharada Shrd Shavian Shaw Siddham Sidd SignWriting Sgnw Sinhala Sinh Sora_Sompeng Sora Soyombo Soyo Sundanese Sund Syloti_Nagri Sylo Syriac Syrc Tagalog Tglg Tagbanwa Tagb Tai_Le Tale Tai_Tham Lana Tai_Viet Tavt Takri Takr Tamil Taml Tangut Tang Telugu Telu Thaana Thaa Thai Thai Tibetan Tibt Tifinagh Tfng Tirhuta Tirh Ugaritic Ugar Vai Vaii Warang_Citi Wara Yi Yiii Zanabazar_Square Zanb";
      var ecma10ScriptValues = ecma9ScriptValues + " Dogra Dogr Gunjala_Gondi Gong Hanifi_Rohingya Rohg Makasar Maka Medefaidrin Medf Old_Sogdian Sogo Sogdian Sogd";
      var ecma11ScriptValues = ecma10ScriptValues + " Elymaic Elym Nandinagari Nand Nyiakeng_Puachue_Hmong Hmnp Wancho Wcho";
      var unicodeScriptValues = {
        9: ecma9ScriptValues,
        10: ecma10ScriptValues,
        11: ecma11ScriptValues
      };
      var data = {};
      function buildUnicodeData(ecmaVersion) {
        var d = data[ecmaVersion] = {
          binary: wordsRegexp(unicodeBinaryProperties[ecmaVersion] + " " + unicodeGeneralCategoryValues),
          nonBinary: {
            General_Category: wordsRegexp(unicodeGeneralCategoryValues),
            Script: wordsRegexp(unicodeScriptValues[ecmaVersion])
          }
        };
        d.nonBinary.Script_Extensions = d.nonBinary.Script;
        d.nonBinary.gc = d.nonBinary.General_Category;
        d.nonBinary.sc = d.nonBinary.Script;
        d.nonBinary.scx = d.nonBinary.Script_Extensions;
      }
      buildUnicodeData(9);
      buildUnicodeData(10);
      buildUnicodeData(11);
      var pp$8 = Parser.prototype;
      var RegExpValidationState = function RegExpValidationState2(parser) {
        this.parser = parser;
        this.validFlags = "gim" + (parser.options.ecmaVersion >= 6 ? "uy" : "") + (parser.options.ecmaVersion >= 9 ? "s" : "");
        this.unicodeProperties = data[parser.options.ecmaVersion >= 11 ? 11 : parser.options.ecmaVersion];
        this.source = "";
        this.flags = "";
        this.start = 0;
        this.switchU = false;
        this.switchN = false;
        this.pos = 0;
        this.lastIntValue = 0;
        this.lastStringValue = "";
        this.lastAssertionIsQuantifiable = false;
        this.numCapturingParens = 0;
        this.maxBackReference = 0;
        this.groupNames = [];
        this.backReferenceNames = [];
      };
      RegExpValidationState.prototype.reset = function reset(start, pattern, flags) {
        var unicode = flags.indexOf("u") !== -1;
        this.start = start | 0;
        this.source = pattern + "";
        this.flags = flags;
        this.switchU = unicode && this.parser.options.ecmaVersion >= 6;
        this.switchN = unicode && this.parser.options.ecmaVersion >= 9;
      };
      RegExpValidationState.prototype.raise = function raise(message) {
        this.parser.raiseRecoverable(this.start, "Invalid regular expression: /" + this.source + "/: " + message);
      };
      RegExpValidationState.prototype.at = function at(i, forceU) {
        if (forceU === void 0)
          forceU = false;
        var s = this.source;
        var l = s.length;
        if (i >= l) {
          return -1;
        }
        var c = s.charCodeAt(i);
        if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i + 1 >= l) {
          return c;
        }
        var next = s.charCodeAt(i + 1);
        return next >= 56320 && next <= 57343 ? (c << 10) + next - 56613888 : c;
      };
      RegExpValidationState.prototype.nextIndex = function nextIndex(i, forceU) {
        if (forceU === void 0)
          forceU = false;
        var s = this.source;
        var l = s.length;
        if (i >= l) {
          return l;
        }
        var c = s.charCodeAt(i), next;
        if (!(forceU || this.switchU) || c <= 55295 || c >= 57344 || i + 1 >= l || (next = s.charCodeAt(i + 1)) < 56320 || next > 57343) {
          return i + 1;
        }
        return i + 2;
      };
      RegExpValidationState.prototype.current = function current(forceU) {
        if (forceU === void 0)
          forceU = false;
        return this.at(this.pos, forceU);
      };
      RegExpValidationState.prototype.lookahead = function lookahead(forceU) {
        if (forceU === void 0)
          forceU = false;
        return this.at(this.nextIndex(this.pos, forceU), forceU);
      };
      RegExpValidationState.prototype.advance = function advance(forceU) {
        if (forceU === void 0)
          forceU = false;
        this.pos = this.nextIndex(this.pos, forceU);
      };
      RegExpValidationState.prototype.eat = function eat(ch, forceU) {
        if (forceU === void 0)
          forceU = false;
        if (this.current(forceU) === ch) {
          this.advance(forceU);
          return true;
        }
        return false;
      };
      function codePointToString(ch) {
        if (ch <= 65535) {
          return String.fromCharCode(ch);
        }
        ch -= 65536;
        return String.fromCharCode((ch >> 10) + 55296, (ch & 1023) + 56320);
      }
      pp$8.validateRegExpFlags = function(state) {
        var validFlags = state.validFlags;
        var flags = state.flags;
        for (var i = 0; i < flags.length; i++) {
          var flag = flags.charAt(i);
          if (validFlags.indexOf(flag) === -1) {
            this.raise(state.start, "Invalid regular expression flag");
          }
          if (flags.indexOf(flag, i + 1) > -1) {
            this.raise(state.start, "Duplicate regular expression flag");
          }
        }
      };
      pp$8.validateRegExpPattern = function(state) {
        this.regexp_pattern(state);
        if (!state.switchN && this.options.ecmaVersion >= 9 && state.groupNames.length > 0) {
          state.switchN = true;
          this.regexp_pattern(state);
        }
      };
      pp$8.regexp_pattern = function(state) {
        state.pos = 0;
        state.lastIntValue = 0;
        state.lastStringValue = "";
        state.lastAssertionIsQuantifiable = false;
        state.numCapturingParens = 0;
        state.maxBackReference = 0;
        state.groupNames.length = 0;
        state.backReferenceNames.length = 0;
        this.regexp_disjunction(state);
        if (state.pos !== state.source.length) {
          if (state.eat(41)) {
            state.raise("Unmatched ')'");
          }
          if (state.eat(93) || state.eat(125)) {
            state.raise("Lone quantifier brackets");
          }
        }
        if (state.maxBackReference > state.numCapturingParens) {
          state.raise("Invalid escape");
        }
        for (var i = 0, list = state.backReferenceNames; i < list.length; i += 1) {
          var name = list[i];
          if (state.groupNames.indexOf(name) === -1) {
            state.raise("Invalid named capture referenced");
          }
        }
      };
      pp$8.regexp_disjunction = function(state) {
        this.regexp_alternative(state);
        while (state.eat(124)) {
          this.regexp_alternative(state);
        }
        if (this.regexp_eatQuantifier(state, true)) {
          state.raise("Nothing to repeat");
        }
        if (state.eat(123)) {
          state.raise("Lone quantifier brackets");
        }
      };
      pp$8.regexp_alternative = function(state) {
        while (state.pos < state.source.length && this.regexp_eatTerm(state)) {
        }
      };
      pp$8.regexp_eatTerm = function(state) {
        if (this.regexp_eatAssertion(state)) {
          if (state.lastAssertionIsQuantifiable && this.regexp_eatQuantifier(state)) {
            if (state.switchU) {
              state.raise("Invalid quantifier");
            }
          }
          return true;
        }
        if (state.switchU ? this.regexp_eatAtom(state) : this.regexp_eatExtendedAtom(state)) {
          this.regexp_eatQuantifier(state);
          return true;
        }
        return false;
      };
      pp$8.regexp_eatAssertion = function(state) {
        var start = state.pos;
        state.lastAssertionIsQuantifiable = false;
        if (state.eat(94) || state.eat(36)) {
          return true;
        }
        if (state.eat(92)) {
          if (state.eat(66) || state.eat(98)) {
            return true;
          }
          state.pos = start;
        }
        if (state.eat(40) && state.eat(63)) {
          var lookbehind = false;
          if (this.options.ecmaVersion >= 9) {
            lookbehind = state.eat(60);
          }
          if (state.eat(61) || state.eat(33)) {
            this.regexp_disjunction(state);
            if (!state.eat(41)) {
              state.raise("Unterminated group");
            }
            state.lastAssertionIsQuantifiable = !lookbehind;
            return true;
          }
        }
        state.pos = start;
        return false;
      };
      pp$8.regexp_eatQuantifier = function(state, noError) {
        if (noError === void 0)
          noError = false;
        if (this.regexp_eatQuantifierPrefix(state, noError)) {
          state.eat(63);
          return true;
        }
        return false;
      };
      pp$8.regexp_eatQuantifierPrefix = function(state, noError) {
        return state.eat(42) || state.eat(43) || state.eat(63) || this.regexp_eatBracedQuantifier(state, noError);
      };
      pp$8.regexp_eatBracedQuantifier = function(state, noError) {
        var start = state.pos;
        if (state.eat(123)) {
          var min = 0, max = -1;
          if (this.regexp_eatDecimalDigits(state)) {
            min = state.lastIntValue;
            if (state.eat(44) && this.regexp_eatDecimalDigits(state)) {
              max = state.lastIntValue;
            }
            if (state.eat(125)) {
              if (max !== -1 && max < min && !noError) {
                state.raise("numbers out of order in {} quantifier");
              }
              return true;
            }
          }
          if (state.switchU && !noError) {
            state.raise("Incomplete quantifier");
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatAtom = function(state) {
        return this.regexp_eatPatternCharacters(state) || state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state);
      };
      pp$8.regexp_eatReverseSolidusAtomEscape = function(state) {
        var start = state.pos;
        if (state.eat(92)) {
          if (this.regexp_eatAtomEscape(state)) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatUncapturingGroup = function(state) {
        var start = state.pos;
        if (state.eat(40)) {
          if (state.eat(63) && state.eat(58)) {
            this.regexp_disjunction(state);
            if (state.eat(41)) {
              return true;
            }
            state.raise("Unterminated group");
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatCapturingGroup = function(state) {
        if (state.eat(40)) {
          if (this.options.ecmaVersion >= 9) {
            this.regexp_groupSpecifier(state);
          } else if (state.current() === 63) {
            state.raise("Invalid group");
          }
          this.regexp_disjunction(state);
          if (state.eat(41)) {
            state.numCapturingParens += 1;
            return true;
          }
          state.raise("Unterminated group");
        }
        return false;
      };
      pp$8.regexp_eatExtendedAtom = function(state) {
        return state.eat(46) || this.regexp_eatReverseSolidusAtomEscape(state) || this.regexp_eatCharacterClass(state) || this.regexp_eatUncapturingGroup(state) || this.regexp_eatCapturingGroup(state) || this.regexp_eatInvalidBracedQuantifier(state) || this.regexp_eatExtendedPatternCharacter(state);
      };
      pp$8.regexp_eatInvalidBracedQuantifier = function(state) {
        if (this.regexp_eatBracedQuantifier(state, true)) {
          state.raise("Nothing to repeat");
        }
        return false;
      };
      pp$8.regexp_eatSyntaxCharacter = function(state) {
        var ch = state.current();
        if (isSyntaxCharacter(ch)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      function isSyntaxCharacter(ch) {
        return ch === 36 || ch >= 40 && ch <= 43 || ch === 46 || ch === 63 || ch >= 91 && ch <= 94 || ch >= 123 && ch <= 125;
      }
      pp$8.regexp_eatPatternCharacters = function(state) {
        var start = state.pos;
        var ch = 0;
        while ((ch = state.current()) !== -1 && !isSyntaxCharacter(ch)) {
          state.advance();
        }
        return state.pos !== start;
      };
      pp$8.regexp_eatExtendedPatternCharacter = function(state) {
        var ch = state.current();
        if (ch !== -1 && ch !== 36 && !(ch >= 40 && ch <= 43) && ch !== 46 && ch !== 63 && ch !== 91 && ch !== 94 && ch !== 124) {
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_groupSpecifier = function(state) {
        if (state.eat(63)) {
          if (this.regexp_eatGroupName(state)) {
            if (state.groupNames.indexOf(state.lastStringValue) !== -1) {
              state.raise("Duplicate capture group name");
            }
            state.groupNames.push(state.lastStringValue);
            return;
          }
          state.raise("Invalid group");
        }
      };
      pp$8.regexp_eatGroupName = function(state) {
        state.lastStringValue = "";
        if (state.eat(60)) {
          if (this.regexp_eatRegExpIdentifierName(state) && state.eat(62)) {
            return true;
          }
          state.raise("Invalid capture group name");
        }
        return false;
      };
      pp$8.regexp_eatRegExpIdentifierName = function(state) {
        state.lastStringValue = "";
        if (this.regexp_eatRegExpIdentifierStart(state)) {
          state.lastStringValue += codePointToString(state.lastIntValue);
          while (this.regexp_eatRegExpIdentifierPart(state)) {
            state.lastStringValue += codePointToString(state.lastIntValue);
          }
          return true;
        }
        return false;
      };
      pp$8.regexp_eatRegExpIdentifierStart = function(state) {
        var start = state.pos;
        var forceU = this.options.ecmaVersion >= 11;
        var ch = state.current(forceU);
        state.advance(forceU);
        if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
          ch = state.lastIntValue;
        }
        if (isRegExpIdentifierStart(ch)) {
          state.lastIntValue = ch;
          return true;
        }
        state.pos = start;
        return false;
      };
      function isRegExpIdentifierStart(ch) {
        return isIdentifierStart(ch, true) || ch === 36 || ch === 95;
      }
      pp$8.regexp_eatRegExpIdentifierPart = function(state) {
        var start = state.pos;
        var forceU = this.options.ecmaVersion >= 11;
        var ch = state.current(forceU);
        state.advance(forceU);
        if (ch === 92 && this.regexp_eatRegExpUnicodeEscapeSequence(state, forceU)) {
          ch = state.lastIntValue;
        }
        if (isRegExpIdentifierPart(ch)) {
          state.lastIntValue = ch;
          return true;
        }
        state.pos = start;
        return false;
      };
      function isRegExpIdentifierPart(ch) {
        return isIdentifierChar(ch, true) || ch === 36 || ch === 95 || ch === 8204 || ch === 8205;
      }
      pp$8.regexp_eatAtomEscape = function(state) {
        if (this.regexp_eatBackReference(state) || this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state) || state.switchN && this.regexp_eatKGroupName(state)) {
          return true;
        }
        if (state.switchU) {
          if (state.current() === 99) {
            state.raise("Invalid unicode escape");
          }
          state.raise("Invalid escape");
        }
        return false;
      };
      pp$8.regexp_eatBackReference = function(state) {
        var start = state.pos;
        if (this.regexp_eatDecimalEscape(state)) {
          var n = state.lastIntValue;
          if (state.switchU) {
            if (n > state.maxBackReference) {
              state.maxBackReference = n;
            }
            return true;
          }
          if (n <= state.numCapturingParens) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatKGroupName = function(state) {
        if (state.eat(107)) {
          if (this.regexp_eatGroupName(state)) {
            state.backReferenceNames.push(state.lastStringValue);
            return true;
          }
          state.raise("Invalid named reference");
        }
        return false;
      };
      pp$8.regexp_eatCharacterEscape = function(state) {
        return this.regexp_eatControlEscape(state) || this.regexp_eatCControlLetter(state) || this.regexp_eatZero(state) || this.regexp_eatHexEscapeSequence(state) || this.regexp_eatRegExpUnicodeEscapeSequence(state, false) || !state.switchU && this.regexp_eatLegacyOctalEscapeSequence(state) || this.regexp_eatIdentityEscape(state);
      };
      pp$8.regexp_eatCControlLetter = function(state) {
        var start = state.pos;
        if (state.eat(99)) {
          if (this.regexp_eatControlLetter(state)) {
            return true;
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatZero = function(state) {
        if (state.current() === 48 && !isDecimalDigit(state.lookahead())) {
          state.lastIntValue = 0;
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_eatControlEscape = function(state) {
        var ch = state.current();
        if (ch === 116) {
          state.lastIntValue = 9;
          state.advance();
          return true;
        }
        if (ch === 110) {
          state.lastIntValue = 10;
          state.advance();
          return true;
        }
        if (ch === 118) {
          state.lastIntValue = 11;
          state.advance();
          return true;
        }
        if (ch === 102) {
          state.lastIntValue = 12;
          state.advance();
          return true;
        }
        if (ch === 114) {
          state.lastIntValue = 13;
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_eatControlLetter = function(state) {
        var ch = state.current();
        if (isControlLetter(ch)) {
          state.lastIntValue = ch % 32;
          state.advance();
          return true;
        }
        return false;
      };
      function isControlLetter(ch) {
        return ch >= 65 && ch <= 90 || ch >= 97 && ch <= 122;
      }
      pp$8.regexp_eatRegExpUnicodeEscapeSequence = function(state, forceU) {
        if (forceU === void 0)
          forceU = false;
        var start = state.pos;
        var switchU = forceU || state.switchU;
        if (state.eat(117)) {
          if (this.regexp_eatFixedHexDigits(state, 4)) {
            var lead = state.lastIntValue;
            if (switchU && lead >= 55296 && lead <= 56319) {
              var leadSurrogateEnd = state.pos;
              if (state.eat(92) && state.eat(117) && this.regexp_eatFixedHexDigits(state, 4)) {
                var trail = state.lastIntValue;
                if (trail >= 56320 && trail <= 57343) {
                  state.lastIntValue = (lead - 55296) * 1024 + (trail - 56320) + 65536;
                  return true;
                }
              }
              state.pos = leadSurrogateEnd;
              state.lastIntValue = lead;
            }
            return true;
          }
          if (switchU && state.eat(123) && this.regexp_eatHexDigits(state) && state.eat(125) && isValidUnicode(state.lastIntValue)) {
            return true;
          }
          if (switchU) {
            state.raise("Invalid unicode escape");
          }
          state.pos = start;
        }
        return false;
      };
      function isValidUnicode(ch) {
        return ch >= 0 && ch <= 1114111;
      }
      pp$8.regexp_eatIdentityEscape = function(state) {
        if (state.switchU) {
          if (this.regexp_eatSyntaxCharacter(state)) {
            return true;
          }
          if (state.eat(47)) {
            state.lastIntValue = 47;
            return true;
          }
          return false;
        }
        var ch = state.current();
        if (ch !== 99 && (!state.switchN || ch !== 107)) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_eatDecimalEscape = function(state) {
        state.lastIntValue = 0;
        var ch = state.current();
        if (ch >= 49 && ch <= 57) {
          do {
            state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
            state.advance();
          } while ((ch = state.current()) >= 48 && ch <= 57);
          return true;
        }
        return false;
      };
      pp$8.regexp_eatCharacterClassEscape = function(state) {
        var ch = state.current();
        if (isCharacterClassEscape(ch)) {
          state.lastIntValue = -1;
          state.advance();
          return true;
        }
        if (state.switchU && this.options.ecmaVersion >= 9 && (ch === 80 || ch === 112)) {
          state.lastIntValue = -1;
          state.advance();
          if (state.eat(123) && this.regexp_eatUnicodePropertyValueExpression(state) && state.eat(125)) {
            return true;
          }
          state.raise("Invalid property name");
        }
        return false;
      };
      function isCharacterClassEscape(ch) {
        return ch === 100 || ch === 68 || ch === 115 || ch === 83 || ch === 119 || ch === 87;
      }
      pp$8.regexp_eatUnicodePropertyValueExpression = function(state) {
        var start = state.pos;
        if (this.regexp_eatUnicodePropertyName(state) && state.eat(61)) {
          var name = state.lastStringValue;
          if (this.regexp_eatUnicodePropertyValue(state)) {
            var value = state.lastStringValue;
            this.regexp_validateUnicodePropertyNameAndValue(state, name, value);
            return true;
          }
        }
        state.pos = start;
        if (this.regexp_eatLoneUnicodePropertyNameOrValue(state)) {
          var nameOrValue = state.lastStringValue;
          this.regexp_validateUnicodePropertyNameOrValue(state, nameOrValue);
          return true;
        }
        return false;
      };
      pp$8.regexp_validateUnicodePropertyNameAndValue = function(state, name, value) {
        if (!has(state.unicodeProperties.nonBinary, name)) {
          state.raise("Invalid property name");
        }
        if (!state.unicodeProperties.nonBinary[name].test(value)) {
          state.raise("Invalid property value");
        }
      };
      pp$8.regexp_validateUnicodePropertyNameOrValue = function(state, nameOrValue) {
        if (!state.unicodeProperties.binary.test(nameOrValue)) {
          state.raise("Invalid property name");
        }
      };
      pp$8.regexp_eatUnicodePropertyName = function(state) {
        var ch = 0;
        state.lastStringValue = "";
        while (isUnicodePropertyNameCharacter(ch = state.current())) {
          state.lastStringValue += codePointToString(ch);
          state.advance();
        }
        return state.lastStringValue !== "";
      };
      function isUnicodePropertyNameCharacter(ch) {
        return isControlLetter(ch) || ch === 95;
      }
      pp$8.regexp_eatUnicodePropertyValue = function(state) {
        var ch = 0;
        state.lastStringValue = "";
        while (isUnicodePropertyValueCharacter(ch = state.current())) {
          state.lastStringValue += codePointToString(ch);
          state.advance();
        }
        return state.lastStringValue !== "";
      };
      function isUnicodePropertyValueCharacter(ch) {
        return isUnicodePropertyNameCharacter(ch) || isDecimalDigit(ch);
      }
      pp$8.regexp_eatLoneUnicodePropertyNameOrValue = function(state) {
        return this.regexp_eatUnicodePropertyValue(state);
      };
      pp$8.regexp_eatCharacterClass = function(state) {
        if (state.eat(91)) {
          state.eat(94);
          this.regexp_classRanges(state);
          if (state.eat(93)) {
            return true;
          }
          state.raise("Unterminated character class");
        }
        return false;
      };
      pp$8.regexp_classRanges = function(state) {
        while (this.regexp_eatClassAtom(state)) {
          var left = state.lastIntValue;
          if (state.eat(45) && this.regexp_eatClassAtom(state)) {
            var right = state.lastIntValue;
            if (state.switchU && (left === -1 || right === -1)) {
              state.raise("Invalid character class");
            }
            if (left !== -1 && right !== -1 && left > right) {
              state.raise("Range out of order in character class");
            }
          }
        }
      };
      pp$8.regexp_eatClassAtom = function(state) {
        var start = state.pos;
        if (state.eat(92)) {
          if (this.regexp_eatClassEscape(state)) {
            return true;
          }
          if (state.switchU) {
            var ch$1 = state.current();
            if (ch$1 === 99 || isOctalDigit(ch$1)) {
              state.raise("Invalid class escape");
            }
            state.raise("Invalid escape");
          }
          state.pos = start;
        }
        var ch = state.current();
        if (ch !== 93) {
          state.lastIntValue = ch;
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_eatClassEscape = function(state) {
        var start = state.pos;
        if (state.eat(98)) {
          state.lastIntValue = 8;
          return true;
        }
        if (state.switchU && state.eat(45)) {
          state.lastIntValue = 45;
          return true;
        }
        if (!state.switchU && state.eat(99)) {
          if (this.regexp_eatClassControlLetter(state)) {
            return true;
          }
          state.pos = start;
        }
        return this.regexp_eatCharacterClassEscape(state) || this.regexp_eatCharacterEscape(state);
      };
      pp$8.regexp_eatClassControlLetter = function(state) {
        var ch = state.current();
        if (isDecimalDigit(ch) || ch === 95) {
          state.lastIntValue = ch % 32;
          state.advance();
          return true;
        }
        return false;
      };
      pp$8.regexp_eatHexEscapeSequence = function(state) {
        var start = state.pos;
        if (state.eat(120)) {
          if (this.regexp_eatFixedHexDigits(state, 2)) {
            return true;
          }
          if (state.switchU) {
            state.raise("Invalid escape");
          }
          state.pos = start;
        }
        return false;
      };
      pp$8.regexp_eatDecimalDigits = function(state) {
        var start = state.pos;
        var ch = 0;
        state.lastIntValue = 0;
        while (isDecimalDigit(ch = state.current())) {
          state.lastIntValue = 10 * state.lastIntValue + (ch - 48);
          state.advance();
        }
        return state.pos !== start;
      };
      function isDecimalDigit(ch) {
        return ch >= 48 && ch <= 57;
      }
      pp$8.regexp_eatHexDigits = function(state) {
        var start = state.pos;
        var ch = 0;
        state.lastIntValue = 0;
        while (isHexDigit(ch = state.current())) {
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
          state.advance();
        }
        return state.pos !== start;
      };
      function isHexDigit(ch) {
        return ch >= 48 && ch <= 57 || ch >= 65 && ch <= 70 || ch >= 97 && ch <= 102;
      }
      function hexToInt(ch) {
        if (ch >= 65 && ch <= 70) {
          return 10 + (ch - 65);
        }
        if (ch >= 97 && ch <= 102) {
          return 10 + (ch - 97);
        }
        return ch - 48;
      }
      pp$8.regexp_eatLegacyOctalEscapeSequence = function(state) {
        if (this.regexp_eatOctalDigit(state)) {
          var n1 = state.lastIntValue;
          if (this.regexp_eatOctalDigit(state)) {
            var n2 = state.lastIntValue;
            if (n1 <= 3 && this.regexp_eatOctalDigit(state)) {
              state.lastIntValue = n1 * 64 + n2 * 8 + state.lastIntValue;
            } else {
              state.lastIntValue = n1 * 8 + n2;
            }
          } else {
            state.lastIntValue = n1;
          }
          return true;
        }
        return false;
      };
      pp$8.regexp_eatOctalDigit = function(state) {
        var ch = state.current();
        if (isOctalDigit(ch)) {
          state.lastIntValue = ch - 48;
          state.advance();
          return true;
        }
        state.lastIntValue = 0;
        return false;
      };
      function isOctalDigit(ch) {
        return ch >= 48 && ch <= 55;
      }
      pp$8.regexp_eatFixedHexDigits = function(state, length) {
        var start = state.pos;
        state.lastIntValue = 0;
        for (var i = 0; i < length; ++i) {
          var ch = state.current();
          if (!isHexDigit(ch)) {
            state.pos = start;
            return false;
          }
          state.lastIntValue = 16 * state.lastIntValue + hexToInt(ch);
          state.advance();
        }
        return true;
      };
      var Token = function Token2(p) {
        this.type = p.type;
        this.value = p.value;
        this.start = p.start;
        this.end = p.end;
        if (p.options.locations) {
          this.loc = new SourceLocation(p, p.startLoc, p.endLoc);
        }
        if (p.options.ranges) {
          this.range = [p.start, p.end];
        }
      };
      var pp$9 = Parser.prototype;
      pp$9.next = function(ignoreEscapeSequenceInKeyword) {
        if (!ignoreEscapeSequenceInKeyword && this.type.keyword && this.containsEsc) {
          this.raiseRecoverable(this.start, "Escape sequence in keyword " + this.type.keyword);
        }
        if (this.options.onToken) {
          this.options.onToken(new Token(this));
        }
        this.lastTokEnd = this.end;
        this.lastTokStart = this.start;
        this.lastTokEndLoc = this.endLoc;
        this.lastTokStartLoc = this.startLoc;
        this.nextToken();
      };
      pp$9.getToken = function() {
        this.next();
        return new Token(this);
      };
      if (typeof Symbol !== "undefined") {
        pp$9[Symbol.iterator] = function() {
          var this$1 = this;
          return {
            next: function() {
              var token = this$1.getToken();
              return {
                done: token.type === types.eof,
                value: token
              };
            }
          };
        };
      }
      pp$9.curContext = function() {
        return this.context[this.context.length - 1];
      };
      pp$9.nextToken = function() {
        var curContext = this.curContext();
        if (!curContext || !curContext.preserveSpace) {
          this.skipSpace();
        }
        this.start = this.pos;
        if (this.options.locations) {
          this.startLoc = this.curPosition();
        }
        if (this.pos >= this.input.length) {
          return this.finishToken(types.eof);
        }
        if (curContext.override) {
          return curContext.override(this);
        } else {
          this.readToken(this.fullCharCodeAtPos());
        }
      };
      pp$9.readToken = function(code) {
        if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92) {
          return this.readWord();
        }
        return this.getTokenFromCode(code);
      };
      pp$9.fullCharCodeAtPos = function() {
        var code = this.input.charCodeAt(this.pos);
        if (code <= 55295 || code >= 57344) {
          return code;
        }
        var next = this.input.charCodeAt(this.pos + 1);
        return (code << 10) + next - 56613888;
      };
      pp$9.skipBlockComment = function() {
        var startLoc = this.options.onComment && this.curPosition();
        var start = this.pos, end = this.input.indexOf("*/", this.pos += 2);
        if (end === -1) {
          this.raise(this.pos - 2, "Unterminated comment");
        }
        this.pos = end + 2;
        if (this.options.locations) {
          lineBreakG.lastIndex = start;
          var match;
          while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {
            ++this.curLine;
            this.lineStart = match.index + match[0].length;
          }
        }
        if (this.options.onComment) {
          this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos, startLoc, this.curPosition());
        }
      };
      pp$9.skipLineComment = function(startSkip) {
        var start = this.pos;
        var startLoc = this.options.onComment && this.curPosition();
        var ch = this.input.charCodeAt(this.pos += startSkip);
        while (this.pos < this.input.length && !isNewLine(ch)) {
          ch = this.input.charCodeAt(++this.pos);
        }
        if (this.options.onComment) {
          this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos, startLoc, this.curPosition());
        }
      };
      pp$9.skipSpace = function() {
        loop:
          while (this.pos < this.input.length) {
            var ch = this.input.charCodeAt(this.pos);
            switch (ch) {
              case 32:
              case 160:
                ++this.pos;
                break;
              case 13:
                if (this.input.charCodeAt(this.pos + 1) === 10) {
                  ++this.pos;
                }
              case 10:
              case 8232:
              case 8233:
                ++this.pos;
                if (this.options.locations) {
                  ++this.curLine;
                  this.lineStart = this.pos;
                }
                break;
              case 47:
                switch (this.input.charCodeAt(this.pos + 1)) {
                  case 42:
                    this.skipBlockComment();
                    break;
                  case 47:
                    this.skipLineComment(2);
                    break;
                  default:
                    break loop;
                }
                break;
              default:
                if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {
                  ++this.pos;
                } else {
                  break loop;
                }
            }
          }
      };
      pp$9.finishToken = function(type, val) {
        this.end = this.pos;
        if (this.options.locations) {
          this.endLoc = this.curPosition();
        }
        var prevType = this.type;
        this.type = type;
        this.value = val;
        this.updateContext(prevType);
      };
      pp$9.readToken_dot = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next >= 48 && next <= 57) {
          return this.readNumber(true);
        }
        var next2 = this.input.charCodeAt(this.pos + 2);
        if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) {
          this.pos += 3;
          return this.finishToken(types.ellipsis);
        } else {
          ++this.pos;
          return this.finishToken(types.dot);
        }
      };
      pp$9.readToken_slash = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (this.exprAllowed) {
          ++this.pos;
          return this.readRegexp();
        }
        if (next === 61) {
          return this.finishOp(types.assign, 2);
        }
        return this.finishOp(types.slash, 1);
      };
      pp$9.readToken_mult_modulo_exp = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        var size = 1;
        var tokentype = code === 42 ? types.star : types.modulo;
        if (this.options.ecmaVersion >= 7 && code === 42 && next === 42) {
          ++size;
          tokentype = types.starstar;
          next = this.input.charCodeAt(this.pos + 2);
        }
        if (next === 61) {
          return this.finishOp(types.assign, size + 1);
        }
        return this.finishOp(tokentype, size);
      };
      pp$9.readToken_pipe_amp = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code) {
          if (this.options.ecmaVersion >= 12) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 === 61) {
              return this.finishOp(types.assign, 3);
            }
          }
          return this.finishOp(code === 124 ? types.logicalOR : types.logicalAND, 2);
        }
        if (next === 61) {
          return this.finishOp(types.assign, 2);
        }
        return this.finishOp(code === 124 ? types.bitwiseOR : types.bitwiseAND, 1);
      };
      pp$9.readToken_caret = function() {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 61) {
          return this.finishOp(types.assign, 2);
        }
        return this.finishOp(types.bitwiseXOR, 1);
      };
      pp$9.readToken_plus_min = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === code) {
          if (next === 45 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 62 && (this.lastTokEnd === 0 || lineBreak.test(this.input.slice(this.lastTokEnd, this.pos)))) {
            this.skipLineComment(3);
            this.skipSpace();
            return this.nextToken();
          }
          return this.finishOp(types.incDec, 2);
        }
        if (next === 61) {
          return this.finishOp(types.assign, 2);
        }
        return this.finishOp(types.plusMin, 1);
      };
      pp$9.readToken_lt_gt = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        var size = 1;
        if (next === code) {
          size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2;
          if (this.input.charCodeAt(this.pos + size) === 61) {
            return this.finishOp(types.assign, size + 1);
          }
          return this.finishOp(types.bitShift, size);
        }
        if (next === 33 && code === 60 && !this.inModule && this.input.charCodeAt(this.pos + 2) === 45 && this.input.charCodeAt(this.pos + 3) === 45) {
          this.skipLineComment(4);
          this.skipSpace();
          return this.nextToken();
        }
        if (next === 61) {
          size = 2;
        }
        return this.finishOp(types.relational, size);
      };
      pp$9.readToken_eq_excl = function(code) {
        var next = this.input.charCodeAt(this.pos + 1);
        if (next === 61) {
          return this.finishOp(types.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2);
        }
        if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) {
          this.pos += 2;
          return this.finishToken(types.arrow);
        }
        return this.finishOp(code === 61 ? types.eq : types.prefix, 1);
      };
      pp$9.readToken_question = function() {
        var ecmaVersion = this.options.ecmaVersion;
        if (ecmaVersion >= 11) {
          var next = this.input.charCodeAt(this.pos + 1);
          if (next === 46) {
            var next2 = this.input.charCodeAt(this.pos + 2);
            if (next2 < 48 || next2 > 57) {
              return this.finishOp(types.questionDot, 2);
            }
          }
          if (next === 63) {
            if (ecmaVersion >= 12) {
              var next2$1 = this.input.charCodeAt(this.pos + 2);
              if (next2$1 === 61) {
                return this.finishOp(types.assign, 3);
              }
            }
            return this.finishOp(types.coalesce, 2);
          }
        }
        return this.finishOp(types.question, 1);
      };
      pp$9.getTokenFromCode = function(code) {
        switch (code) {
          case 46:
            return this.readToken_dot();
          case 40:
            ++this.pos;
            return this.finishToken(types.parenL);
          case 41:
            ++this.pos;
            return this.finishToken(types.parenR);
          case 59:
            ++this.pos;
            return this.finishToken(types.semi);
          case 44:
            ++this.pos;
            return this.finishToken(types.comma);
          case 91:
            ++this.pos;
            return this.finishToken(types.bracketL);
          case 93:
            ++this.pos;
            return this.finishToken(types.bracketR);
          case 123:
            ++this.pos;
            return this.finishToken(types.braceL);
          case 125:
            ++this.pos;
            return this.finishToken(types.braceR);
          case 58:
            ++this.pos;
            return this.finishToken(types.colon);
          case 96:
            if (this.options.ecmaVersion < 6) {
              break;
            }
            ++this.pos;
            return this.finishToken(types.backQuote);
          case 48:
            var next = this.input.charCodeAt(this.pos + 1);
            if (next === 120 || next === 88) {
              return this.readRadixNumber(16);
            }
            if (this.options.ecmaVersion >= 6) {
              if (next === 111 || next === 79) {
                return this.readRadixNumber(8);
              }
              if (next === 98 || next === 66) {
                return this.readRadixNumber(2);
              }
            }
          case 49:
          case 50:
          case 51:
          case 52:
          case 53:
          case 54:
          case 55:
          case 56:
          case 57:
            return this.readNumber(false);
          case 34:
          case 39:
            return this.readString(code);
          case 47:
            return this.readToken_slash();
          case 37:
          case 42:
            return this.readToken_mult_modulo_exp(code);
          case 124:
          case 38:
            return this.readToken_pipe_amp(code);
          case 94:
            return this.readToken_caret();
          case 43:
          case 45:
            return this.readToken_plus_min(code);
          case 60:
          case 62:
            return this.readToken_lt_gt(code);
          case 61:
          case 33:
            return this.readToken_eq_excl(code);
          case 63:
            return this.readToken_question();
          case 126:
            return this.finishOp(types.prefix, 1);
        }
        this.raise(this.pos, "Unexpected character '" + codePointToString$1(code) + "'");
      };
      pp$9.finishOp = function(type, size) {
        var str = this.input.slice(this.pos, this.pos + size);
        this.pos += size;
        return this.finishToken(type, str);
      };
      pp$9.readRegexp = function() {
        var escaped, inClass, start = this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(start, "Unterminated regular expression");
          }
          var ch = this.input.charAt(this.pos);
          if (lineBreak.test(ch)) {
            this.raise(start, "Unterminated regular expression");
          }
          if (!escaped) {
            if (ch === "[") {
              inClass = true;
            } else if (ch === "]" && inClass) {
              inClass = false;
            } else if (ch === "/" && !inClass) {
              break;
            }
            escaped = ch === "\\";
          } else {
            escaped = false;
          }
          ++this.pos;
        }
        var pattern = this.input.slice(start, this.pos);
        ++this.pos;
        var flagsStart = this.pos;
        var flags = this.readWord1();
        if (this.containsEsc) {
          this.unexpected(flagsStart);
        }
        var state = this.regexpState || (this.regexpState = new RegExpValidationState(this));
        state.reset(start, pattern, flags);
        this.validateRegExpFlags(state);
        this.validateRegExpPattern(state);
        var value = null;
        try {
          value = new RegExp(pattern, flags);
        } catch (e) {
        }
        return this.finishToken(types.regexp, { pattern, flags, value });
      };
      pp$9.readInt = function(radix, len, maybeLegacyOctalNumericLiteral) {
        var allowSeparators = this.options.ecmaVersion >= 12 && len === void 0;
        var isLegacyOctalNumericLiteral = maybeLegacyOctalNumericLiteral && this.input.charCodeAt(this.pos) === 48;
        var start = this.pos, total = 0, lastCode = 0;
        for (var i = 0, e = len == null ? Infinity : len; i < e; ++i, ++this.pos) {
          var code = this.input.charCodeAt(this.pos), val = void 0;
          if (allowSeparators && code === 95) {
            if (isLegacyOctalNumericLiteral) {
              this.raiseRecoverable(this.pos, "Numeric separator is not allowed in legacy octal numeric literals");
            }
            if (lastCode === 95) {
              this.raiseRecoverable(this.pos, "Numeric separator must be exactly one underscore");
            }
            if (i === 0) {
              this.raiseRecoverable(this.pos, "Numeric separator is not allowed at the first of digits");
            }
            lastCode = code;
            continue;
          }
          if (code >= 97) {
            val = code - 97 + 10;
          } else if (code >= 65) {
            val = code - 65 + 10;
          } else if (code >= 48 && code <= 57) {
            val = code - 48;
          } else {
            val = Infinity;
          }
          if (val >= radix) {
            break;
          }
          lastCode = code;
          total = total * radix + val;
        }
        if (allowSeparators && lastCode === 95) {
          this.raiseRecoverable(this.pos - 1, "Numeric separator is not allowed at the last of digits");
        }
        if (this.pos === start || len != null && this.pos - start !== len) {
          return null;
        }
        return total;
      };
      function stringToNumber(str, isLegacyOctalNumericLiteral) {
        if (isLegacyOctalNumericLiteral) {
          return parseInt(str, 8);
        }
        return parseFloat(str.replace(/_/g, ""));
      }
      function stringToBigInt(str) {
        if (typeof BigInt !== "function") {
          return null;
        }
        return BigInt(str.replace(/_/g, ""));
      }
      pp$9.readRadixNumber = function(radix) {
        var start = this.pos;
        this.pos += 2;
        var val = this.readInt(radix);
        if (val == null) {
          this.raise(this.start + 2, "Expected number in radix " + radix);
        }
        if (this.options.ecmaVersion >= 11 && this.input.charCodeAt(this.pos) === 110) {
          val = stringToBigInt(this.input.slice(start, this.pos));
          ++this.pos;
        } else if (isIdentifierStart(this.fullCharCodeAtPos())) {
          this.raise(this.pos, "Identifier directly after number");
        }
        return this.finishToken(types.num, val);
      };
      pp$9.readNumber = function(startsWithDot) {
        var start = this.pos;
        if (!startsWithDot && this.readInt(10, void 0, true) === null) {
          this.raise(start, "Invalid number");
        }
        var octal = this.pos - start >= 2 && this.input.charCodeAt(start) === 48;
        if (octal && this.strict) {
          this.raise(start, "Invalid number");
        }
        var next = this.input.charCodeAt(this.pos);
        if (!octal && !startsWithDot && this.options.ecmaVersion >= 11 && next === 110) {
          var val$1 = stringToBigInt(this.input.slice(start, this.pos));
          ++this.pos;
          if (isIdentifierStart(this.fullCharCodeAtPos())) {
            this.raise(this.pos, "Identifier directly after number");
          }
          return this.finishToken(types.num, val$1);
        }
        if (octal && /[89]/.test(this.input.slice(start, this.pos))) {
          octal = false;
        }
        if (next === 46 && !octal) {
          ++this.pos;
          this.readInt(10);
          next = this.input.charCodeAt(this.pos);
        }
        if ((next === 69 || next === 101) && !octal) {
          next = this.input.charCodeAt(++this.pos);
          if (next === 43 || next === 45) {
            ++this.pos;
          }
          if (this.readInt(10) === null) {
            this.raise(start, "Invalid number");
          }
        }
        if (isIdentifierStart(this.fullCharCodeAtPos())) {
          this.raise(this.pos, "Identifier directly after number");
        }
        var val = stringToNumber(this.input.slice(start, this.pos), octal);
        return this.finishToken(types.num, val);
      };
      pp$9.readCodePoint = function() {
        var ch = this.input.charCodeAt(this.pos), code;
        if (ch === 123) {
          if (this.options.ecmaVersion < 6) {
            this.unexpected();
          }
          var codePos = ++this.pos;
          code = this.readHexChar(this.input.indexOf("}", this.pos) - this.pos);
          ++this.pos;
          if (code > 1114111) {
            this.invalidStringToken(codePos, "Code point out of bounds");
          }
        } else {
          code = this.readHexChar(4);
        }
        return code;
      };
      function codePointToString$1(code) {
        if (code <= 65535) {
          return String.fromCharCode(code);
        }
        code -= 65536;
        return String.fromCharCode((code >> 10) + 55296, (code & 1023) + 56320);
      }
      pp$9.readString = function(quote) {
        var out = "", chunkStart = ++this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(this.start, "Unterminated string constant");
          }
          var ch = this.input.charCodeAt(this.pos);
          if (ch === quote) {
            break;
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(false);
            chunkStart = this.pos;
          } else {
            if (isNewLine(ch, this.options.ecmaVersion >= 10)) {
              this.raise(this.start, "Unterminated string constant");
            }
            ++this.pos;
          }
        }
        out += this.input.slice(chunkStart, this.pos++);
        return this.finishToken(types.string, out);
      };
      var INVALID_TEMPLATE_ESCAPE_ERROR = {};
      pp$9.tryReadTemplateToken = function() {
        this.inTemplateElement = true;
        try {
          this.readTmplToken();
        } catch (err) {
          if (err === INVALID_TEMPLATE_ESCAPE_ERROR) {
            this.readInvalidTemplateToken();
          } else {
            throw err;
          }
        }
        this.inTemplateElement = false;
      };
      pp$9.invalidStringToken = function(position, message) {
        if (this.inTemplateElement && this.options.ecmaVersion >= 9) {
          throw INVALID_TEMPLATE_ESCAPE_ERROR;
        } else {
          this.raise(position, message);
        }
      };
      pp$9.readTmplToken = function() {
        var out = "", chunkStart = this.pos;
        for (; ; ) {
          if (this.pos >= this.input.length) {
            this.raise(this.start, "Unterminated template");
          }
          var ch = this.input.charCodeAt(this.pos);
          if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) {
            if (this.pos === this.start && (this.type === types.template || this.type === types.invalidTemplate)) {
              if (ch === 36) {
                this.pos += 2;
                return this.finishToken(types.dollarBraceL);
              } else {
                ++this.pos;
                return this.finishToken(types.backQuote);
              }
            }
            out += this.input.slice(chunkStart, this.pos);
            return this.finishToken(types.template, out);
          }
          if (ch === 92) {
            out += this.input.slice(chunkStart, this.pos);
            out += this.readEscapedChar(true);
            chunkStart = this.pos;
          } else if (isNewLine(ch)) {
            out += this.input.slice(chunkStart, this.pos);
            ++this.pos;
            switch (ch) {
              case 13:
                if (this.input.charCodeAt(this.pos) === 10) {
                  ++this.pos;
                }
              case 10:
                out += "\n";
                break;
              default:
                out += String.fromCharCode(ch);
                break;
            }
            if (this.options.locations) {
              ++this.curLine;
              this.lineStart = this.pos;
            }
            chunkStart = this.pos;
          } else {
            ++this.pos;
          }
        }
      };
      pp$9.readInvalidTemplateToken = function() {
        for (; this.pos < this.input.length; this.pos++) {
          switch (this.input[this.pos]) {
            case "\\":
              ++this.pos;
              break;
            case "$":
              if (this.input[this.pos + 1] !== "{") {
                break;
              }
            case "`":
              return this.finishToken(types.invalidTemplate, this.input.slice(this.start, this.pos));
          }
        }
        this.raise(this.start, "Unterminated template");
      };
      pp$9.readEscapedChar = function(inTemplate) {
        var ch = this.input.charCodeAt(++this.pos);
        ++this.pos;
        switch (ch) {
          case 110:
            return "\n";
          case 114:
            return "\r";
          case 120:
            return String.fromCharCode(this.readHexChar(2));
          case 117:
            return codePointToString$1(this.readCodePoint());
          case 116:
            return "	";
          case 98:
            return "\b";
          case 118:
            return "\v";
          case 102:
            return "\f";
          case 13:
            if (this.input.charCodeAt(this.pos) === 10) {
              ++this.pos;
            }
          case 10:
            if (this.options.locations) {
              this.lineStart = this.pos;
              ++this.curLine;
            }
            return "";
          case 56:
          case 57:
            if (inTemplate) {
              var codePos = this.pos - 1;
              this.invalidStringToken(codePos, "Invalid escape sequence in template string");
              return null;
            }
          default:
            if (ch >= 48 && ch <= 55) {
              var octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0];
              var octal = parseInt(octalStr, 8);
              if (octal > 255) {
                octalStr = octalStr.slice(0, -1);
                octal = parseInt(octalStr, 8);
              }
              this.pos += octalStr.length - 1;
              ch = this.input.charCodeAt(this.pos);
              if ((octalStr !== "0" || ch === 56 || ch === 57) && (this.strict || inTemplate)) {
                this.invalidStringToken(this.pos - 1 - octalStr.length, inTemplate ? "Octal literal in template string" : "Octal literal in strict mode");
              }
              return String.fromCharCode(octal);
            }
            if (isNewLine(ch)) {
              return "";
            }
            return String.fromCharCode(ch);
        }
      };
      pp$9.readHexChar = function(len) {
        var codePos = this.pos;
        var n = this.readInt(16, len);
        if (n === null) {
          this.invalidStringToken(codePos, "Bad character escape sequence");
        }
        return n;
      };
      pp$9.readWord1 = function() {
        this.containsEsc = false;
        var word = "", first = true, chunkStart = this.pos;
        var astral = this.options.ecmaVersion >= 6;
        while (this.pos < this.input.length) {
          var ch = this.fullCharCodeAtPos();
          if (isIdentifierChar(ch, astral)) {
            this.pos += ch <= 65535 ? 1 : 2;
          } else if (ch === 92) {
            this.containsEsc = true;
            word += this.input.slice(chunkStart, this.pos);
            var escStart = this.pos;
            if (this.input.charCodeAt(++this.pos) !== 117) {
              this.invalidStringToken(this.pos, "Expecting Unicode escape sequence \\uXXXX");
            }
            ++this.pos;
            var esc = this.readCodePoint();
            if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral)) {
              this.invalidStringToken(escStart, "Invalid Unicode escape");
            }
            word += codePointToString$1(esc);
            chunkStart = this.pos;
          } else {
            break;
          }
          first = false;
        }
        return word + this.input.slice(chunkStart, this.pos);
      };
      pp$9.readWord = function() {
        var word = this.readWord1();
        var type = types.name;
        if (this.keywords.test(word)) {
          type = keywords$1[word];
        }
        return this.finishToken(type, word);
      };
      var version = "7.4.1";
      Parser.acorn = {
        Parser,
        version,
        defaultOptions,
        Position,
        SourceLocation,
        getLineInfo,
        Node,
        TokenType,
        tokTypes: types,
        keywordTypes: keywords$1,
        TokContext,
        tokContexts: types$1,
        isIdentifierChar,
        isIdentifierStart,
        Token,
        isNewLine,
        lineBreak,
        lineBreakG,
        nonASCIIwhitespace
      };
      function parse3(input, options) {
        return Parser.parse(input, options);
      }
      function parseExpressionAt(input, pos, options) {
        return Parser.parseExpressionAt(input, pos, options);
      }
      function tokenizer(input, options) {
        return Parser.tokenizer(input, options);
      }
      exports2.Node = Node;
      exports2.Parser = Parser;
      exports2.Position = Position;
      exports2.SourceLocation = SourceLocation;
      exports2.TokContext = TokContext;
      exports2.Token = Token;
      exports2.TokenType = TokenType;
      exports2.defaultOptions = defaultOptions;
      exports2.getLineInfo = getLineInfo;
      exports2.isIdentifierChar = isIdentifierChar;
      exports2.isIdentifierStart = isIdentifierStart;
      exports2.isNewLine = isNewLine;
      exports2.keywordTypes = keywords$1;
      exports2.lineBreak = lineBreak;
      exports2.lineBreakG = lineBreakG;
      exports2.nonASCIIwhitespace = nonASCIIwhitespace;
      exports2.parse = parse3;
      exports2.parseExpressionAt = parseExpressionAt;
      exports2.tokContexts = types$1;
      exports2.tokTypes = types;
      exports2.tokenizer = tokenizer;
      exports2.version = version;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js
var require_object_assign = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/object-assign@4.1.1/node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/.pnpm/is-expression@4.0.0/node_modules/is-expression/index.js
var require_is_expression = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/is-expression@4.0.0/node_modules/is-expression/index.js"(exports, module) {
    "use strict";
    var acorn = require_acorn();
    var objectAssign = require_object_assign();
    module.exports = isExpression;
    var DEFAULT_OPTIONS = {
      throw: false,
      strict: false,
      lineComment: false
    };
    function isExpression(src, options) {
      options = objectAssign({}, DEFAULT_OPTIONS, options);
      try {
        var parser = new acorn.Parser(options, src, 0);
        if (options.strict) {
          parser.strict = true;
        }
        if (!options.lineComment) {
          parser.skipLineComment = function(startSkip) {
            this.raise(this.pos, "Line comments not allowed in an expression");
          };
        }
        parser.nextToken();
        parser.parseExpression();
        if (parser.type !== acorn.tokTypes.eof) {
          parser.unexpected();
        }
      } catch (ex) {
        if (!options.throw) {
          return false;
        }
        throw ex;
      }
      return true;
    }
  }
});

// node_modules/.pnpm/has-symbols@1.0.2/node_modules/has-symbols/shams.js
var require_shams = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/has-symbols@1.0.2/node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/.pnpm/has-symbols@1.0.2/node_modules/has-symbols/index.js
var require_has_symbols = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/has-symbols@1.0.2/node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/implementation.js
var require_implementation = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var slice = Array.prototype.slice;
    var toStr = Object.prototype.toString;
    var funcType = "[object Function]";
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr.call(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slice.call(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(this, args.concat(slice.call(arguments)));
          if (Object(result) === result) {
            return result;
          }
          return this;
        } else {
          return target.apply(that, args.concat(slice.call(arguments)));
        }
      };
      var boundLength = Math.max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs.push("$" + i);
      }
      bound = Function("binder", "return function (" + boundArgs.join(",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty = function Empty2() {
        };
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/index.js
var require_function_bind = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/function-bind@1.1.1/node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/.pnpm/has@1.0.3/node_modules/has/src/index.js
var require_src = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/has@1.0.3/node_modules/has/src/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    module.exports = bind.call(Function.call, Object.prototype.hasOwnProperty);
  }
});

// node_modules/.pnpm/get-intrinsic@1.1.1/node_modules/get-intrinsic/index.js
var require_get_intrinsic = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/get-intrinsic@1.1.1/node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    var undefined2;
    var $SyntaxError = SyntaxError;
    var $Function = Function;
    var $TypeError = TypeError;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var getProto = Object.getPrototypeOf || function(x) {
      return x.__proto__;
    };
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": Error,
      "%eval%": eval,
      "%EvalError%": EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols ? undefined2 : getProto(new Map()[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": RangeError,
      "%ReferenceError%": ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols ? undefined2 : getProto(new Set()[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen = doEval2("%AsyncGenerator%");
        if (gen) {
          value = getProto(gen.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_src();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/index.js
var require_call_bind = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true);
    var $max = GetIntrinsic("%Math.max%");
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = null;
      }
    }
    module.exports = function callBind(originalFunction) {
      var func = $reflectApply(bind, $call, arguments);
      if ($gOPD && $defineProperty) {
        var desc = $gOPD(func, "length");
        if (desc.configurable) {
          $defineProperty(func, "length", { value: 1 + $max(0, originalFunction.length - (arguments.length - 1)) });
        }
      }
      return func;
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  }
});

// node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/callBound.js
var require_callBound = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/call-bind@1.0.2/node_modules/call-bind/callBound.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/.pnpm/has-tostringtag@1.0.0/node_modules/has-tostringtag/shams.js
var require_shams2 = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/has-tostringtag@1.0.0/node_modules/has-tostringtag/shams.js"(exports, module) {
    "use strict";
    var hasSymbols = require_shams();
    module.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// node_modules/.pnpm/is-regex@1.1.4/node_modules/is-regex/index.js
var require_is_regex = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/is-regex@1.1.4/node_modules/is-regex/index.js"(exports, module) {
    "use strict";
    var callBound = require_callBound();
    var hasToStringTag = require_shams2()();
    var has;
    var $exec;
    var isRegexMarker;
    var badStringifier;
    if (hasToStringTag) {
      has = callBound("Object.prototype.hasOwnProperty");
      $exec = callBound("RegExp.prototype.exec");
      isRegexMarker = {};
      throwRegexMarker = function() {
        throw isRegexMarker;
      };
      badStringifier = {
        toString: throwRegexMarker,
        valueOf: throwRegexMarker
      };
      if (typeof Symbol.toPrimitive === "symbol") {
        badStringifier[Symbol.toPrimitive] = throwRegexMarker;
      }
    }
    var throwRegexMarker;
    var $toString = callBound("Object.prototype.toString");
    var gOPD = Object.getOwnPropertyDescriptor;
    var regexClass = "[object RegExp]";
    module.exports = hasToStringTag ? function isRegex(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      var descriptor = gOPD(value, "lastIndex");
      var hasLastIndexDataProperty = descriptor && has(descriptor, "value");
      if (!hasLastIndexDataProperty) {
        return false;
      }
      try {
        $exec(value, badStringifier);
      } catch (e) {
        return e === isRegexMarker;
      }
    } : function isRegex(value) {
      if (!value || typeof value !== "object" && typeof value !== "function") {
        return false;
      }
      return $toString(value) === regexClass;
    };
  }
});

// node_modules/.pnpm/character-parser@2.2.0/node_modules/character-parser/index.js
var require_character_parser = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/character-parser@2.2.0/node_modules/character-parser/index.js"(exports, module) {
    "use strict";
    var objIsRegex = require_is_regex();
    exports = module.exports = parse3;
    var TOKEN_TYPES = exports.TOKEN_TYPES = {
      LINE_COMMENT: "//",
      BLOCK_COMMENT: "/**/",
      SINGLE_QUOTE: "'",
      DOUBLE_QUOTE: '"',
      TEMPLATE_QUOTE: "`",
      REGEXP: "//g"
    };
    var BRACKETS = exports.BRACKETS = {
      "(": ")",
      "{": "}",
      "[": "]"
    };
    var BRACKETS_REVERSED = {
      ")": "(",
      "}": "{",
      "]": "["
    };
    exports.parse = parse3;
    function parse3(src, state, options) {
      options = options || {};
      state = state || exports.defaultState();
      var start = options.start || 0;
      var end = options.end || src.length;
      var index = start;
      while (index < end) {
        try {
          parseChar(src[index], state);
        } catch (ex) {
          ex.index = index;
          throw ex;
        }
        index++;
      }
      return state;
    }
    exports.parseUntil = parseUntil;
    function parseUntil(src, delimiter, options) {
      options = options || {};
      var start = options.start || 0;
      var index = start;
      var state = exports.defaultState();
      while (index < src.length) {
        if ((options.ignoreNesting || !state.isNesting(options)) && matches(src, delimiter, index)) {
          var end = index;
          return {
            start,
            end,
            src: src.substring(start, end)
          };
        }
        try {
          parseChar(src[index], state);
        } catch (ex) {
          ex.index = index;
          throw ex;
        }
        index++;
      }
      var err = new Error("The end of the string was reached with no closing bracket found.");
      err.code = "CHARACTER_PARSER:END_OF_STRING_REACHED";
      err.index = index;
      throw err;
    }
    exports.parseChar = parseChar;
    function parseChar(character, state) {
      if (character.length !== 1) {
        var err = new Error("Character must be a string of length 1");
        err.name = "InvalidArgumentError";
        err.code = "CHARACTER_PARSER:CHAR_LENGTH_NOT_ONE";
        throw err;
      }
      state = state || exports.defaultState();
      state.src += character;
      var wasComment = state.isComment();
      var lastChar = state.history ? state.history[0] : "";
      if (state.regexpStart) {
        if (character === "/" || character == "*") {
          state.stack.pop();
        }
        state.regexpStart = false;
      }
      switch (state.current()) {
        case TOKEN_TYPES.LINE_COMMENT:
          if (character === "\n") {
            state.stack.pop();
          }
          break;
        case TOKEN_TYPES.BLOCK_COMMENT:
          if (state.lastChar === "*" && character === "/") {
            state.stack.pop();
          }
          break;
        case TOKEN_TYPES.SINGLE_QUOTE:
          if (character === "'" && !state.escaped) {
            state.stack.pop();
          } else if (character === "\\" && !state.escaped) {
            state.escaped = true;
          } else {
            state.escaped = false;
          }
          break;
        case TOKEN_TYPES.DOUBLE_QUOTE:
          if (character === '"' && !state.escaped) {
            state.stack.pop();
          } else if (character === "\\" && !state.escaped) {
            state.escaped = true;
          } else {
            state.escaped = false;
          }
          break;
        case TOKEN_TYPES.TEMPLATE_QUOTE:
          if (character === "`" && !state.escaped) {
            state.stack.pop();
            state.hasDollar = false;
          } else if (character === "\\" && !state.escaped) {
            state.escaped = true;
            state.hasDollar = false;
          } else if (character === "$" && !state.escaped) {
            state.hasDollar = true;
          } else if (character === "{" && state.hasDollar) {
            state.stack.push(BRACKETS[character]);
          } else {
            state.escaped = false;
            state.hasDollar = false;
          }
          break;
        case TOKEN_TYPES.REGEXP:
          if (character === "/" && !state.escaped) {
            state.stack.pop();
          } else if (character === "\\" && !state.escaped) {
            state.escaped = true;
          } else {
            state.escaped = false;
          }
          break;
        default:
          if (character in BRACKETS) {
            state.stack.push(BRACKETS[character]);
          } else if (character in BRACKETS_REVERSED) {
            if (state.current() !== character) {
              var err = new SyntaxError("Mismatched Bracket: " + character);
              err.code = "CHARACTER_PARSER:MISMATCHED_BRACKET";
              throw err;
            }
            ;
            state.stack.pop();
          } else if (lastChar === "/" && character === "/") {
            state.history = state.history.substr(1);
            state.stack.push(TOKEN_TYPES.LINE_COMMENT);
          } else if (lastChar === "/" && character === "*") {
            state.history = state.history.substr(1);
            state.stack.push(TOKEN_TYPES.BLOCK_COMMENT);
          } else if (character === "/" && isRegexp(state.history)) {
            state.stack.push(TOKEN_TYPES.REGEXP);
            state.regexpStart = true;
          } else if (character === "'") {
            state.stack.push(TOKEN_TYPES.SINGLE_QUOTE);
          } else if (character === '"') {
            state.stack.push(TOKEN_TYPES.DOUBLE_QUOTE);
          } else if (character === "`") {
            state.stack.push(TOKEN_TYPES.TEMPLATE_QUOTE);
          }
          break;
      }
      if (!state.isComment() && !wasComment) {
        state.history = character + state.history;
      }
      state.lastChar = character;
      return state;
    }
    exports.defaultState = function() {
      return new State();
    };
    function State() {
      this.stack = [];
      this.regexpStart = false;
      this.escaped = false;
      this.hasDollar = false;
      this.src = "";
      this.history = "";
      this.lastChar = "";
    }
    State.prototype.current = function() {
      return this.stack[this.stack.length - 1];
    };
    State.prototype.isString = function() {
      return this.current() === TOKEN_TYPES.SINGLE_QUOTE || this.current() === TOKEN_TYPES.DOUBLE_QUOTE || this.current() === TOKEN_TYPES.TEMPLATE_QUOTE;
    };
    State.prototype.isComment = function() {
      return this.current() === TOKEN_TYPES.LINE_COMMENT || this.current() === TOKEN_TYPES.BLOCK_COMMENT;
    };
    State.prototype.isNesting = function(opts) {
      if (opts && opts.ignoreLineComment && this.stack.length === 1 && this.stack[0] === TOKEN_TYPES.LINE_COMMENT) {
        return false;
      }
      return !!this.stack.length;
    };
    function matches(str, matcher, i) {
      if (objIsRegex(matcher)) {
        return matcher.test(str.substr(i || 0));
      } else {
        return str.substr(i || 0, matcher.length) === matcher;
      }
    }
    exports.isPunctuator = isPunctuator;
    function isPunctuator(c) {
      if (!c)
        return true;
      var code = c.charCodeAt(0);
      switch (code) {
        case 46:
        case 40:
        case 41:
        case 59:
        case 44:
        case 123:
        case 125:
        case 91:
        case 93:
        case 58:
        case 63:
        case 126:
        case 37:
        case 38:
        case 42:
        case 43:
        case 45:
        case 47:
        case 60:
        case 62:
        case 94:
        case 124:
        case 33:
        case 61:
          return true;
        default:
          return false;
      }
    }
    exports.isKeyword = isKeyword;
    function isKeyword(id) {
      return id === "if" || id === "in" || id === "do" || id === "var" || id === "for" || id === "new" || id === "try" || id === "let" || id === "this" || id === "else" || id === "case" || id === "void" || id === "with" || id === "enum" || id === "while" || id === "break" || id === "catch" || id === "throw" || id === "const" || id === "yield" || id === "class" || id === "super" || id === "return" || id === "typeof" || id === "delete" || id === "switch" || id === "export" || id === "import" || id === "default" || id === "finally" || id === "extends" || id === "function" || id === "continue" || id === "debugger" || id === "package" || id === "private" || id === "interface" || id === "instanceof" || id === "implements" || id === "protected" || id === "public" || id === "static";
    }
    function isRegexp(history) {
      history = history.replace(/^\s*/, "");
      if (history[0] === ")")
        return false;
      if (history[0] === "}")
        return true;
      if (isPunctuator(history[0]))
        return true;
      if (/^\w+\b/.test(history) && isKeyword(/^\w+\b/.exec(history)[0].split("").reverse().join("")))
        return true;
      return false;
    }
  }
});

// node_modules/.pnpm/pug-error@2.0.0/node_modules/pug-error/index.js
var require_pug_error = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-error@2.0.0/node_modules/pug-error/index.js"(exports, module) {
    "use strict";
    module.exports = makeError;
    function makeError(code, message, options) {
      var line = options.line;
      var column = options.column;
      var filename = options.filename;
      var src = options.src;
      var fullMessage;
      var location = line + (column ? ":" + column : "");
      if (src && line >= 1 && line <= src.split("\n").length) {
        var lines = src.split("\n");
        var start = Math.max(line - 3, 0);
        var end = Math.min(lines.length, line + 3);
        var context = lines.slice(start, end).map(function(text, i) {
          var curr = i + start + 1;
          var preamble = (curr == line ? "  > " : "    ") + curr + "| ";
          var out = preamble + text;
          if (curr === line && column > 0) {
            out += "\n";
            out += Array(preamble.length + column).join("-") + "^";
          }
          return out;
        }).join("\n");
        fullMessage = (filename || "Pug") + ":" + location + "\n" + context + "\n\n" + message;
      } else {
        fullMessage = (filename || "Pug") + ":" + location + "\n\n" + message;
      }
      var err = new Error(fullMessage);
      err.code = "PUG:" + code;
      err.msg = message;
      err.line = line;
      err.column = column;
      err.filename = filename;
      err.src = src;
      err.toJSON = function() {
        return {
          code: this.code,
          msg: this.msg,
          line: this.line,
          column: this.column,
          filename: this.filename
        };
      };
      return err;
    }
  }
});

// node_modules/.pnpm/pug-lexer@5.0.1/node_modules/pug-lexer/index.js
var require_pug_lexer = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-lexer@5.0.1/node_modules/pug-lexer/index.js"(exports, module) {
    "use strict";
    var assert = _chunkDUTQDV3Qjs.__require.call(void 0, "assert");
    var isExpression = require_is_expression();
    var characterParser = require_character_parser();
    var error = require_pug_error();
    module.exports = lex;
    module.exports.Lexer = Lexer;
    function lex(str, options) {
      var lexer = new Lexer(str, options);
      return JSON.parse(JSON.stringify(lexer.getTokens()));
    }
    function Lexer(str, options) {
      options = options || {};
      if (typeof str !== "string") {
        throw new Error('Expected source code to be a string but got "' + typeof str + '"');
      }
      if (typeof options !== "object") {
        throw new Error('Expected "options" to be an object but got "' + typeof options + '"');
      }
      str = str.replace(/^\uFEFF/, "");
      this.input = str.replace(/\r\n|\r/g, "\n");
      this.originalInput = this.input;
      this.filename = options.filename;
      this.interpolated = options.interpolated || false;
      this.lineno = options.startingLine || 1;
      this.colno = options.startingColumn || 1;
      this.plugins = options.plugins || [];
      this.indentStack = [0];
      this.indentRe = null;
      this.interpolationAllowed = true;
      this.whitespaceRe = /[ \n\t]/;
      this.tokens = [];
      this.ended = false;
    }
    Lexer.prototype = {
      constructor: Lexer,
      error: function(code, message) {
        var err = error(code, message, {
          line: this.lineno,
          column: this.colno,
          filename: this.filename,
          src: this.originalInput
        });
        throw err;
      },
      assert: function(value, message) {
        if (!value)
          this.error("ASSERT_FAILED", message);
      },
      isExpression: function(exp) {
        return isExpression(exp, {
          throw: true
        });
      },
      assertExpression: function(exp, noThrow) {
        try {
          this.callLexerFunction("isExpression", exp);
          return true;
        } catch (ex) {
          if (noThrow)
            return false;
          if (!ex.loc)
            throw ex;
          this.incrementLine(ex.loc.line - 1);
          this.incrementColumn(ex.loc.column);
          var msg = "Syntax Error: " + ex.message.replace(/ \([0-9]+:[0-9]+\)$/, "");
          this.error("SYNTAX_ERROR", msg);
        }
      },
      assertNestingCorrect: function(exp) {
        var res = characterParser(exp);
        if (res.isNesting()) {
          this.error("INCORRECT_NESTING", "Nesting must match on expression `" + exp + "`");
        }
      },
      tok: function(type, val) {
        var res = {
          type,
          loc: {
            start: {
              line: this.lineno,
              column: this.colno
            },
            filename: this.filename
          }
        };
        if (val !== void 0)
          res.val = val;
        return res;
      },
      tokEnd: function(tok) {
        tok.loc.end = {
          line: this.lineno,
          column: this.colno
        };
        return tok;
      },
      incrementLine: function(increment) {
        this.lineno += increment;
        if (increment)
          this.colno = 1;
      },
      incrementColumn: function(increment) {
        this.colno += increment;
      },
      consume: function(len) {
        this.input = this.input.substr(len);
      },
      scan: function(regexp, type) {
        var captures;
        if (captures = regexp.exec(this.input)) {
          var len = captures[0].length;
          var val = captures[1];
          var diff = len - (val ? val.length : 0);
          var tok = this.tok(type, val);
          this.consume(len);
          this.incrementColumn(diff);
          return tok;
        }
      },
      scanEndOfLine: function(regexp, type) {
        var captures;
        if (captures = regexp.exec(this.input)) {
          var whitespaceLength = 0;
          var whitespace;
          var tok;
          if (whitespace = /^([ ]+)([^ ]*)/.exec(captures[0])) {
            whitespaceLength = whitespace[1].length;
            this.incrementColumn(whitespaceLength);
          }
          var newInput = this.input.substr(captures[0].length);
          if (newInput[0] === ":") {
            this.input = newInput;
            tok = this.tok(type, captures[1]);
            this.incrementColumn(captures[0].length - whitespaceLength);
            return tok;
          }
          if (/^[ \t]*(\n|$)/.test(newInput)) {
            this.input = newInput.substr(/^[ \t]*/.exec(newInput)[0].length);
            tok = this.tok(type, captures[1]);
            this.incrementColumn(captures[0].length - whitespaceLength);
            return tok;
          }
        }
      },
      bracketExpression: function(skip) {
        skip = skip || 0;
        var start = this.input[skip];
        assert(start === "(" || start === "{" || start === "[", 'The start character should be "(", "{" or "["');
        var end = characterParser.BRACKETS[start];
        var range;
        try {
          range = characterParser.parseUntil(this.input, end, { start: skip + 1 });
        } catch (ex) {
          if (ex.index !== void 0) {
            var idx = ex.index;
            var tmp = this.input.substr(skip).indexOf("\n");
            var nextNewline = tmp + skip;
            var ptr = 0;
            while (idx > nextNewline && tmp !== -1) {
              this.incrementLine(1);
              idx -= nextNewline + 1;
              ptr += nextNewline + 1;
              tmp = nextNewline = this.input.substr(ptr).indexOf("\n");
            }
            this.incrementColumn(idx);
          }
          if (ex.code === "CHARACTER_PARSER:END_OF_STRING_REACHED") {
            this.error("NO_END_BRACKET", "The end of the string reached with no closing bracket " + end + " found.");
          } else if (ex.code === "CHARACTER_PARSER:MISMATCHED_BRACKET") {
            this.error("BRACKET_MISMATCH", ex.message);
          }
          throw ex;
        }
        return range;
      },
      scanIndentation: function() {
        var captures, re;
        if (this.indentRe) {
          captures = this.indentRe.exec(this.input);
        } else {
          re = /^\n(\t*) */;
          captures = re.exec(this.input);
          if (captures && !captures[1].length) {
            re = /^\n( *)/;
            captures = re.exec(this.input);
          }
          if (captures && captures[1].length)
            this.indentRe = re;
        }
        return captures;
      },
      eos: function() {
        if (this.input.length)
          return;
        if (this.interpolated) {
          this.error("NO_END_BRACKET", "End of line was reached with no closing bracket for interpolation.");
        }
        for (var i = 0; this.indentStack[i]; i++) {
          this.tokens.push(this.tokEnd(this.tok("outdent")));
        }
        this.tokens.push(this.tokEnd(this.tok("eos")));
        this.ended = true;
        return true;
      },
      blank: function() {
        var captures;
        if (captures = /^\n[ \t]*\n/.exec(this.input)) {
          this.consume(captures[0].length - 1);
          this.incrementLine(1);
          return true;
        }
      },
      comment: function() {
        var captures;
        if (captures = /^\/\/(-)?([^\n]*)/.exec(this.input)) {
          this.consume(captures[0].length);
          var tok = this.tok("comment", captures[2]);
          tok.buffer = captures[1] != "-";
          this.interpolationAllowed = tok.buffer;
          this.tokens.push(tok);
          this.incrementColumn(captures[0].length);
          this.tokEnd(tok);
          this.callLexerFunction("pipelessText");
          return true;
        }
      },
      interpolation: function() {
        if (/^#\{/.test(this.input)) {
          var match = this.bracketExpression(1);
          this.consume(match.end + 1);
          var tok = this.tok("interpolation", match.src);
          this.tokens.push(tok);
          this.incrementColumn(2);
          this.assertExpression(match.src);
          var splitted = match.src.split("\n");
          var lines = splitted.length - 1;
          this.incrementLine(lines);
          this.incrementColumn(splitted[lines].length + 1);
          this.tokEnd(tok);
          return true;
        }
      },
      tag: function() {
        var captures;
        if (captures = /^(\w(?:[-:\w]*\w)?)/.exec(this.input)) {
          var tok, name = captures[1], len = captures[0].length;
          this.consume(len);
          tok = this.tok("tag", name);
          this.tokens.push(tok);
          this.incrementColumn(len);
          this.tokEnd(tok);
          return true;
        }
      },
      filter: function(opts) {
        var tok = this.scan(/^:([\w\-]+)/, "filter");
        var inInclude = opts && opts.inInclude;
        if (tok) {
          this.tokens.push(tok);
          this.incrementColumn(tok.val.length);
          this.tokEnd(tok);
          this.callLexerFunction("attrs");
          if (!inInclude) {
            this.interpolationAllowed = false;
            this.callLexerFunction("pipelessText");
          }
          return true;
        }
      },
      doctype: function() {
        var node = this.scanEndOfLine(/^doctype *([^\n]*)/, "doctype");
        if (node) {
          this.tokens.push(this.tokEnd(node));
          return true;
        }
      },
      id: function() {
        var tok = this.scan(/^#([\w-]+)/, "id");
        if (tok) {
          this.tokens.push(tok);
          this.incrementColumn(tok.val.length);
          this.tokEnd(tok);
          return true;
        }
        if (/^#/.test(this.input)) {
          this.error("INVALID_ID", '"' + /.[^ \t\(\#\.\:]*/.exec(this.input.substr(1))[0] + '" is not a valid ID.');
        }
      },
      className: function() {
        var tok = this.scan(/^\.([_a-z0-9\-]*[_a-z][_a-z0-9\-]*)/i, "class");
        if (tok) {
          this.tokens.push(tok);
          this.incrementColumn(tok.val.length);
          this.tokEnd(tok);
          return true;
        }
        if (/^\.[_a-z0-9\-]+/i.test(this.input)) {
          this.error("INVALID_CLASS_NAME", "Class names must contain at least one letter or underscore.");
        }
        if (/^\./.test(this.input)) {
          this.error("INVALID_CLASS_NAME", '"' + /.[^ \t\(\#\.\:]*/.exec(this.input.substr(1))[0] + '" is not a valid class name.  Class names can only contain "_", "-", a-z and 0-9, and must contain at least one of "_", or a-z');
        }
      },
      endInterpolation: function() {
        if (this.interpolated && this.input[0] === "]") {
          this.input = this.input.substr(1);
          this.ended = true;
          return true;
        }
      },
      addText: function(type, value, prefix, escaped) {
        var tok;
        if (value + prefix === "")
          return;
        prefix = prefix || "";
        escaped = escaped || 0;
        var indexOfEnd = this.interpolated ? value.indexOf("]") : -1;
        var indexOfStart = this.interpolationAllowed ? value.indexOf("#[") : -1;
        var indexOfEscaped = this.interpolationAllowed ? value.indexOf("\\#[") : -1;
        var matchOfStringInterp = /(\\)?([#!]){((?:.|\n)*)$/.exec(value);
        var indexOfStringInterp = this.interpolationAllowed && matchOfStringInterp ? matchOfStringInterp.index : Infinity;
        if (indexOfEnd === -1)
          indexOfEnd = Infinity;
        if (indexOfStart === -1)
          indexOfStart = Infinity;
        if (indexOfEscaped === -1)
          indexOfEscaped = Infinity;
        if (indexOfEscaped !== Infinity && indexOfEscaped < indexOfEnd && indexOfEscaped < indexOfStart && indexOfEscaped < indexOfStringInterp) {
          prefix = prefix + value.substring(0, indexOfEscaped) + "#[";
          return this.addText(type, value.substring(indexOfEscaped + 3), prefix, escaped + 1);
        }
        if (indexOfStart !== Infinity && indexOfStart < indexOfEnd && indexOfStart < indexOfEscaped && indexOfStart < indexOfStringInterp) {
          tok = this.tok(type, prefix + value.substring(0, indexOfStart));
          this.incrementColumn(prefix.length + indexOfStart + escaped);
          this.tokens.push(this.tokEnd(tok));
          tok = this.tok("start-pug-interpolation");
          this.incrementColumn(2);
          this.tokens.push(this.tokEnd(tok));
          var child = new this.constructor(value.substr(indexOfStart + 2), {
            filename: this.filename,
            interpolated: true,
            startingLine: this.lineno,
            startingColumn: this.colno,
            plugins: this.plugins
          });
          var interpolated;
          try {
            interpolated = child.getTokens();
          } catch (ex) {
            if (ex.code && /^PUG:/.test(ex.code)) {
              this.colno = ex.column;
              this.error(ex.code.substr(4), ex.msg);
            }
            throw ex;
          }
          this.colno = child.colno;
          this.tokens = this.tokens.concat(interpolated);
          tok = this.tok("end-pug-interpolation");
          this.incrementColumn(1);
          this.tokens.push(this.tokEnd(tok));
          this.addText(type, child.input);
          return;
        }
        if (indexOfEnd !== Infinity && indexOfEnd < indexOfStart && indexOfEnd < indexOfEscaped && indexOfEnd < indexOfStringInterp) {
          if (prefix + value.substring(0, indexOfEnd)) {
            this.addText(type, value.substring(0, indexOfEnd), prefix);
          }
          this.ended = true;
          this.input = value.substr(value.indexOf("]") + 1) + this.input;
          return;
        }
        if (indexOfStringInterp !== Infinity) {
          if (matchOfStringInterp[1]) {
            prefix = prefix + value.substring(0, indexOfStringInterp) + matchOfStringInterp[2] + "{";
            return this.addText(type, value.substring(indexOfStringInterp + 3), prefix, escaped + 1);
          }
          var before = value.substr(0, indexOfStringInterp);
          if (prefix || before) {
            before = prefix + before;
            tok = this.tok(type, before);
            this.incrementColumn(before.length + escaped);
            this.tokens.push(this.tokEnd(tok));
          }
          var rest = matchOfStringInterp[3];
          var range;
          tok = this.tok("interpolated-code");
          this.incrementColumn(2);
          try {
            range = characterParser.parseUntil(rest, "}");
          } catch (ex) {
            if (ex.index !== void 0) {
              this.incrementColumn(ex.index);
            }
            if (ex.code === "CHARACTER_PARSER:END_OF_STRING_REACHED") {
              this.error("NO_END_BRACKET", "End of line was reached with no closing bracket for interpolation.");
            } else if (ex.code === "CHARACTER_PARSER:MISMATCHED_BRACKET") {
              this.error("BRACKET_MISMATCH", ex.message);
            } else {
              throw ex;
            }
          }
          tok.mustEscape = matchOfStringInterp[2] === "#";
          tok.buffer = true;
          tok.val = range.src;
          this.assertExpression(range.src);
          if (range.end + 1 < rest.length) {
            rest = rest.substr(range.end + 1);
            this.incrementColumn(range.end + 1);
            this.tokens.push(this.tokEnd(tok));
            this.addText(type, rest);
          } else {
            this.incrementColumn(rest.length);
            this.tokens.push(this.tokEnd(tok));
          }
          return;
        }
        value = prefix + value;
        tok = this.tok(type, value);
        this.incrementColumn(value.length + escaped);
        this.tokens.push(this.tokEnd(tok));
      },
      text: function() {
        var tok = this.scan(/^(?:\| ?| )([^\n]+)/, "text") || this.scan(/^( )/, "text") || this.scan(/^\|( ?)/, "text");
        if (tok) {
          this.addText("text", tok.val);
          return true;
        }
      },
      textHtml: function() {
        var tok = this.scan(/^(<[^\n]*)/, "text-html");
        if (tok) {
          this.addText("text-html", tok.val);
          return true;
        }
      },
      dot: function() {
        var tok;
        if (tok = this.scanEndOfLine(/^\./, "dot")) {
          this.tokens.push(this.tokEnd(tok));
          this.callLexerFunction("pipelessText");
          return true;
        }
      },
      extends: function() {
        var tok = this.scan(/^extends?(?= |$|\n)/, "extends");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          if (!this.callLexerFunction("path")) {
            this.error("NO_EXTENDS_PATH", "missing path for extends");
          }
          return true;
        }
        if (this.scan(/^extends?\b/)) {
          this.error("MALFORMED_EXTENDS", "malformed extends");
        }
      },
      prepend: function() {
        var captures;
        if (captures = /^(?:block +)?prepend +([^\n]+)/.exec(this.input)) {
          var name = captures[1].trim();
          var comment = "";
          if (name.indexOf("//") !== -1) {
            comment = "//" + name.split("//").slice(1).join("//");
            name = name.split("//")[0].trim();
          }
          if (!name)
            return;
          var tok = this.tok("block", name);
          var len = captures[0].length - comment.length;
          while (this.whitespaceRe.test(this.input.charAt(len - 1)))
            len--;
          this.incrementColumn(len);
          tok.mode = "prepend";
          this.tokens.push(this.tokEnd(tok));
          this.consume(captures[0].length - comment.length);
          this.incrementColumn(captures[0].length - comment.length - len);
          return true;
        }
      },
      append: function() {
        var captures;
        if (captures = /^(?:block +)?append +([^\n]+)/.exec(this.input)) {
          var name = captures[1].trim();
          var comment = "";
          if (name.indexOf("//") !== -1) {
            comment = "//" + name.split("//").slice(1).join("//");
            name = name.split("//")[0].trim();
          }
          if (!name)
            return;
          var tok = this.tok("block", name);
          var len = captures[0].length - comment.length;
          while (this.whitespaceRe.test(this.input.charAt(len - 1)))
            len--;
          this.incrementColumn(len);
          tok.mode = "append";
          this.tokens.push(this.tokEnd(tok));
          this.consume(captures[0].length - comment.length);
          this.incrementColumn(captures[0].length - comment.length - len);
          return true;
        }
      },
      block: function() {
        var captures;
        if (captures = /^block +([^\n]+)/.exec(this.input)) {
          var name = captures[1].trim();
          var comment = "";
          if (name.indexOf("//") !== -1) {
            comment = "//" + name.split("//").slice(1).join("//");
            name = name.split("//")[0].trim();
          }
          if (!name)
            return;
          var tok = this.tok("block", name);
          var len = captures[0].length - comment.length;
          while (this.whitespaceRe.test(this.input.charAt(len - 1)))
            len--;
          this.incrementColumn(len);
          tok.mode = "replace";
          this.tokens.push(this.tokEnd(tok));
          this.consume(captures[0].length - comment.length);
          this.incrementColumn(captures[0].length - comment.length - len);
          return true;
        }
      },
      mixinBlock: function() {
        var tok;
        if (tok = this.scanEndOfLine(/^block/, "mixin-block")) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      yield: function() {
        var tok = this.scanEndOfLine(/^yield/, "yield");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      include: function() {
        var tok = this.scan(/^include(?=:| |$|\n)/, "include");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          while (this.callLexerFunction("filter", { inInclude: true }))
            ;
          if (!this.callLexerFunction("path")) {
            if (/^[^ \n]+/.test(this.input)) {
              this.fail();
            } else {
              this.error("NO_INCLUDE_PATH", "missing path for include");
            }
          }
          return true;
        }
        if (this.scan(/^include\b/)) {
          this.error("MALFORMED_INCLUDE", "malformed include");
        }
      },
      path: function() {
        var tok = this.scanEndOfLine(/^ ([^\n]+)/, "path");
        if (tok && (tok.val = tok.val.trim())) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      case: function() {
        var tok = this.scanEndOfLine(/^case +([^\n]+)/, "case");
        if (tok) {
          this.incrementColumn(-tok.val.length);
          this.assertExpression(tok.val);
          this.incrementColumn(tok.val.length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
        if (this.scan(/^case\b/)) {
          this.error("NO_CASE_EXPRESSION", "missing expression for case");
        }
      },
      when: function() {
        var tok = this.scanEndOfLine(/^when +([^:\n]+)/, "when");
        if (tok) {
          var parser = characterParser(tok.val);
          while (parser.isNesting() || parser.isString()) {
            var rest = /:([^:\n]+)/.exec(this.input);
            if (!rest)
              break;
            tok.val += rest[0];
            this.consume(rest[0].length);
            this.incrementColumn(rest[0].length);
            parser = characterParser(tok.val);
          }
          this.incrementColumn(-tok.val.length);
          this.assertExpression(tok.val);
          this.incrementColumn(tok.val.length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
        if (this.scan(/^when\b/)) {
          this.error("NO_WHEN_EXPRESSION", "missing expression for when");
        }
      },
      default: function() {
        var tok = this.scanEndOfLine(/^default/, "default");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
        if (this.scan(/^default\b/)) {
          this.error("DEFAULT_WITH_EXPRESSION", "default should not have an expression");
        }
      },
      call: function() {
        var tok, captures, increment;
        if (captures = /^\+(\s*)(([-\w]+)|(#\{))/.exec(this.input)) {
          if (captures[3]) {
            increment = captures[0].length;
            this.consume(increment);
            tok = this.tok("call", captures[3]);
          } else {
            var match = this.bracketExpression(2 + captures[1].length);
            increment = match.end + 1;
            this.consume(increment);
            this.assertExpression(match.src);
            tok = this.tok("call", "#{" + match.src + "}");
          }
          this.incrementColumn(increment);
          tok.args = null;
          if (captures = /^ *\(/.exec(this.input)) {
            var range = this.bracketExpression(captures[0].length - 1);
            if (!/^\s*[-\w]+ *=/.test(range.src)) {
              this.incrementColumn(1);
              this.consume(range.end + 1);
              tok.args = range.src;
              this.assertExpression("[" + tok.args + "]");
              for (var i = 0; i <= tok.args.length; i++) {
                if (tok.args[i] === "\n") {
                  this.incrementLine(1);
                } else {
                  this.incrementColumn(1);
                }
              }
            }
          }
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      mixin: function() {
        var captures;
        if (captures = /^mixin +([-\w]+)(?: *\((.*)\))? */.exec(this.input)) {
          this.consume(captures[0].length);
          var tok = this.tok("mixin", captures[1]);
          tok.args = captures[2] || null;
          this.incrementColumn(captures[0].length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      conditional: function() {
        var captures;
        if (captures = /^(if|unless|else if|else)\b([^\n]*)/.exec(this.input)) {
          this.consume(captures[0].length);
          var type = captures[1].replace(/ /g, "-");
          var js = captures[2] && captures[2].trim();
          var tok = this.tok(type, js);
          this.incrementColumn(captures[0].length - js.length);
          switch (type) {
            case "if":
            case "else-if":
              this.assertExpression(js);
              break;
            case "unless":
              this.assertExpression(js);
              tok.val = "!(" + js + ")";
              tok.type = "if";
              break;
            case "else":
              if (js) {
                this.error("ELSE_CONDITION", "`else` cannot have a condition, perhaps you meant `else if`");
              }
              break;
          }
          this.incrementColumn(js.length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      while: function() {
        var captures, tok;
        if (captures = /^while +([^\n]+)/.exec(this.input)) {
          this.consume(captures[0].length);
          this.assertExpression(captures[1]);
          tok = this.tok("while", captures[1]);
          this.incrementColumn(captures[0].length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
        if (this.scan(/^while\b/)) {
          this.error("NO_WHILE_EXPRESSION", "missing expression for while");
        }
      },
      each: function() {
        var captures;
        if (captures = /^(?:each|for) +([a-zA-Z_$][\w$]*)(?: *, *([a-zA-Z_$][\w$]*))? * in *([^\n]+)/.exec(this.input)) {
          this.consume(captures[0].length);
          var tok = this.tok("each", captures[1]);
          tok.key = captures[2] || null;
          this.incrementColumn(captures[0].length - captures[3].length);
          this.assertExpression(captures[3]);
          tok.code = captures[3];
          this.incrementColumn(captures[3].length);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
        const name = /^each\b/.exec(this.input) ? "each" : "for";
        if (this.scan(/^(?:each|for)\b/)) {
          this.error("MALFORMED_EACH", "This `" + name + "` has a syntax error. `" + name + "` statements should be of the form: `" + name + " VARIABLE_NAME of JS_EXPRESSION`");
        }
        if (captures = /^- *(?:each|for) +([a-zA-Z_$][\w$]*)(?: *, *([a-zA-Z_$][\w$]*))? +in +([^\n]+)/.exec(this.input)) {
          this.error("MALFORMED_EACH", 'Pug each and for should no longer be prefixed with a dash ("-"). They are pug keywords and not part of JavaScript.');
        }
      },
      eachOf: function() {
        var captures;
        if (captures = /^(?:each|for) (.*?) of *([^\n]+)/.exec(this.input)) {
          this.consume(captures[0].length);
          var tok = this.tok("eachOf", captures[1]);
          tok.value = captures[1];
          this.incrementColumn(captures[0].length - captures[2].length);
          this.assertExpression(captures[2]);
          tok.code = captures[2];
          this.incrementColumn(captures[2].length);
          this.tokens.push(this.tokEnd(tok));
          if (!(/^[a-zA-Z_$][\w$]*$/.test(tok.value.trim()) || /^\[ *[a-zA-Z_$][\w$]* *\, *[a-zA-Z_$][\w$]* *\]$/.test(tok.value.trim()))) {
            this.error("MALFORMED_EACH_OF_LVAL", "The value variable for each must either be a valid identifier (e.g. `item`) or a pair of identifiers in square brackets (e.g. `[key, value]`).");
          }
          return true;
        }
        if (captures = /^- *(?:each|for) +([a-zA-Z_$][\w$]*)(?: *, *([a-zA-Z_$][\w$]*))? +of +([^\n]+)/.exec(this.input)) {
          this.error("MALFORMED_EACH", 'Pug each and for should not be prefixed with a dash ("-"). They are pug keywords and not part of JavaScript.');
        }
      },
      code: function() {
        var captures;
        if (captures = /^(!?=|-)[ \t]*([^\n]+)/.exec(this.input)) {
          var flags = captures[1];
          var code = captures[2];
          var shortened = 0;
          if (this.interpolated) {
            var parsed;
            try {
              parsed = characterParser.parseUntil(code, "]");
            } catch (err) {
              if (err.index !== void 0) {
                this.incrementColumn(captures[0].length - code.length + err.index);
              }
              if (err.code === "CHARACTER_PARSER:END_OF_STRING_REACHED") {
                this.error("NO_END_BRACKET", "End of line was reached with no closing bracket for interpolation.");
              } else if (err.code === "CHARACTER_PARSER:MISMATCHED_BRACKET") {
                this.error("BRACKET_MISMATCH", err.message);
              } else {
                throw err;
              }
            }
            shortened = code.length - parsed.end;
            code = parsed.src;
          }
          var consumed = captures[0].length - shortened;
          this.consume(consumed);
          var tok = this.tok("code", code);
          tok.mustEscape = flags.charAt(0) === "=";
          tok.buffer = flags.charAt(0) === "=" || flags.charAt(1) === "=";
          this.incrementColumn(captures[0].length - captures[2].length);
          if (tok.buffer)
            this.assertExpression(code);
          this.tokens.push(tok);
          this.incrementColumn(code.length);
          this.tokEnd(tok);
          return true;
        }
      },
      blockCode: function() {
        var tok;
        if (tok = this.scanEndOfLine(/^-/, "blockcode")) {
          this.tokens.push(this.tokEnd(tok));
          this.interpolationAllowed = false;
          this.callLexerFunction("pipelessText");
          return true;
        }
      },
      attribute: function(str) {
        var quote = "";
        var quoteRe = /['"]/;
        var key = "";
        var i;
        for (i = 0; i < str.length; i++) {
          if (!this.whitespaceRe.test(str[i]))
            break;
          if (str[i] === "\n") {
            this.incrementLine(1);
          } else {
            this.incrementColumn(1);
          }
        }
        if (i === str.length) {
          return "";
        }
        var tok = this.tok("attribute");
        if (quoteRe.test(str[i])) {
          quote = str[i];
          this.incrementColumn(1);
          i++;
        }
        for (; i < str.length; i++) {
          if (quote) {
            if (str[i] === quote) {
              this.incrementColumn(1);
              i++;
              break;
            }
          } else {
            if (this.whitespaceRe.test(str[i]) || str[i] === "!" || str[i] === "=" || str[i] === ",") {
              break;
            }
          }
          key += str[i];
          if (str[i] === "\n") {
            this.incrementLine(1);
          } else {
            this.incrementColumn(1);
          }
        }
        tok.name = key;
        var valueResponse = this.attributeValue(str.substr(i));
        if (valueResponse.val) {
          tok.val = valueResponse.val;
          tok.mustEscape = valueResponse.mustEscape;
        } else {
          tok.val = true;
          tok.mustEscape = true;
        }
        str = valueResponse.remainingSource;
        this.tokens.push(this.tokEnd(tok));
        for (i = 0; i < str.length; i++) {
          if (!this.whitespaceRe.test(str[i])) {
            break;
          }
          if (str[i] === "\n") {
            this.incrementLine(1);
          } else {
            this.incrementColumn(1);
          }
        }
        if (str[i] === ",") {
          this.incrementColumn(1);
          i++;
        }
        return str.substr(i);
      },
      attributeValue: function(str) {
        var quoteRe = /['"]/;
        var val = "";
        var done, i, x;
        var escapeAttr = true;
        var state = characterParser.defaultState();
        var col = this.colno;
        var line = this.lineno;
        for (i = 0; i < str.length; i++) {
          if (!this.whitespaceRe.test(str[i]))
            break;
          if (str[i] === "\n") {
            line++;
            col = 1;
          } else {
            col++;
          }
        }
        if (i === str.length) {
          return { remainingSource: str };
        }
        if (str[i] === "!") {
          escapeAttr = false;
          col++;
          i++;
          if (str[i] !== "=")
            this.error("INVALID_KEY_CHARACTER", "Unexpected character " + str[i] + " expected `=`");
        }
        if (str[i] !== "=") {
          if (i === 0 && str && !this.whitespaceRe.test(str[0]) && str[0] !== ",") {
            this.error("INVALID_KEY_CHARACTER", "Unexpected character " + str[0] + " expected `=`");
          } else {
            return { remainingSource: str };
          }
        }
        this.lineno = line;
        this.colno = col + 1;
        i++;
        for (; i < str.length; i++) {
          if (!this.whitespaceRe.test(str[i]))
            break;
          if (str[i] === "\n") {
            this.incrementLine(1);
          } else {
            this.incrementColumn(1);
          }
        }
        line = this.lineno;
        col = this.colno;
        for (; i < str.length; i++) {
          if (!(state.isNesting() || state.isString())) {
            if (this.whitespaceRe.test(str[i])) {
              done = false;
              for (x = i; x < str.length; x++) {
                if (!this.whitespaceRe.test(str[x])) {
                  const isNotPunctuator = !characterParser.isPunctuator(str[x]);
                  const isQuote = quoteRe.test(str[x]);
                  const isColon = str[x] === ":";
                  const isSpreadOperator = str[x] + str[x + 1] + str[x + 2] === "...";
                  if ((isNotPunctuator || isQuote || isColon || isSpreadOperator) && this.assertExpression(val, true)) {
                    done = true;
                  }
                  break;
                }
              }
              if (done || x === str.length) {
                break;
              }
            }
            if (str[i] === "," && this.assertExpression(val, true)) {
              break;
            }
          }
          state = characterParser.parseChar(str[i], state);
          val += str[i];
          if (str[i] === "\n") {
            line++;
            col = 1;
          } else {
            col++;
          }
        }
        this.assertExpression(val);
        this.lineno = line;
        this.colno = col;
        return { val, mustEscape: escapeAttr, remainingSource: str.substr(i) };
      },
      attrs: function() {
        var tok;
        if (this.input.charAt(0) == "(") {
          tok = this.tok("start-attributes");
          var index = this.bracketExpression().end;
          var str = this.input.substr(1, index - 1);
          this.incrementColumn(1);
          this.tokens.push(this.tokEnd(tok));
          this.assertNestingCorrect(str);
          this.consume(index + 1);
          while (str) {
            str = this.attribute(str);
          }
          tok = this.tok("end-attributes");
          this.incrementColumn(1);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      attributesBlock: function() {
        if (/^&attributes\b/.test(this.input)) {
          var consumed = 11;
          this.consume(consumed);
          var tok = this.tok("&attributes");
          this.incrementColumn(consumed);
          var args = this.bracketExpression();
          consumed = args.end + 1;
          this.consume(consumed);
          tok.val = args.src;
          this.incrementColumn(consumed);
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      indent: function() {
        var captures = this.scanIndentation();
        var tok;
        if (captures) {
          var indents = captures[1].length;
          this.incrementLine(1);
          this.consume(indents + 1);
          if (this.input[0] == " " || this.input[0] == "	") {
            this.error("INVALID_INDENTATION", "Invalid indentation, you can use tabs or spaces but not both");
          }
          if (this.input[0] == "\n") {
            this.interpolationAllowed = true;
            return this.tokEnd(this.tok("newline"));
          }
          if (indents < this.indentStack[0]) {
            var outdent_count = 0;
            while (this.indentStack[0] > indents) {
              if (this.indentStack[1] < indents) {
                this.error("INCONSISTENT_INDENTATION", "Inconsistent indentation. Expecting either " + this.indentStack[1] + " or " + this.indentStack[0] + " spaces/tabs.");
              }
              outdent_count++;
              this.indentStack.shift();
            }
            while (outdent_count--) {
              this.colno = 1;
              tok = this.tok("outdent");
              this.colno = this.indentStack[0] + 1;
              this.tokens.push(this.tokEnd(tok));
            }
          } else if (indents && indents != this.indentStack[0]) {
            tok = this.tok("indent", indents);
            this.colno = 1 + indents;
            this.tokens.push(this.tokEnd(tok));
            this.indentStack.unshift(indents);
          } else {
            tok = this.tok("newline");
            this.colno = 1 + Math.min(this.indentStack[0] || 0, indents);
            this.tokens.push(this.tokEnd(tok));
          }
          this.interpolationAllowed = true;
          return true;
        }
      },
      pipelessText: function pipelessText(indents) {
        while (this.callLexerFunction("blank"))
          ;
        var captures = this.scanIndentation();
        indents = indents || captures && captures[1].length;
        if (indents > this.indentStack[0]) {
          this.tokens.push(this.tokEnd(this.tok("start-pipeless-text")));
          var tokens = [];
          var token_indent = [];
          var isMatch;
          var stringPtr = 0;
          do {
            var i = this.input.substr(stringPtr + 1).indexOf("\n");
            if (i == -1)
              i = this.input.length - stringPtr - 1;
            var str = this.input.substr(stringPtr + 1, i);
            var lineCaptures = this.indentRe.exec("\n" + str);
            var lineIndents = lineCaptures && lineCaptures[1].length;
            isMatch = lineIndents >= indents;
            token_indent.push(isMatch);
            isMatch = isMatch || !str.trim();
            if (isMatch) {
              stringPtr += str.length + 1;
              tokens.push(str.substr(indents));
            } else if (lineIndents > this.indentStack[0]) {
              this.tokens.pop();
              return pipelessText.call(this, lineCaptures[1].length);
            }
          } while (this.input.length - stringPtr && isMatch);
          this.consume(stringPtr);
          while (this.input.length === 0 && tokens[tokens.length - 1] === "")
            tokens.pop();
          tokens.forEach(function(token, i2) {
            var tok;
            this.incrementLine(1);
            if (i2 !== 0)
              tok = this.tok("newline");
            if (token_indent[i2])
              this.incrementColumn(indents);
            if (tok)
              this.tokens.push(this.tokEnd(tok));
            this.addText("text", token);
          }.bind(this));
          this.tokens.push(this.tokEnd(this.tok("end-pipeless-text")));
          return true;
        }
      },
      slash: function() {
        var tok = this.scan(/^\//, "slash");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      colon: function() {
        var tok = this.scan(/^: +/, ":");
        if (tok) {
          this.tokens.push(this.tokEnd(tok));
          return true;
        }
      },
      fail: function() {
        this.error("UNEXPECTED_TEXT", 'unexpected text "' + this.input.substr(0, 5) + '"');
      },
      callLexerFunction: function(func) {
        var rest = [];
        for (var i = 1; i < arguments.length; i++) {
          rest.push(arguments[i]);
        }
        var pluginArgs = [this].concat(rest);
        for (var i = 0; i < this.plugins.length; i++) {
          var plugin = this.plugins[i];
          if (plugin[func] && plugin[func].apply(plugin, pluginArgs)) {
            return true;
          }
        }
        return this[func].apply(this, rest);
      },
      advance: function() {
        return this.callLexerFunction("blank") || this.callLexerFunction("eos") || this.callLexerFunction("endInterpolation") || this.callLexerFunction("yield") || this.callLexerFunction("doctype") || this.callLexerFunction("interpolation") || this.callLexerFunction("case") || this.callLexerFunction("when") || this.callLexerFunction("default") || this.callLexerFunction("extends") || this.callLexerFunction("append") || this.callLexerFunction("prepend") || this.callLexerFunction("block") || this.callLexerFunction("mixinBlock") || this.callLexerFunction("include") || this.callLexerFunction("mixin") || this.callLexerFunction("call") || this.callLexerFunction("conditional") || this.callLexerFunction("eachOf") || this.callLexerFunction("each") || this.callLexerFunction("while") || this.callLexerFunction("tag") || this.callLexerFunction("filter") || this.callLexerFunction("blockCode") || this.callLexerFunction("code") || this.callLexerFunction("id") || this.callLexerFunction("dot") || this.callLexerFunction("className") || this.callLexerFunction("attrs") || this.callLexerFunction("attributesBlock") || this.callLexerFunction("indent") || this.callLexerFunction("text") || this.callLexerFunction("textHtml") || this.callLexerFunction("comment") || this.callLexerFunction("slash") || this.callLexerFunction("colon") || this.fail();
      },
      getTokens: function() {
        while (!this.ended) {
          this.callLexerFunction("advance");
        }
        return this.tokens;
      }
    };
  }
});

// node_modules/.pnpm/pug-strip-comments@2.0.0/node_modules/pug-strip-comments/index.js
var require_pug_strip_comments = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-strip-comments@2.0.0/node_modules/pug-strip-comments/index.js"(exports, module) {
    "use strict";
    var error = require_pug_error();
    module.exports = stripComments;
    function unexpectedToken(type, occasion, filename, line) {
      var msg = "`" + type + "` encountered when " + occasion;
      throw error("UNEXPECTED_TOKEN", msg, { filename, line });
    }
    function stripComments(input, options) {
      options = options || {};
      var stripUnbuffered = options.stripUnbuffered !== false;
      var stripBuffered = options.stripBuffered === true;
      var filename = options.filename;
      var out = [];
      var inComment = false;
      var inPipelessText = false;
      return input.filter(function(tok) {
        switch (tok.type) {
          case "comment":
            if (inComment) {
              unexpectedToken("comment", "already in a comment", filename, tok.line);
            } else {
              inComment = tok.buffer ? stripBuffered : stripUnbuffered;
              return !inComment;
            }
          case "start-pipeless-text":
            if (!inComment)
              return true;
            if (inPipelessText) {
              unexpectedToken("start-pipeless-text", "already in pipeless text mode", filename, tok.line);
            }
            inPipelessText = true;
            return false;
          case "end-pipeless-text":
            if (!inComment)
              return true;
            if (!inPipelessText) {
              unexpectedToken("end-pipeless-text", "not in pipeless text mode", filename, tok.line);
            }
            inPipelessText = false;
            inComment = false;
            return false;
          case "text":
            return !inComment;
          default:
            if (inPipelessText)
              return false;
            inComment = false;
            return true;
        }
      });
    }
  }
});

// node_modules/.pnpm/token-stream@1.0.0/node_modules/token-stream/index.js
var require_token_stream = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/token-stream@1.0.0/node_modules/token-stream/index.js"(exports, module) {
    "use strict";
    module.exports = TokenStream;
    function TokenStream(tokens) {
      if (!Array.isArray(tokens)) {
        throw new TypeError("tokens must be passed to TokenStream as an array.");
      }
      this._tokens = tokens;
    }
    TokenStream.prototype.lookahead = function(index) {
      if (this._tokens.length <= index) {
        throw new Error("Cannot read past the end of a stream");
      }
      return this._tokens[index];
    };
    TokenStream.prototype.peek = function() {
      if (this._tokens.length === 0) {
        throw new Error("Cannot read past the end of a stream");
      }
      return this._tokens[0];
    };
    TokenStream.prototype.advance = function() {
      if (this._tokens.length === 0) {
        throw new Error("Cannot read past the end of a stream");
      }
      return this._tokens.shift();
    };
    TokenStream.prototype.defer = function(token) {
      this._tokens.unshift(token);
    };
  }
});

// node_modules/.pnpm/pug-parser@6.0.0/node_modules/pug-parser/lib/inline-tags.js
var require_inline_tags = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-parser@6.0.0/node_modules/pug-parser/lib/inline-tags.js"(exports, module) {
    "use strict";
    module.exports = [
      "a",
      "abbr",
      "acronym",
      "b",
      "br",
      "code",
      "em",
      "font",
      "i",
      "img",
      "ins",
      "kbd",
      "map",
      "samp",
      "small",
      "span",
      "strong",
      "sub",
      "sup"
    ];
  }
});

// node_modules/.pnpm/pug-parser@6.0.0/node_modules/pug-parser/index.js
var require_pug_parser = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-parser@6.0.0/node_modules/pug-parser/index.js"(exports, module) {
    "use strict";
    var assert = _chunkDUTQDV3Qjs.__require.call(void 0, "assert");
    var TokenStream = require_token_stream();
    var error = require_pug_error();
    var inlineTags = require_inline_tags();
    module.exports = parse3;
    module.exports.Parser = Parser;
    function parse3(tokens, options) {
      var parser = new Parser(tokens, options);
      var ast = parser.parse();
      return JSON.parse(JSON.stringify(ast));
    }
    function Parser(tokens, options) {
      options = options || {};
      if (!Array.isArray(tokens)) {
        throw new Error('Expected tokens to be an Array but got "' + typeof tokens + '"');
      }
      if (typeof options !== "object") {
        throw new Error('Expected "options" to be an object but got "' + typeof options + '"');
      }
      this.tokens = new TokenStream(tokens);
      this.filename = options.filename;
      this.src = options.src;
      this.inMixin = 0;
      this.plugins = options.plugins || [];
    }
    Parser.prototype = {
      constructor: Parser,
      error: function(code, message, token) {
        var err = error(code, message, {
          line: token.loc.start.line,
          column: token.loc.start.column,
          filename: this.filename,
          src: this.src
        });
        throw err;
      },
      advance: function() {
        return this.tokens.advance();
      },
      peek: function() {
        return this.tokens.peek();
      },
      lookahead: function(n) {
        return this.tokens.lookahead(n);
      },
      parse: function() {
        var block = this.emptyBlock(0);
        while (this.peek().type != "eos") {
          if (this.peek().type == "newline") {
            this.advance();
          } else if (this.peek().type == "text-html") {
            block.nodes = block.nodes.concat(this.parseTextHtml());
          } else {
            var expr = this.parseExpr();
            if (expr) {
              if (expr.type === "Block") {
                block.nodes = block.nodes.concat(expr.nodes);
              } else {
                block.nodes.push(expr);
              }
            }
          }
        }
        return block;
      },
      expect: function(type) {
        if (this.peek().type === type) {
          return this.advance();
        } else {
          this.error("INVALID_TOKEN", 'expected "' + type + '", but got "' + this.peek().type + '"', this.peek());
        }
      },
      accept: function(type) {
        if (this.peek().type === type) {
          return this.advance();
        }
      },
      initBlock: function(line, nodes) {
        if ((line | 0) !== line)
          throw new Error("`line` is not an integer");
        if (!Array.isArray(nodes))
          throw new Error("`nodes` is not an array");
        return {
          type: "Block",
          nodes,
          line,
          filename: this.filename
        };
      },
      emptyBlock: function(line) {
        return this.initBlock(line, []);
      },
      runPlugin: function(context, tok) {
        var rest = [this];
        for (var i = 2; i < arguments.length; i++) {
          rest.push(arguments[i]);
        }
        var pluginContext;
        for (var i = 0; i < this.plugins.length; i++) {
          var plugin = this.plugins[i];
          if (plugin[context] && plugin[context][tok.type]) {
            if (pluginContext)
              throw new Error("Multiple plugin handlers found for context " + JSON.stringify(context) + ", token type " + JSON.stringify(tok.type));
            pluginContext = plugin[context];
          }
        }
        if (pluginContext)
          return pluginContext[tok.type].apply(pluginContext, rest);
      },
      parseExpr: function() {
        switch (this.peek().type) {
          case "tag":
            return this.parseTag();
          case "mixin":
            return this.parseMixin();
          case "block":
            return this.parseBlock();
          case "mixin-block":
            return this.parseMixinBlock();
          case "case":
            return this.parseCase();
          case "extends":
            return this.parseExtends();
          case "include":
            return this.parseInclude();
          case "doctype":
            return this.parseDoctype();
          case "filter":
            return this.parseFilter();
          case "comment":
            return this.parseComment();
          case "text":
          case "interpolated-code":
          case "start-pug-interpolation":
            return this.parseText({ block: true });
          case "text-html":
            return this.initBlock(this.peek().loc.start.line, this.parseTextHtml());
          case "dot":
            return this.parseDot();
          case "each":
            return this.parseEach();
          case "eachOf":
            return this.parseEachOf();
          case "code":
            return this.parseCode();
          case "blockcode":
            return this.parseBlockCode();
          case "if":
            return this.parseConditional();
          case "while":
            return this.parseWhile();
          case "call":
            return this.parseCall();
          case "interpolation":
            return this.parseInterpolation();
          case "yield":
            return this.parseYield();
          case "id":
          case "class":
            if (!this.peek().loc.start)
              debugger;
            this.tokens.defer({
              type: "tag",
              val: "div",
              loc: this.peek().loc,
              filename: this.filename
            });
            return this.parseExpr();
          default:
            var pluginResult = this.runPlugin("expressionTokens", this.peek());
            if (pluginResult)
              return pluginResult;
            this.error("INVALID_TOKEN", 'unexpected token "' + this.peek().type + '"', this.peek());
        }
      },
      parseDot: function() {
        this.advance();
        return this.parseTextBlock();
      },
      parseText: function(options) {
        var tags = [];
        var lineno = this.peek().loc.start.line;
        var nextTok = this.peek();
        loop:
          while (true) {
            switch (nextTok.type) {
              case "text":
                var tok = this.advance();
                tags.push({
                  type: "Text",
                  val: tok.val,
                  line: tok.loc.start.line,
                  column: tok.loc.start.column,
                  filename: this.filename
                });
                break;
              case "interpolated-code":
                var tok = this.advance();
                tags.push({
                  type: "Code",
                  val: tok.val,
                  buffer: tok.buffer,
                  mustEscape: tok.mustEscape !== false,
                  isInline: true,
                  line: tok.loc.start.line,
                  column: tok.loc.start.column,
                  filename: this.filename
                });
                break;
              case "newline":
                if (!options || !options.block)
                  break loop;
                var tok = this.advance();
                var nextType = this.peek().type;
                if (nextType === "text" || nextType === "interpolated-code") {
                  tags.push({
                    type: "Text",
                    val: "\n",
                    line: tok.loc.start.line,
                    column: tok.loc.start.column,
                    filename: this.filename
                  });
                }
                break;
              case "start-pug-interpolation":
                this.advance();
                tags.push(this.parseExpr());
                this.expect("end-pug-interpolation");
                break;
              default:
                var pluginResult = this.runPlugin("textTokens", nextTok, tags);
                if (pluginResult)
                  break;
                break loop;
            }
            nextTok = this.peek();
          }
        if (tags.length === 1)
          return tags[0];
        else
          return this.initBlock(lineno, tags);
      },
      parseTextHtml: function() {
        var nodes = [];
        var currentNode = null;
        loop:
          while (true) {
            switch (this.peek().type) {
              case "text-html":
                var text = this.advance();
                if (!currentNode) {
                  currentNode = {
                    type: "Text",
                    val: text.val,
                    filename: this.filename,
                    line: text.loc.start.line,
                    column: text.loc.start.column,
                    isHtml: true
                  };
                  nodes.push(currentNode);
                } else {
                  currentNode.val += "\n" + text.val;
                }
                break;
              case "indent":
                var block = this.block();
                block.nodes.forEach(function(node) {
                  if (node.isHtml) {
                    if (!currentNode) {
                      currentNode = node;
                      nodes.push(currentNode);
                    } else {
                      currentNode.val += "\n" + node.val;
                    }
                  } else {
                    currentNode = null;
                    nodes.push(node);
                  }
                });
                break;
              case "code":
                currentNode = null;
                nodes.push(this.parseCode(true));
                break;
              case "newline":
                this.advance();
                break;
              default:
                break loop;
            }
          }
        return nodes;
      },
      parseBlockExpansion: function() {
        var tok = this.accept(":");
        if (tok) {
          var expr = this.parseExpr();
          return expr.type === "Block" ? expr : this.initBlock(tok.loc.start.line, [expr]);
        } else {
          return this.block();
        }
      },
      parseCase: function() {
        var tok = this.expect("case");
        var node = {
          type: "Case",
          expr: tok.val,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        var block = this.emptyBlock(tok.loc.start.line + 1);
        this.expect("indent");
        while (this.peek().type != "outdent") {
          switch (this.peek().type) {
            case "comment":
            case "newline":
              this.advance();
              break;
            case "when":
              block.nodes.push(this.parseWhen());
              break;
            case "default":
              block.nodes.push(this.parseDefault());
              break;
            default:
              var pluginResult = this.runPlugin("caseTokens", this.peek(), block);
              if (pluginResult)
                break;
              this.error("INVALID_TOKEN", 'Unexpected token "' + this.peek().type + '", expected "when", "default" or "newline"', this.peek());
          }
        }
        this.expect("outdent");
        node.block = block;
        return node;
      },
      parseWhen: function() {
        var tok = this.expect("when");
        if (this.peek().type !== "newline") {
          return {
            type: "When",
            expr: tok.val,
            block: this.parseBlockExpansion(),
            debug: false,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename
          };
        } else {
          return {
            type: "When",
            expr: tok.val,
            debug: false,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename
          };
        }
      },
      parseDefault: function() {
        var tok = this.expect("default");
        return {
          type: "When",
          expr: "default",
          block: this.parseBlockExpansion(),
          debug: false,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseCode: function(noBlock) {
        var tok = this.expect("code");
        assert(typeof tok.mustEscape === "boolean", "Please update to the newest version of pug-lexer.");
        var node = {
          type: "Code",
          val: tok.val,
          buffer: tok.buffer,
          mustEscape: tok.mustEscape !== false,
          isInline: !!noBlock,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        if (node.val.match(/^ *else/))
          node.debug = false;
        if (noBlock)
          return node;
        var block;
        block = this.peek().type == "indent";
        if (block) {
          if (tok.buffer) {
            this.error("BLOCK_IN_BUFFERED_CODE", "Buffered code cannot have a block attached to it", this.peek());
          }
          node.block = this.block();
        }
        return node;
      },
      parseConditional: function() {
        var tok = this.expect("if");
        var node = {
          type: "Conditional",
          test: tok.val,
          consequent: this.emptyBlock(tok.loc.start.line),
          alternate: null,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        if (this.peek().type == "indent") {
          node.consequent = this.block();
        }
        var currentNode = node;
        while (true) {
          if (this.peek().type === "newline") {
            this.expect("newline");
          } else if (this.peek().type === "else-if") {
            tok = this.expect("else-if");
            currentNode = currentNode.alternate = {
              type: "Conditional",
              test: tok.val,
              consequent: this.emptyBlock(tok.loc.start.line),
              alternate: null,
              line: tok.loc.start.line,
              column: tok.loc.start.column,
              filename: this.filename
            };
            if (this.peek().type == "indent") {
              currentNode.consequent = this.block();
            }
          } else if (this.peek().type === "else") {
            this.expect("else");
            if (this.peek().type === "indent") {
              currentNode.alternate = this.block();
            }
            break;
          } else {
            break;
          }
        }
        return node;
      },
      parseWhile: function() {
        var tok = this.expect("while");
        var node = {
          type: "While",
          test: tok.val,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        if (this.peek().type == "indent") {
          node.block = this.block();
        } else {
          node.block = this.emptyBlock(tok.loc.start.line);
        }
        return node;
      },
      parseBlockCode: function() {
        var tok = this.expect("blockcode");
        var line = tok.loc.start.line;
        var column = tok.loc.start.column;
        var body = this.peek();
        var text = "";
        if (body.type === "start-pipeless-text") {
          this.advance();
          while (this.peek().type !== "end-pipeless-text") {
            tok = this.advance();
            switch (tok.type) {
              case "text":
                text += tok.val;
                break;
              case "newline":
                text += "\n";
                break;
              default:
                var pluginResult = this.runPlugin("blockCodeTokens", tok, tok);
                if (pluginResult) {
                  text += pluginResult;
                  break;
                }
                this.error("INVALID_TOKEN", "Unexpected token type: " + tok.type, tok);
            }
          }
          this.advance();
        }
        return {
          type: "Code",
          val: text,
          buffer: false,
          mustEscape: false,
          isInline: false,
          line,
          column,
          filename: this.filename
        };
      },
      parseComment: function() {
        var tok = this.expect("comment");
        var block;
        if (block = this.parseTextBlock()) {
          return {
            type: "BlockComment",
            val: tok.val,
            block,
            buffer: tok.buffer,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename
          };
        } else {
          return {
            type: "Comment",
            val: tok.val,
            buffer: tok.buffer,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename
          };
        }
      },
      parseDoctype: function() {
        var tok = this.expect("doctype");
        return {
          type: "Doctype",
          val: tok.val,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseIncludeFilter: function() {
        var tok = this.expect("filter");
        var attrs = [];
        if (this.peek().type === "start-attributes") {
          attrs = this.attrs();
        }
        return {
          type: "IncludeFilter",
          name: tok.val,
          attrs,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseFilter: function() {
        var tok = this.expect("filter");
        var block, attrs = [];
        if (this.peek().type === "start-attributes") {
          attrs = this.attrs();
        }
        if (this.peek().type === "text") {
          var textToken = this.advance();
          block = this.initBlock(textToken.loc.start.line, [
            {
              type: "Text",
              val: textToken.val,
              line: textToken.loc.start.line,
              column: textToken.loc.start.column,
              filename: this.filename
            }
          ]);
        } else if (this.peek().type === "filter") {
          block = this.initBlock(tok.loc.start.line, [this.parseFilter()]);
        } else {
          block = this.parseTextBlock() || this.emptyBlock(tok.loc.start.line);
        }
        return {
          type: "Filter",
          name: tok.val,
          block,
          attrs,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseEach: function() {
        var tok = this.expect("each");
        var node = {
          type: "Each",
          obj: tok.code,
          val: tok.val,
          key: tok.key,
          block: this.block(),
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        if (this.peek().type == "else") {
          this.advance();
          node.alternate = this.block();
        }
        return node;
      },
      parseEachOf: function() {
        var tok = this.expect("eachOf");
        var node = {
          type: "EachOf",
          obj: tok.code,
          val: tok.val,
          block: this.block(),
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        return node;
      },
      parseExtends: function() {
        var tok = this.expect("extends");
        var path = this.expect("path");
        return {
          type: "Extends",
          file: {
            type: "FileReference",
            path: path.val.trim(),
            line: path.loc.start.line,
            column: path.loc.start.column,
            filename: this.filename
          },
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseBlock: function() {
        var tok = this.expect("block");
        var node = this.peek().type == "indent" ? this.block() : this.emptyBlock(tok.loc.start.line);
        node.type = "NamedBlock";
        node.name = tok.val.trim();
        node.mode = tok.mode;
        node.line = tok.loc.start.line;
        node.column = tok.loc.start.column;
        return node;
      },
      parseMixinBlock: function() {
        var tok = this.expect("mixin-block");
        if (!this.inMixin) {
          this.error("BLOCK_OUTISDE_MIXIN", "Anonymous blocks are not allowed unless they are part of a mixin.", tok);
        }
        return {
          type: "MixinBlock",
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseYield: function() {
        var tok = this.expect("yield");
        return {
          type: "YieldBlock",
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
      },
      parseInclude: function() {
        var tok = this.expect("include");
        var node = {
          type: "Include",
          file: {
            type: "FileReference",
            filename: this.filename
          },
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        var filters = [];
        while (this.peek().type === "filter") {
          filters.push(this.parseIncludeFilter());
        }
        var path = this.expect("path");
        node.file.path = path.val.trim();
        node.file.line = path.loc.start.line;
        node.file.column = path.loc.start.column;
        if ((/\.jade$/.test(node.file.path) || /\.pug$/.test(node.file.path)) && !filters.length) {
          node.block = this.peek().type == "indent" ? this.block() : this.emptyBlock(tok.loc.start.line);
          if (/\.jade$/.test(node.file.path)) {
            console.warn(this.filename + ", line " + tok.loc.start.line + ':\nThe .jade extension is deprecated, use .pug for "' + node.file.path + '".');
          }
        } else {
          node.type = "RawInclude";
          node.filters = filters;
          if (this.peek().type === "indent") {
            this.error("RAW_INCLUDE_BLOCK", "Raw inclusion cannot contain a block", this.peek());
          }
        }
        return node;
      },
      parseCall: function() {
        var tok = this.expect("call");
        var name = tok.val;
        var args = tok.args;
        var mixin = {
          type: "Mixin",
          name,
          args,
          block: this.emptyBlock(tok.loc.start.line),
          call: true,
          attrs: [],
          attributeBlocks: [],
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        this.tag(mixin);
        if (mixin.code) {
          mixin.block.nodes.push(mixin.code);
          delete mixin.code;
        }
        if (mixin.block.nodes.length === 0)
          mixin.block = null;
        return mixin;
      },
      parseMixin: function() {
        var tok = this.expect("mixin");
        var name = tok.val;
        var args = tok.args;
        if (this.peek().type == "indent") {
          this.inMixin++;
          var mixin = {
            type: "Mixin",
            name,
            args,
            block: this.block(),
            call: false,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename
          };
          this.inMixin--;
          return mixin;
        } else {
          this.error("MIXIN_WITHOUT_BODY", "Mixin " + name + " declared without body", tok);
        }
      },
      parseTextBlock: function() {
        var tok = this.accept("start-pipeless-text");
        if (!tok)
          return;
        var block = this.emptyBlock(tok.loc.start.line);
        while (this.peek().type !== "end-pipeless-text") {
          var tok = this.advance();
          switch (tok.type) {
            case "text":
              block.nodes.push({
                type: "Text",
                val: tok.val,
                line: tok.loc.start.line,
                column: tok.loc.start.column,
                filename: this.filename
              });
              break;
            case "newline":
              block.nodes.push({
                type: "Text",
                val: "\n",
                line: tok.loc.start.line,
                column: tok.loc.start.column,
                filename: this.filename
              });
              break;
            case "start-pug-interpolation":
              block.nodes.push(this.parseExpr());
              this.expect("end-pug-interpolation");
              break;
            case "interpolated-code":
              block.nodes.push({
                type: "Code",
                val: tok.val,
                buffer: tok.buffer,
                mustEscape: tok.mustEscape !== false,
                isInline: true,
                line: tok.loc.start.line,
                column: tok.loc.start.column,
                filename: this.filename
              });
              break;
            default:
              var pluginResult = this.runPlugin("textBlockTokens", tok, block, tok);
              if (pluginResult)
                break;
              this.error("INVALID_TOKEN", "Unexpected token type: " + tok.type, tok);
          }
        }
        this.advance();
        return block;
      },
      block: function() {
        var tok = this.expect("indent");
        var block = this.emptyBlock(tok.loc.start.line);
        while (this.peek().type != "outdent") {
          if (this.peek().type == "newline") {
            this.advance();
          } else if (this.peek().type == "text-html") {
            block.nodes = block.nodes.concat(this.parseTextHtml());
          } else {
            var expr = this.parseExpr();
            if (expr.type === "Block") {
              block.nodes = block.nodes.concat(expr.nodes);
            } else {
              block.nodes.push(expr);
            }
          }
        }
        this.expect("outdent");
        return block;
      },
      parseInterpolation: function() {
        var tok = this.advance();
        var tag = {
          type: "InterpolatedTag",
          expr: tok.val,
          selfClosing: false,
          block: this.emptyBlock(tok.loc.start.line),
          attrs: [],
          attributeBlocks: [],
          isInline: false,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        return this.tag(tag, { selfClosingAllowed: true });
      },
      parseTag: function() {
        var tok = this.advance();
        var tag = {
          type: "Tag",
          name: tok.val,
          selfClosing: false,
          block: this.emptyBlock(tok.loc.start.line),
          attrs: [],
          attributeBlocks: [],
          isInline: inlineTags.indexOf(tok.val) !== -1,
          line: tok.loc.start.line,
          column: tok.loc.start.column,
          filename: this.filename
        };
        return this.tag(tag, { selfClosingAllowed: true });
      },
      tag: function(tag, options) {
        var seenAttrs = false;
        var attributeNames = [];
        var selfClosingAllowed = options && options.selfClosingAllowed;
        out:
          while (true) {
            switch (this.peek().type) {
              case "id":
              case "class":
                var tok = this.advance();
                if (tok.type === "id") {
                  if (attributeNames.indexOf("id") !== -1) {
                    this.error("DUPLICATE_ID", 'Duplicate attribute "id" is not allowed.', tok);
                  }
                  attributeNames.push("id");
                }
                tag.attrs.push({
                  name: tok.type,
                  val: "'" + tok.val + "'",
                  line: tok.loc.start.line,
                  column: tok.loc.start.column,
                  filename: this.filename,
                  mustEscape: false
                });
                continue;
              case "start-attributes":
                if (seenAttrs) {
                  console.warn(this.filename + ", line " + this.peek().loc.start.line + ":\nYou should not have pug tags with multiple attributes.");
                }
                seenAttrs = true;
                tag.attrs = tag.attrs.concat(this.attrs(attributeNames));
                continue;
              case "&attributes":
                var tok = this.advance();
                tag.attributeBlocks.push({
                  type: "AttributeBlock",
                  val: tok.val,
                  line: tok.loc.start.line,
                  column: tok.loc.start.column,
                  filename: this.filename
                });
                break;
              default:
                var pluginResult = this.runPlugin("tagAttributeTokens", this.peek(), tag, attributeNames);
                if (pluginResult)
                  break;
                break out;
            }
          }
        if (this.peek().type == "dot") {
          tag.textOnly = true;
          this.advance();
        }
        switch (this.peek().type) {
          case "text":
          case "interpolated-code":
            var text = this.parseText();
            if (text.type === "Block") {
              tag.block.nodes.push.apply(tag.block.nodes, text.nodes);
            } else {
              tag.block.nodes.push(text);
            }
            break;
          case "code":
            tag.block.nodes.push(this.parseCode(true));
            break;
          case ":":
            this.advance();
            var expr = this.parseExpr();
            tag.block = expr.type === "Block" ? expr : this.initBlock(tag.line, [expr]);
            break;
          case "newline":
          case "indent":
          case "outdent":
          case "eos":
          case "start-pipeless-text":
          case "end-pug-interpolation":
            break;
          case "slash":
            if (selfClosingAllowed) {
              this.advance();
              tag.selfClosing = true;
              break;
            }
          default:
            var pluginResult = this.runPlugin("tagTokens", this.peek(), tag, options);
            if (pluginResult)
              break;
            this.error("INVALID_TOKEN", "Unexpected token `" + this.peek().type + "` expected `text`, `interpolated-code`, `code`, `:`" + (selfClosingAllowed ? ", `slash`" : "") + ", `newline` or `eos`", this.peek());
        }
        while (this.peek().type == "newline")
          this.advance();
        if (tag.textOnly) {
          tag.block = this.parseTextBlock() || this.emptyBlock(tag.line);
        } else if (this.peek().type == "indent") {
          var block = this.block();
          for (var i = 0, len = block.nodes.length; i < len; ++i) {
            tag.block.nodes.push(block.nodes[i]);
          }
        }
        return tag;
      },
      attrs: function(attributeNames) {
        this.expect("start-attributes");
        var attrs = [];
        var tok = this.advance();
        while (tok.type === "attribute") {
          if (tok.name !== "class" && attributeNames) {
            if (attributeNames.indexOf(tok.name) !== -1) {
              this.error("DUPLICATE_ATTRIBUTE", 'Duplicate attribute "' + tok.name + '" is not allowed.', tok);
            }
            attributeNames.push(tok.name);
          }
          attrs.push({
            name: tok.name,
            val: tok.val,
            line: tok.loc.start.line,
            column: tok.loc.start.column,
            filename: this.filename,
            mustEscape: tok.mustEscape !== false
          });
          tok = this.advance();
        }
        this.tokens.defer(tok);
        this.expect("end-attributes");
        return attrs;
      }
    };
  }
});

// node_modules/.pnpm/pug-walk@2.0.0/node_modules/pug-walk/index.js
var require_pug_walk = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-walk@2.0.0/node_modules/pug-walk/index.js"(exports, module) {
    "use strict";
    module.exports = walkAST;
    function walkAST(ast, before, after, options) {
      if (after && typeof after === "object" && typeof options === "undefined") {
        options = after;
        after = null;
      }
      options = options || { includeDependencies: false };
      var parents = options.parents = options.parents || [];
      var replace = function replace2(replacement) {
        if (Array.isArray(replacement) && !replace2.arrayAllowed) {
          throw new Error("replace() can only be called with an array if the last parent is a Block or NamedBlock");
        }
        ast = replacement;
      };
      replace.arrayAllowed = parents[0] && (/^(Named)?Block$/.test(parents[0].type) || parents[0].type === "RawInclude" && ast.type === "IncludeFilter");
      if (before) {
        var result = before(ast, replace);
        if (result === false) {
          return ast;
        } else if (Array.isArray(ast)) {
          return walkAndMergeNodes(ast);
        }
      }
      parents.unshift(ast);
      switch (ast.type) {
        case "NamedBlock":
        case "Block":
          ast.nodes = walkAndMergeNodes(ast.nodes);
          break;
        case "Case":
        case "Filter":
        case "Mixin":
        case "Tag":
        case "InterpolatedTag":
        case "When":
        case "Code":
        case "While":
          if (ast.block) {
            ast.block = walkAST(ast.block, before, after, options);
          }
          break;
        case "Each":
          if (ast.block) {
            ast.block = walkAST(ast.block, before, after, options);
          }
          if (ast.alternate) {
            ast.alternate = walkAST(ast.alternate, before, after, options);
          }
          break;
        case "EachOf":
          if (ast.block) {
            ast.block = walkAST(ast.block, before, after, options);
          }
          break;
        case "Conditional":
          if (ast.consequent) {
            ast.consequent = walkAST(ast.consequent, before, after, options);
          }
          if (ast.alternate) {
            ast.alternate = walkAST(ast.alternate, before, after, options);
          }
          break;
        case "Include":
          walkAST(ast.block, before, after, options);
          walkAST(ast.file, before, after, options);
          break;
        case "Extends":
          walkAST(ast.file, before, after, options);
          break;
        case "RawInclude":
          ast.filters = walkAndMergeNodes(ast.filters);
          walkAST(ast.file, before, after, options);
          break;
        case "Attrs":
        case "BlockComment":
        case "Comment":
        case "Doctype":
        case "IncludeFilter":
        case "MixinBlock":
        case "YieldBlock":
        case "Text":
          break;
        case "FileReference":
          if (options.includeDependencies && ast.ast) {
            walkAST(ast.ast, before, after, options);
          }
          break;
        default:
          throw new Error("Unexpected node type " + ast.type);
          break;
      }
      parents.shift();
      after && after(ast, replace);
      return ast;
      function walkAndMergeNodes(nodes) {
        return nodes.reduce(function(nodes2, node) {
          var result2 = walkAST(node, before, after, options);
          if (Array.isArray(result2)) {
            return nodes2.concat(result2);
          } else {
            return nodes2.concat([result2]);
          }
        }, []);
      }
    }
  }
});

// node_modules/.pnpm/pug-load@3.0.0/node_modules/pug-load/index.js
var require_pug_load = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-load@3.0.0/node_modules/pug-load/index.js"(exports, module) {
    "use strict";
    var fs = _chunkDUTQDV3Qjs.__require.call(void 0, "fs");
    var path = _chunkDUTQDV3Qjs.__require.call(void 0, "path");
    var walk = require_pug_walk();
    var assign = require_object_assign();
    module.exports = load;
    function load(ast, options) {
      options = getOptions(options);
      ast = JSON.parse(JSON.stringify(ast));
      return walk(ast, function(node) {
        if (node.str === void 0) {
          if (node.type === "Include" || node.type === "RawInclude" || node.type === "Extends") {
            var file = node.file;
            if (file.type !== "FileReference") {
              throw new Error('Expected file.type to be "FileReference"');
            }
            var path2, str, raw;
            try {
              path2 = options.resolve(file.path, file.filename, options);
              file.fullPath = path2;
              raw = options.read(path2, options);
              str = raw.toString("utf8");
            } catch (ex) {
              ex.message += "\n    at " + node.filename + " line " + node.line;
              throw ex;
            }
            file.str = str;
            file.raw = raw;
            if (node.type === "Extends" || node.type === "Include") {
              file.ast = load.string(str, assign({}, options, {
                filename: path2
              }));
            }
          }
        }
      });
    }
    load.string = function loadString(src, options) {
      options = assign(getOptions(options), {
        src
      });
      var tokens = options.lex(src, options);
      var ast = options.parse(tokens, options);
      return load(ast, options);
    };
    load.file = function loadFile(filename, options) {
      options = assign(getOptions(options), {
        filename
      });
      var str = options.read(filename).toString("utf8");
      return load.string(str, options);
    };
    load.resolve = function resolve2(filename, source, options) {
      filename = filename.trim();
      if (filename[0] !== "/" && !source)
        throw new Error('the "filename" option is required to use includes and extends with "relative" paths');
      if (filename[0] === "/" && !options.basedir)
        throw new Error('the "basedir" option is required to use includes and extends with "absolute" paths');
      filename = path.join(filename[0] === "/" ? options.basedir : path.dirname(source.trim()), filename);
      return filename;
    };
    load.read = function read(filename, options) {
      return fs.readFileSync(filename);
    };
    load.validateOptions = function validateOptions(options) {
      if (typeof options !== "object") {
        throw new TypeError("options must be an object");
      }
      if (typeof options.lex !== "function") {
        throw new TypeError("options.lex must be a function");
      }
      if (typeof options.parse !== "function") {
        throw new TypeError("options.parse must be a function");
      }
      if (options.resolve && typeof options.resolve !== "function") {
        throw new TypeError("options.resolve must be a function");
      }
      if (options.read && typeof options.read !== "function") {
        throw new TypeError("options.read must be a function");
      }
    };
    function getOptions(options) {
      load.validateOptions(options);
      return assign({
        resolve: load.resolve,
        read: load.read
      }, options);
    }
  }
});

// node_modules/.pnpm/asap@2.0.6/node_modules/asap/raw.js
var require_raw = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/asap@2.0.6/node_modules/asap/raw.js"(exports, module) {
    "use strict";
    var domain;
    var hasSetImmediate = typeof setImmediate === "function";
    module.exports = rawAsap;
    function rawAsap(task) {
      if (!queue.length) {
        requestFlush();
        flushing = true;
      }
      queue[queue.length] = task;
    }
    var queue = [];
    var flushing = false;
    var index = 0;
    var capacity = 1024;
    function flush() {
      while (index < queue.length) {
        var currentIndex = index;
        index = index + 1;
        queue[currentIndex].call();
        if (index > capacity) {
          for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
            queue[scan] = queue[scan + index];
          }
          queue.length -= index;
          index = 0;
        }
      }
      queue.length = 0;
      index = 0;
      flushing = false;
    }
    rawAsap.requestFlush = requestFlush;
    function requestFlush() {
      var parentDomain = process.domain;
      if (parentDomain) {
        if (!domain) {
          domain = _chunkDUTQDV3Qjs.__require.call(void 0, "domain");
        }
        domain.active = process.domain = null;
      }
      if (flushing && hasSetImmediate) {
        setImmediate(flush);
      } else {
        process.nextTick(flush);
      }
      if (parentDomain) {
        domain.active = process.domain = parentDomain;
      }
    }
  }
});

// node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/core.js
var require_core = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/core.js"(exports, module) {
    "use strict";
    var asap = require_raw();
    function noop() {
    }
    var LAST_ERROR = null;
    var IS_ERROR = {};
    function getThen(obj) {
      try {
        return obj.then;
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }
    function tryCallOne(fn, a) {
      try {
        return fn(a);
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }
    function tryCallTwo(fn, a, b) {
      try {
        fn(a, b);
      } catch (ex) {
        LAST_ERROR = ex;
        return IS_ERROR;
      }
    }
    module.exports = Promise2;
    function Promise2(fn) {
      if (typeof this !== "object") {
        throw new TypeError("Promises must be constructed via new");
      }
      if (typeof fn !== "function") {
        throw new TypeError("Promise constructor's argument is not a function");
      }
      this._40 = 0;
      this._65 = 0;
      this._55 = null;
      this._72 = null;
      if (fn === noop)
        return;
      doResolve(fn, this);
    }
    Promise2._37 = null;
    Promise2._87 = null;
    Promise2._61 = noop;
    Promise2.prototype.then = function(onFulfilled, onRejected) {
      if (this.constructor !== Promise2) {
        return safeThen(this, onFulfilled, onRejected);
      }
      var res = new Promise2(noop);
      handle(this, new Handler(onFulfilled, onRejected, res));
      return res;
    };
    function safeThen(self2, onFulfilled, onRejected) {
      return new self2.constructor(function(resolve3, reject2) {
        var res = new Promise2(noop);
        res.then(resolve3, reject2);
        handle(self2, new Handler(onFulfilled, onRejected, res));
      });
    }
    function handle(self2, deferred) {
      while (self2._65 === 3) {
        self2 = self2._55;
      }
      if (Promise2._37) {
        Promise2._37(self2);
      }
      if (self2._65 === 0) {
        if (self2._40 === 0) {
          self2._40 = 1;
          self2._72 = deferred;
          return;
        }
        if (self2._40 === 1) {
          self2._40 = 2;
          self2._72 = [self2._72, deferred];
          return;
        }
        self2._72.push(deferred);
        return;
      }
      handleResolved(self2, deferred);
    }
    function handleResolved(self2, deferred) {
      asap(function() {
        var cb = self2._65 === 1 ? deferred.onFulfilled : deferred.onRejected;
        if (cb === null) {
          if (self2._65 === 1) {
            resolve2(deferred.promise, self2._55);
          } else {
            reject(deferred.promise, self2._55);
          }
          return;
        }
        var ret = tryCallOne(cb, self2._55);
        if (ret === IS_ERROR) {
          reject(deferred.promise, LAST_ERROR);
        } else {
          resolve2(deferred.promise, ret);
        }
      });
    }
    function resolve2(self2, newValue) {
      if (newValue === self2) {
        return reject(self2, new TypeError("A promise cannot be resolved with itself."));
      }
      if (newValue && (typeof newValue === "object" || typeof newValue === "function")) {
        var then = getThen(newValue);
        if (then === IS_ERROR) {
          return reject(self2, LAST_ERROR);
        }
        if (then === self2.then && newValue instanceof Promise2) {
          self2._65 = 3;
          self2._55 = newValue;
          finale(self2);
          return;
        } else if (typeof then === "function") {
          doResolve(then.bind(newValue), self2);
          return;
        }
      }
      self2._65 = 1;
      self2._55 = newValue;
      finale(self2);
    }
    function reject(self2, newValue) {
      self2._65 = 2;
      self2._55 = newValue;
      if (Promise2._87) {
        Promise2._87(self2, newValue);
      }
      finale(self2);
    }
    function finale(self2) {
      if (self2._40 === 1) {
        handle(self2, self2._72);
        self2._72 = null;
      }
      if (self2._40 === 2) {
        for (var i = 0; i < self2._72.length; i++) {
          handle(self2, self2._72[i]);
        }
        self2._72 = null;
      }
    }
    function Handler(onFulfilled, onRejected, promise) {
      this.onFulfilled = typeof onFulfilled === "function" ? onFulfilled : null;
      this.onRejected = typeof onRejected === "function" ? onRejected : null;
      this.promise = promise;
    }
    function doResolve(fn, promise) {
      var done = false;
      var res = tryCallTwo(fn, function(value) {
        if (done)
          return;
        done = true;
        resolve2(promise, value);
      }, function(reason) {
        if (done)
          return;
        done = true;
        reject(promise, reason);
      });
      if (!done && res === IS_ERROR) {
        done = true;
        reject(promise, LAST_ERROR);
      }
    }
  }
});

// node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/done.js
var require_done = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/done.js"(exports, module) {
    "use strict";
    var Promise2 = require_core();
    module.exports = Promise2;
    Promise2.prototype.done = function(onFulfilled, onRejected) {
      var self2 = arguments.length ? this.then.apply(this, arguments) : this;
      self2.then(null, function(err) {
        setTimeout(function() {
          throw err;
        }, 0);
      });
    };
  }
});

// node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/finally.js
var require_finally = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/finally.js"(exports, module) {
    "use strict";
    var Promise2 = require_core();
    module.exports = Promise2;
    Promise2.prototype["finally"] = function(f) {
      return this.then(function(value) {
        return Promise2.resolve(f()).then(function() {
          return value;
        });
      }, function(err) {
        return Promise2.resolve(f()).then(function() {
          throw err;
        });
      });
    };
  }
});

// node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/es6-extensions.js
var require_es6_extensions = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/es6-extensions.js"(exports, module) {
    "use strict";
    var Promise2 = require_core();
    module.exports = Promise2;
    var TRUE = valuePromise(true);
    var FALSE = valuePromise(false);
    var NULL = valuePromise(null);
    var UNDEFINED = valuePromise(void 0);
    var ZERO = valuePromise(0);
    var EMPTYSTRING = valuePromise("");
    function valuePromise(value) {
      var p = new Promise2(Promise2._61);
      p._65 = 1;
      p._55 = value;
      return p;
    }
    Promise2.resolve = function(value) {
      if (value instanceof Promise2)
        return value;
      if (value === null)
        return NULL;
      if (value === void 0)
        return UNDEFINED;
      if (value === true)
        return TRUE;
      if (value === false)
        return FALSE;
      if (value === 0)
        return ZERO;
      if (value === "")
        return EMPTYSTRING;
      if (typeof value === "object" || typeof value === "function") {
        try {
          var then = value.then;
          if (typeof then === "function") {
            return new Promise2(then.bind(value));
          }
        } catch (ex) {
          return new Promise2(function(resolve2, reject) {
            reject(ex);
          });
        }
      }
      return valuePromise(value);
    };
    Promise2.all = function(arr) {
      var args = Array.prototype.slice.call(arr);
      return new Promise2(function(resolve2, reject) {
        if (args.length === 0)
          return resolve2([]);
        var remaining = args.length;
        function res(i2, val) {
          if (val && (typeof val === "object" || typeof val === "function")) {
            if (val instanceof Promise2 && val.then === Promise2.prototype.then) {
              while (val._65 === 3) {
                val = val._55;
              }
              if (val._65 === 1)
                return res(i2, val._55);
              if (val._65 === 2)
                reject(val._55);
              val.then(function(val2) {
                res(i2, val2);
              }, reject);
              return;
            } else {
              var then = val.then;
              if (typeof then === "function") {
                var p = new Promise2(then.bind(val));
                p.then(function(val2) {
                  res(i2, val2);
                }, reject);
                return;
              }
            }
          }
          args[i2] = val;
          if (--remaining === 0) {
            resolve2(args);
          }
        }
        for (var i = 0; i < args.length; i++) {
          res(i, args[i]);
        }
      });
    };
    Promise2.reject = function(value) {
      return new Promise2(function(resolve2, reject) {
        reject(value);
      });
    };
    Promise2.race = function(values) {
      return new Promise2(function(resolve2, reject) {
        values.forEach(function(value) {
          Promise2.resolve(value).then(resolve2, reject);
        });
      });
    };
    Promise2.prototype["catch"] = function(onRejected) {
      return this.then(null, onRejected);
    };
  }
});

// node_modules/.pnpm/asap@2.0.6/node_modules/asap/asap.js
var require_asap = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/asap@2.0.6/node_modules/asap/asap.js"(exports, module) {
    "use strict";
    var rawAsap = require_raw();
    var freeTasks = [];
    module.exports = asap;
    function asap(task) {
      var rawTask;
      if (freeTasks.length) {
        rawTask = freeTasks.pop();
      } else {
        rawTask = new RawTask();
      }
      rawTask.task = task;
      rawTask.domain = process.domain;
      rawAsap(rawTask);
    }
    function RawTask() {
      this.task = null;
      this.domain = null;
    }
    RawTask.prototype.call = function() {
      if (this.domain) {
        this.domain.enter();
      }
      var threw = true;
      try {
        this.task.call();
        threw = false;
        if (this.domain) {
          this.domain.exit();
        }
      } finally {
        if (threw) {
          rawAsap.requestFlush();
        }
        this.task = null;
        this.domain = null;
        freeTasks.push(this);
      }
    };
  }
});

// node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/node-extensions.js
var require_node_extensions = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/node-extensions.js"(exports, module) {
    "use strict";
    var Promise2 = require_core();
    var asap = require_asap();
    module.exports = Promise2;
    Promise2.denodeify = function(fn, argumentCount) {
      if (typeof argumentCount === "number" && argumentCount !== Infinity) {
        return denodeifyWithCount(fn, argumentCount);
      } else {
        return denodeifyWithoutCount(fn);
      }
    };
    var callbackFn = "function (err, res) {if (err) { rj(err); } else { rs(res); }}";
    function denodeifyWithCount(fn, argumentCount) {
      var args = [];
      for (var i = 0; i < argumentCount; i++) {
        args.push("a" + i);
      }
      var body = [
        "return function (" + args.join(",") + ") {",
        "var self = this;",
        "return new Promise(function (rs, rj) {",
        "var res = fn.call(",
        ["self"].concat(args).concat([callbackFn]).join(","),
        ");",
        "if (res &&",
        '(typeof res === "object" || typeof res === "function") &&',
        'typeof res.then === "function"',
        ") {rs(res);}",
        "});",
        "};"
      ].join("");
      return Function(["Promise", "fn"], body)(Promise2, fn);
    }
    function denodeifyWithoutCount(fn) {
      var fnLength = Math.max(fn.length - 1, 3);
      var args = [];
      for (var i = 0; i < fnLength; i++) {
        args.push("a" + i);
      }
      var body = [
        "return function (" + args.join(",") + ") {",
        "var self = this;",
        "var args;",
        "var argLength = arguments.length;",
        "if (arguments.length > " + fnLength + ") {",
        "args = new Array(arguments.length + 1);",
        "for (var i = 0; i < arguments.length; i++) {",
        "args[i] = arguments[i];",
        "}",
        "}",
        "return new Promise(function (rs, rj) {",
        "var cb = " + callbackFn + ";",
        "var res;",
        "switch (argLength) {",
        args.concat(["extra"]).map(function(_, index) {
          return "case " + index + ":res = fn.call(" + ["self"].concat(args.slice(0, index)).concat("cb").join(",") + ");break;";
        }).join(""),
        "default:",
        "args[argLength] = cb;",
        "res = fn.apply(self, args);",
        "}",
        "if (res &&",
        '(typeof res === "object" || typeof res === "function") &&',
        'typeof res.then === "function"',
        ") {rs(res);}",
        "});",
        "};"
      ].join("");
      return Function(["Promise", "fn"], body)(Promise2, fn);
    }
    Promise2.nodeify = function(fn) {
      return function() {
        var args = Array.prototype.slice.call(arguments);
        var callback = typeof args[args.length - 1] === "function" ? args.pop() : null;
        var ctx = this;
        try {
          return fn.apply(this, arguments).nodeify(callback, ctx);
        } catch (ex) {
          if (callback === null || typeof callback == "undefined") {
            return new Promise2(function(resolve2, reject) {
              reject(ex);
            });
          } else {
            asap(function() {
              callback.call(ctx, ex);
            });
          }
        }
      };
    };
    Promise2.prototype.nodeify = function(callback, ctx) {
      if (typeof callback != "function")
        return this;
      this.then(function(value) {
        asap(function() {
          callback.call(ctx, null, value);
        });
      }, function(err) {
        asap(function() {
          callback.call(ctx, err);
        });
      });
    };
  }
});

// node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/synchronous.js
var require_synchronous = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/synchronous.js"(exports, module) {
    "use strict";
    var Promise2 = require_core();
    module.exports = Promise2;
    Promise2.enableSynchronous = function() {
      Promise2.prototype.isPending = function() {
        return this.getState() == 0;
      };
      Promise2.prototype.isFulfilled = function() {
        return this.getState() == 1;
      };
      Promise2.prototype.isRejected = function() {
        return this.getState() == 2;
      };
      Promise2.prototype.getValue = function() {
        if (this._65 === 3) {
          return this._55.getValue();
        }
        if (!this.isFulfilled()) {
          throw new Error("Cannot get a value of an unfulfilled promise.");
        }
        return this._55;
      };
      Promise2.prototype.getReason = function() {
        if (this._65 === 3) {
          return this._55.getReason();
        }
        if (!this.isRejected()) {
          throw new Error("Cannot get a rejection reason of a non-rejected promise.");
        }
        return this._55;
      };
      Promise2.prototype.getState = function() {
        if (this._65 === 3) {
          return this._55.getState();
        }
        if (this._65 === -1 || this._65 === -2) {
          return 0;
        }
        return this._65;
      };
    };
    Promise2.disableSynchronous = function() {
      Promise2.prototype.isPending = void 0;
      Promise2.prototype.isFulfilled = void 0;
      Promise2.prototype.isRejected = void 0;
      Promise2.prototype.getValue = void 0;
      Promise2.prototype.getReason = void 0;
      Promise2.prototype.getState = void 0;
    };
  }
});

// node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/index.js
var require_lib = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/promise@7.3.1/node_modules/promise/lib/index.js"(exports, module) {
    "use strict";
    module.exports = require_core();
    require_done();
    require_finally();
    require_es6_extensions();
    require_node_extensions();
    require_synchronous();
  }
});

// node_modules/.pnpm/promise@7.3.1/node_modules/promise/index.js
var require_promise = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/promise@7.3.1/node_modules/promise/index.js"(exports, module) {
    "use strict";
    module.exports = require_lib();
  }
});

// node_modules/.pnpm/is-promise@2.2.2/node_modules/is-promise/index.js
var require_is_promise = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/is-promise@2.2.2/node_modules/is-promise/index.js"(exports, module) {
    module.exports = isPromise;
    module.exports.default = isPromise;
    function isPromise(obj) {
      return !!obj && (typeof obj === "object" || typeof obj === "function") && typeof obj.then === "function";
    }
  }
});

// node_modules/.pnpm/jstransformer@1.0.0/node_modules/jstransformer/index.js
var require_jstransformer = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/jstransformer@1.0.0/node_modules/jstransformer/index.js"(exports, module) {
    "use strict";
    var fs = _chunkDUTQDV3Qjs.__require.call(void 0, "fs");
    var assert = _chunkDUTQDV3Qjs.__require.call(void 0, "assert");
    var Promise2 = require_promise();
    var isPromise = require_is_promise();
    var tr = module.exports = function(transformer) {
      return new Transformer(transformer);
    };
    tr.Transformer = Transformer;
    tr.normalizeFn = normalizeFn;
    tr.normalizeFnAsync = normalizeFnAsync;
    tr.normalize = normalize;
    tr.normalizeAsync = normalizeAsync;
    if (fs.readFile) {
      tr.readFile = Promise2.denodeify(fs.readFile);
      tr.readFileSync = fs.readFileSync;
    } else {
      tr.readFile = function() {
        throw new Error("fs.readFile unsupported");
      };
      tr.readFileSync = function() {
        throw new Error("fs.readFileSync unsupported");
      };
    }
    function normalizeFn(result) {
      if (typeof result === "function") {
        return { fn: result, dependencies: [] };
      } else if (result && typeof result === "object" && typeof result.fn === "function") {
        if ("dependencies" in result) {
          if (!Array.isArray(result.dependencies)) {
            throw new Error("Result should have a dependencies property that is an array");
          }
        } else {
          result.dependencies = [];
        }
        return result;
      } else {
        throw new Error("Invalid result object from transform.");
      }
    }
    function normalizeFnAsync(result, cb) {
      return Promise2.resolve(result).then(function(result2) {
        if (result2 && isPromise(result2.fn)) {
          return result2.fn.then(function(fn) {
            result2.fn = fn;
            return result2;
          });
        }
        return result2;
      }).then(tr.normalizeFn).nodeify(cb);
    }
    function normalize(result) {
      if (typeof result === "string") {
        return { body: result, dependencies: [] };
      } else if (result && typeof result === "object" && typeof result.body === "string") {
        if ("dependencies" in result) {
          if (!Array.isArray(result.dependencies)) {
            throw new Error("Result should have a dependencies property that is an array");
          }
        } else {
          result.dependencies = [];
        }
        return result;
      } else {
        throw new Error("Invalid result object from transform.");
      }
    }
    function normalizeAsync(result, cb) {
      return Promise2.resolve(result).then(function(result2) {
        if (result2 && isPromise(result2.body)) {
          return result2.body.then(function(body) {
            result2.body = body;
            return result2;
          });
        }
        return result2;
      }).then(tr.normalize).nodeify(cb);
    }
    function Transformer(tr2) {
      assert(tr2, "Transformer must be an object");
      assert(typeof tr2.name === "string", "Transformer must have a name");
      assert(typeof tr2.outputFormat === "string", "Transformer must have an output format");
      assert([
        "compile",
        "compileAsync",
        "compileFile",
        "compileFileAsync",
        "compileClient",
        "compileClientAsync",
        "compileFileClient",
        "compileFileClientAsync",
        "render",
        "renderAsync",
        "renderFile",
        "renderFileAsync"
      ].some(function(method) {
        return typeof tr2[method] === "function";
      }), "Transformer must implement at least one of the potential methods.");
      this._tr = tr2;
      this.name = this._tr.name;
      this.outputFormat = this._tr.outputFormat;
      this.inputFormats = this._tr.inputFormats || [this.name];
    }
    var fallbacks = {
      compile: ["compile", "render"],
      compileAsync: ["compileAsync", "compile", "render"],
      compileFile: ["compileFile", "compile", "renderFile", "render"],
      compileFileAsync: [
        "compileFileAsync",
        "compileFile",
        "compileAsync",
        "compile",
        "renderFile",
        "render"
      ],
      compileClient: ["compileClient"],
      compileClientAsync: ["compileClientAsync", "compileClient"],
      compileFileClient: ["compileFileClient", "compileClient"],
      compileFileClientAsync: [
        "compileFileClientAsync",
        "compileFileClient",
        "compileClientAsync",
        "compileClient"
      ],
      render: ["render", "compile"],
      renderAsync: ["renderAsync", "render", "compileAsync", "compile"],
      renderFile: ["renderFile", "render", "compileFile", "compile"],
      renderFileAsync: [
        "renderFileAsync",
        "renderFile",
        "renderAsync",
        "render",
        "compileFileAsync",
        "compileFile",
        "compileAsync",
        "compile"
      ]
    };
    Transformer.prototype._hasMethod = function(method) {
      return typeof this._tr[method] === "function";
    };
    Transformer.prototype.can = function(method) {
      return fallbacks[method].some(function(method2) {
        return this._hasMethod(method2);
      }.bind(this));
    };
    Transformer.prototype.compile = function(str, options) {
      if (!this._hasMethod("compile")) {
        if (this.can("render")) {
          var _this = this;
          return {
            fn: function(locals) {
              return tr.normalize(_this._tr.render(str, options, locals)).body;
            },
            dependencies: []
          };
        }
        if (this.can("compileAsync")) {
          throw new Error('The Transform "' + this.name + '" does not support synchronous compilation');
        } else if (this.can("compileFileAsync")) {
          throw new Error('The Transform "' + this.name + '" does not support compiling plain strings');
        } else {
          throw new Error('The Transform "' + this.name + '" does not support compilation');
        }
      }
      return tr.normalizeFn(this._tr.compile(str, options));
    };
    Transformer.prototype.compileAsync = function(str, options, cb) {
      if (!this.can("compileAsync")) {
        return Promise2.reject(new Error('The Transform "' + this.name + '" does not support compiling plain strings')).nodeify(cb);
      }
      if (this._hasMethod("compileAsync")) {
        return tr.normalizeFnAsync(this._tr.compileAsync(str, options), cb);
      } else {
        return tr.normalizeFnAsync(this.compile(str, options), cb);
      }
    };
    Transformer.prototype.compileFile = function(filename, options) {
      if (!this.can("compileFile")) {
        throw new Error('The Transform "' + this.name + '" does not support synchronous compilation');
      }
      if (this._hasMethod("compileFile")) {
        return tr.normalizeFn(this._tr.compileFile(filename, options));
      } else if (this._hasMethod("renderFile")) {
        return tr.normalizeFn(function(locals) {
          return tr.normalize(this._tr.renderFile(filename, options, locals)).body;
        }.bind(this));
      } else {
        if (!options)
          options = {};
        if (options.filename === void 0)
          options.filename = filename;
        return this.compile(tr.readFileSync(filename, "utf8"), options);
      }
    };
    Transformer.prototype.compileFileAsync = function(filename, options, cb) {
      if (!this.can("compileFileAsync")) {
        return Promise2.reject(new Error('The Transform "' + this.name + '" does not support compilation'));
      }
      if (this._hasMethod("compileFileAsync")) {
        return tr.normalizeFnAsync(this._tr.compileFileAsync(filename, options), cb);
      } else if (this._hasMethod("compileFile") || this._hasMethod("renderFile")) {
        return tr.normalizeFnAsync(this.compileFile(filename, options), cb);
      } else {
        if (!options)
          options = {};
        if (options.filename === void 0)
          options.filename = filename;
        return tr.normalizeFnAsync(tr.readFile(filename, "utf8").then(function(str) {
          if (this._hasMethod("compileAsync")) {
            return this._tr.compileAsync(str, options);
          } else {
            return this.compile(str, options);
          }
        }.bind(this)), cb);
      }
    };
    Transformer.prototype.compileClient = function(str, options) {
      if (!this.can("compileClient")) {
        if (this.can("compileClientAsync")) {
          throw new Error('The Transform "' + this.name + '" does not support compiling for the client synchronously.');
        } else if (this.can("compileFileClientAsync")) {
          throw new Error('The Transform "' + this.name + '" does not support compiling for the client from a string.');
        } else {
          throw new Error('The Transform "' + this.name + '" does not support compiling for the client');
        }
      }
      return tr.normalize(this._tr.compileClient(str, options));
    };
    Transformer.prototype.compileClientAsync = function(str, options, cb) {
      if (!this.can("compileClientAsync")) {
        if (this.can("compileFileClientAsync")) {
          return Promise2.reject(new Error('The Transform "' + this.name + '" does not support compiling for the client from a string.')).nodeify(cb);
        } else {
          return Promise2.reject(new Error('The Transform "' + this.name + '" does not support compiling for the client')).nodeify(cb);
        }
      }
      if (this._hasMethod("compileClientAsync")) {
        return tr.normalizeAsync(this._tr.compileClientAsync(str, options), cb);
      } else {
        return tr.normalizeAsync(this._tr.compileClient(str, options), cb);
      }
    };
    Transformer.prototype.compileFileClient = function(filename, options) {
      if (!this.can("compileFileClient")) {
        if (this.can("compileFileClientAsync")) {
          throw new Error('The Transform "' + this.name + '" does not support compiling for the client synchronously.');
        } else {
          throw new Error('The Transform "' + this.name + '" does not support compiling for the client');
        }
      }
      if (this._hasMethod("compileFileClient")) {
        return tr.normalize(this._tr.compileFileClient(filename, options));
      } else {
        if (!options)
          options = {};
        if (options.filename === void 0)
          options.filename = filename;
        return tr.normalize(this._tr.compileClient(tr.readFileSync(filename, "utf8"), options));
      }
    };
    Transformer.prototype.compileFileClientAsync = function(filename, options, cb) {
      if (!this.can("compileFileClientAsync")) {
        return Promise2.reject(new Error('The Transform "' + this.name + '" does not support compiling for the client')).nodeify(cb);
      }
      if (this._hasMethod("compileFileClientAsync")) {
        return tr.normalizeAsync(this._tr.compileFileClientAsync(filename, options), cb);
      } else if (this._hasMethod("compileFileClient")) {
        return tr.normalizeAsync(this._tr.compileFileClient(filename, options), cb);
      } else {
        if (!options)
          options = {};
        if (options.filename === void 0)
          options.filename = filename;
        return tr.normalizeAsync(tr.readFile(filename, "utf8").then(function(str) {
          if (this._hasMethod("compileClientAsync")) {
            return this._tr.compileClientAsync(str, options);
          } else {
            return this._tr.compileClient(str, options);
          }
        }.bind(this)), cb);
      }
    };
    Transformer.prototype.render = function(str, options, locals) {
      if (!this.can("render")) {
        if (this.can("renderAsync")) {
          throw new Error('The Transform "' + this.name + '" does not support rendering synchronously.');
        } else if (this.can("renderFileAsync")) {
          throw new Error('The Transform "' + this.name + '" does not support rendering from a string.');
        } else {
          throw new Error('The Transform "' + this.name + '" does not support rendering');
        }
      }
      if (this._hasMethod("render")) {
        return tr.normalize(this._tr.render(str, options, locals));
      } else {
        var compiled = tr.normalizeFn(this._tr.compile(str, options));
        var body = compiled.fn(locals || options);
        if (typeof body !== "string") {
          throw new Error('The Transform "' + this.name + '" does not support rendering synchronously.');
        }
        return tr.normalize({ body, dependencies: compiled.dependencies });
      }
    };
    Transformer.prototype.renderAsync = function(str, options, locals, cb) {
      if (typeof locals === "function") {
        cb = locals;
        locals = options;
      }
      if (!this.can("renderAsync")) {
        if (this.can("renderFileAsync")) {
          return Promise2.reject(new Error('The Transform "' + this.name + '" does not support rendering from a string.')).nodeify(cb);
        } else {
          return Promise2.reject(new Error('The Transform "' + this.name + '" does not support rendering')).nodeify(cb);
        }
      }
      if (this._hasMethod("renderAsync")) {
        return tr.normalizeAsync(this._tr.renderAsync(str, options, locals), cb);
      } else if (this._hasMethod("render")) {
        return tr.normalizeAsync(this._tr.render(str, options, locals), cb);
      } else {
        return tr.normalizeAsync(this.compileAsync(str, options).then(function(compiled) {
          return { body: compiled.fn(locals || options), dependencies: compiled.dependencies };
        }), cb);
      }
    };
    Transformer.prototype.renderFile = function(filename, options, locals) {
      if (!this.can("renderFile")) {
        throw new Error('The Transform "' + this.name + '" does not support rendering synchronously.');
      }
      if (this._hasMethod("renderFile")) {
        return tr.normalize(this._tr.renderFile(filename, options, locals));
      } else if (this._hasMethod("render")) {
        if (!options)
          options = {};
        if (options.filename === void 0)
          options.filename = filename;
        return tr.normalize(this._tr.render(tr.readFileSync(filename, "utf8"), options, locals));
      } else {
        var compiled = this.compileFile(filename, options);
        return tr.normalize({ body: compiled.fn(locals || options), dependencies: compiled.dependencies });
      }
    };
    Transformer.prototype.renderFileAsync = function(filename, options, locals, cb) {
      if (!this.can("renderFileAsync")) {
        throw new Error('The Transform "' + this.name + '" does not support rendering.');
      }
      if (typeof locals === "function") {
        cb = locals;
        locals = options;
      }
      if (this._hasMethod("renderFileAsync")) {
        return tr.normalizeAsync(this._tr.renderFileAsync(filename, options, locals), cb);
      } else if (this._hasMethod("renderFile")) {
        return tr.normalizeAsync(this._tr.renderFile(filename, options, locals), cb);
      } else if (this._hasMethod("compile") || this._hasMethod("compileAsync") || this._hasMethod("compileFile") || this._hasMethod("compileFileAsync")) {
        return tr.normalizeAsync(this.compileFileAsync(filename, options).then(function(compiled) {
          return { body: compiled.fn(locals || options), dependencies: compiled.dependencies };
        }), cb);
      } else {
        if (!options)
          options = {};
        if (options.filename === void 0)
          options.filename = filename;
        return tr.normalizeAsync(tr.readFile(filename, "utf8").then(function(str) {
          return this.renderAsync(str, options, locals);
        }.bind(this)), cb);
      }
    };
  }
});

// node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/caller.js
var require_caller = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/caller.js"(exports, module) {
    module.exports = function() {
      var origPrepareStackTrace = Error.prepareStackTrace;
      Error.prepareStackTrace = function(_, stack2) {
        return stack2;
      };
      var stack = new Error().stack;
      Error.prepareStackTrace = origPrepareStackTrace;
      return stack[2].getFileName();
    };
  }
});

// node_modules/.pnpm/path-parse@1.0.7/node_modules/path-parse/index.js
var require_path_parse = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/path-parse@1.0.7/node_modules/path-parse/index.js"(exports, module) {
    "use strict";
    var isWindows = process.platform === "win32";
    var splitWindowsRe = /^(((?:[a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?[\\\/]?)(?:[^\\\/]*[\\\/])*)((\.{1,2}|[^\\\/]+?|)(\.[^.\/\\]*|))[\\\/]*$/;
    var win322 = {};
    function win32SplitPath(filename) {
      return splitWindowsRe.exec(filename).slice(1);
    }
    win322.parse = function(pathString) {
      if (typeof pathString !== "string") {
        throw new TypeError("Parameter 'pathString' must be a string, not " + typeof pathString);
      }
      var allParts = win32SplitPath(pathString);
      if (!allParts || allParts.length !== 5) {
        throw new TypeError("Invalid path '" + pathString + "'");
      }
      return {
        root: allParts[1],
        dir: allParts[0] === allParts[1] ? allParts[0] : allParts[0].slice(0, -1),
        base: allParts[2],
        ext: allParts[4],
        name: allParts[3]
      };
    };
    var splitPathRe = /^((\/?)(?:[^\/]*\/)*)((\.{1,2}|[^\/]+?|)(\.[^.\/]*|))[\/]*$/;
    var posix2 = {};
    function posixSplitPath(filename) {
      return splitPathRe.exec(filename).slice(1);
    }
    posix2.parse = function(pathString) {
      if (typeof pathString !== "string") {
        throw new TypeError("Parameter 'pathString' must be a string, not " + typeof pathString);
      }
      var allParts = posixSplitPath(pathString);
      if (!allParts || allParts.length !== 5) {
        throw new TypeError("Invalid path '" + pathString + "'");
      }
      return {
        root: allParts[1],
        dir: allParts[0].slice(0, -1),
        base: allParts[2],
        ext: allParts[4],
        name: allParts[3]
      };
    };
    if (isWindows)
      module.exports = win322.parse;
    else
      module.exports = posix2.parse;
    module.exports.posix = posix2.parse;
    module.exports.win32 = win322.parse;
  }
});

// node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/node-modules-paths.js
var require_node_modules_paths = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/node-modules-paths.js"(exports, module) {
    var path = _chunkDUTQDV3Qjs.__require.call(void 0, "path");
    var parse3 = path.parse || require_path_parse();
    var getNodeModulesDirs = function getNodeModulesDirs2(absoluteStart, modules) {
      var prefix = "/";
      if (/^([A-Za-z]:)/.test(absoluteStart)) {
        prefix = "";
      } else if (/^\\\\/.test(absoluteStart)) {
        prefix = "\\\\";
      }
      var paths = [absoluteStart];
      var parsed = parse3(absoluteStart);
      while (parsed.dir !== paths[paths.length - 1]) {
        paths.push(parsed.dir);
        parsed = parse3(parsed.dir);
      }
      return paths.reduce(function(dirs, aPath) {
        return dirs.concat(modules.map(function(moduleDir) {
          return path.resolve(prefix, aPath, moduleDir);
        }));
      }, []);
    };
    module.exports = function nodeModulesPaths(start, opts, request) {
      var modules = opts && opts.moduleDirectory ? [].concat(opts.moduleDirectory) : ["node_modules"];
      if (opts && typeof opts.paths === "function") {
        return opts.paths(request, start, function() {
          return getNodeModulesDirs(start, modules);
        }, opts);
      }
      var dirs = getNodeModulesDirs(start, modules);
      return opts && opts.paths ? dirs.concat(opts.paths) : dirs;
    };
  }
});

// node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/normalize-options.js
var require_normalize_options = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/normalize-options.js"(exports, module) {
    module.exports = function(x, opts) {
      return opts || {};
    };
  }
});

// node_modules/.pnpm/is-core-module@2.6.0/node_modules/is-core-module/core.json
var require_core2 = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/is-core-module@2.6.0/node_modules/is-core-module/core.json"(exports, module) {
    module.exports = {
      assert: true,
      "node:assert": ">= 16",
      "assert/strict": ">= 15",
      "node:assert/strict": ">= 16",
      async_hooks: ">= 8",
      "node:async_hooks": ">= 16",
      buffer_ieee754: "< 0.9.7",
      buffer: true,
      "node:buffer": ">= 16",
      child_process: true,
      "node:child_process": ">= 16",
      cluster: true,
      "node:cluster": ">= 16",
      console: true,
      "node:console": ">= 16",
      constants: true,
      "node:constants": ">= 16",
      crypto: true,
      "node:crypto": ">= 16",
      _debug_agent: ">= 1 && < 8",
      _debugger: "< 8",
      dgram: true,
      "node:dgram": ">= 16",
      diagnostics_channel: [">= 14.17 && < 15", ">= 15.1"],
      "node:diagnostics_channel": ">= 16",
      dns: true,
      "node:dns": ">= 16",
      "dns/promises": ">= 15",
      "node:dns/promises": ">= 16",
      domain: ">= 0.7.12",
      "node:domain": ">= 16",
      events: true,
      "node:events": ">= 16",
      freelist: "< 6",
      fs: true,
      "node:fs": ">= 16",
      "fs/promises": [">= 10 && < 10.1", ">= 14"],
      "node:fs/promises": ">= 16",
      _http_agent: ">= 0.11.1",
      "node:_http_agent": ">= 16",
      _http_client: ">= 0.11.1",
      "node:_http_client": ">= 16",
      _http_common: ">= 0.11.1",
      "node:_http_common": ">= 16",
      _http_incoming: ">= 0.11.1",
      "node:_http_incoming": ">= 16",
      _http_outgoing: ">= 0.11.1",
      "node:_http_outgoing": ">= 16",
      _http_server: ">= 0.11.1",
      "node:_http_server": ">= 16",
      http: true,
      "node:http": ">= 16",
      http2: ">= 8.8",
      "node:http2": ">= 16",
      https: true,
      "node:https": ">= 16",
      inspector: ">= 8",
      "node:inspector": ">= 16",
      _linklist: "< 8",
      module: true,
      "node:module": ">= 16",
      net: true,
      "node:net": ">= 16",
      "node-inspect/lib/_inspect": ">= 7.6 && < 12",
      "node-inspect/lib/internal/inspect_client": ">= 7.6 && < 12",
      "node-inspect/lib/internal/inspect_repl": ">= 7.6 && < 12",
      os: true,
      "node:os": ">= 16",
      path: true,
      "node:path": ">= 16",
      "path/posix": ">= 15.3",
      "node:path/posix": ">= 16",
      "path/win32": ">= 15.3",
      "node:path/win32": ">= 16",
      perf_hooks: ">= 8.5",
      "node:perf_hooks": ">= 16",
      process: ">= 1",
      "node:process": ">= 16",
      punycode: true,
      "node:punycode": ">= 16",
      querystring: true,
      "node:querystring": ">= 16",
      readline: true,
      "node:readline": ">= 16",
      repl: true,
      "node:repl": ">= 16",
      smalloc: ">= 0.11.5 && < 3",
      _stream_duplex: ">= 0.9.4",
      "node:_stream_duplex": ">= 16",
      _stream_transform: ">= 0.9.4",
      "node:_stream_transform": ">= 16",
      _stream_wrap: ">= 1.4.1",
      "node:_stream_wrap": ">= 16",
      _stream_passthrough: ">= 0.9.4",
      "node:_stream_passthrough": ">= 16",
      _stream_readable: ">= 0.9.4",
      "node:_stream_readable": ">= 16",
      _stream_writable: ">= 0.9.4",
      "node:_stream_writable": ">= 16",
      stream: true,
      "node:stream": ">= 16",
      "stream/consumers": ">= 16.7",
      "node:stream/consumers": ">= 16.7",
      "stream/promises": ">= 15",
      "node:stream/promises": ">= 16",
      "stream/web": ">= 16.5",
      "node:stream/web": ">= 16.5",
      string_decoder: true,
      "node:string_decoder": ">= 16",
      sys: [">= 0.6 && < 0.7", ">= 0.8"],
      "node:sys": ">= 16",
      timers: true,
      "node:timers": ">= 16",
      "timers/promises": ">= 15",
      "node:timers/promises": ">= 16",
      _tls_common: ">= 0.11.13",
      "node:_tls_common": ">= 16",
      _tls_legacy: ">= 0.11.3 && < 10",
      _tls_wrap: ">= 0.11.3",
      "node:_tls_wrap": ">= 16",
      tls: true,
      "node:tls": ">= 16",
      trace_events: ">= 10",
      "node:trace_events": ">= 16",
      tty: true,
      "node:tty": ">= 16",
      url: true,
      "node:url": ">= 16",
      util: true,
      "node:util": ">= 16",
      "util/types": ">= 15.3",
      "node:util/types": ">= 16",
      "v8/tools/arguments": ">= 10 && < 12",
      "v8/tools/codemap": [">= 4.4 && < 5", ">= 5.2 && < 12"],
      "v8/tools/consarray": [">= 4.4 && < 5", ">= 5.2 && < 12"],
      "v8/tools/csvparser": [">= 4.4 && < 5", ">= 5.2 && < 12"],
      "v8/tools/logreader": [">= 4.4 && < 5", ">= 5.2 && < 12"],
      "v8/tools/profile_view": [">= 4.4 && < 5", ">= 5.2 && < 12"],
      "v8/tools/splaytree": [">= 4.4 && < 5", ">= 5.2 && < 12"],
      v8: ">= 1",
      "node:v8": ">= 16",
      vm: true,
      "node:vm": ">= 16",
      wasi: ">= 13.4 && < 13.5",
      worker_threads: ">= 11.7",
      "node:worker_threads": ">= 16",
      zlib: true,
      "node:zlib": ">= 16"
    };
  }
});

// node_modules/.pnpm/is-core-module@2.6.0/node_modules/is-core-module/index.js
var require_is_core_module = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/is-core-module@2.6.0/node_modules/is-core-module/index.js"(exports, module) {
    "use strict";
    var has = require_src();
    function specifierIncluded(current, specifier) {
      var nodeParts = current.split(".");
      var parts = specifier.split(" ");
      var op = parts.length > 1 ? parts[0] : "=";
      var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split(".");
      for (var i = 0; i < 3; ++i) {
        var cur = parseInt(nodeParts[i] || 0, 10);
        var ver = parseInt(versionParts[i] || 0, 10);
        if (cur === ver) {
          continue;
        }
        if (op === "<") {
          return cur < ver;
        }
        if (op === ">=") {
          return cur >= ver;
        }
        return false;
      }
      return op === ">=";
    }
    function matchesRange(current, range) {
      var specifiers = range.split(/ ?&& ?/);
      if (specifiers.length === 0) {
        return false;
      }
      for (var i = 0; i < specifiers.length; ++i) {
        if (!specifierIncluded(current, specifiers[i])) {
          return false;
        }
      }
      return true;
    }
    function versionIncluded(nodeVersion, specifierValue) {
      if (typeof specifierValue === "boolean") {
        return specifierValue;
      }
      var current = typeof nodeVersion === "undefined" ? process.versions && process.versions.node : nodeVersion;
      if (typeof current !== "string") {
        throw new TypeError(typeof nodeVersion === "undefined" ? "Unable to determine current node version" : "If provided, a valid node version is required");
      }
      if (specifierValue && typeof specifierValue === "object") {
        for (var i = 0; i < specifierValue.length; ++i) {
          if (matchesRange(current, specifierValue[i])) {
            return true;
          }
        }
        return false;
      }
      return matchesRange(current, specifierValue);
    }
    var data = require_core2();
    module.exports = function isCore(x, nodeVersion) {
      return has(data, x) && versionIncluded(nodeVersion, data[x]);
    };
  }
});

// node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/async.js
var require_async = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/async.js"(exports, module) {
    var fs = _chunkDUTQDV3Qjs.__require.call(void 0, "fs");
    var path = _chunkDUTQDV3Qjs.__require.call(void 0, "path");
    var caller = require_caller();
    var nodeModulesPaths = require_node_modules_paths();
    var normalizeOptions = require_normalize_options();
    var isCore = require_is_core_module();
    var realpathFS = fs.realpath && typeof fs.realpath.native === "function" ? fs.realpath.native : fs.realpath;
    var defaultIsFile = function isFile(file, cb) {
      fs.stat(file, function(err, stat) {
        if (!err) {
          return cb(null, stat.isFile() || stat.isFIFO());
        }
        if (err.code === "ENOENT" || err.code === "ENOTDIR")
          return cb(null, false);
        return cb(err);
      });
    };
    var defaultIsDir = function isDirectory(dir, cb) {
      fs.stat(dir, function(err, stat) {
        if (!err) {
          return cb(null, stat.isDirectory());
        }
        if (err.code === "ENOENT" || err.code === "ENOTDIR")
          return cb(null, false);
        return cb(err);
      });
    };
    var defaultRealpath = function realpath(x, cb) {
      realpathFS(x, function(realpathErr, realPath) {
        if (realpathErr && realpathErr.code !== "ENOENT")
          cb(realpathErr);
        else
          cb(null, realpathErr ? x : realPath);
      });
    };
    var maybeRealpath = function maybeRealpath2(realpath, x, opts, cb) {
      if (opts && opts.preserveSymlinks === false) {
        realpath(x, cb);
      } else {
        cb(null, x);
      }
    };
    var defaultReadPackage = function defaultReadPackage2(readFile, pkgfile, cb) {
      readFile(pkgfile, function(readFileErr, body) {
        if (readFileErr)
          cb(readFileErr);
        else {
          try {
            var pkg = JSON.parse(body);
            cb(null, pkg);
          } catch (jsonErr) {
            cb(null);
          }
        }
      });
    };
    var getPackageCandidates = function getPackageCandidates2(x, start, opts) {
      var dirs = nodeModulesPaths(start, opts, x);
      for (var i = 0; i < dirs.length; i++) {
        dirs[i] = path.join(dirs[i], x);
      }
      return dirs;
    };
    module.exports = function resolve2(x, options, callback) {
      var cb = callback;
      var opts = options;
      if (typeof options === "function") {
        cb = opts;
        opts = {};
      }
      if (typeof x !== "string") {
        var err = new TypeError("Path must be a string.");
        return process.nextTick(function() {
          cb(err);
        });
      }
      opts = normalizeOptions(x, opts);
      var isFile = opts.isFile || defaultIsFile;
      var isDirectory = opts.isDirectory || defaultIsDir;
      var readFile = opts.readFile || fs.readFile;
      var realpath = opts.realpath || defaultRealpath;
      var readPackage = opts.readPackage || defaultReadPackage;
      if (opts.readFile && opts.readPackage) {
        var conflictErr = new TypeError("`readFile` and `readPackage` are mutually exclusive.");
        return process.nextTick(function() {
          cb(conflictErr);
        });
      }
      var packageIterator = opts.packageIterator;
      var extensions = opts.extensions || [".js"];
      var includeCoreModules = opts.includeCoreModules !== false;
      var basedir = opts.basedir || path.dirname(caller());
      var parent = opts.filename || basedir;
      opts.paths = opts.paths || [];
      var absoluteStart = path.resolve(basedir);
      maybeRealpath(realpath, absoluteStart, opts, function(err2, realStart) {
        if (err2)
          cb(err2);
        else
          init(realStart);
      });
      var res;
      function init(basedir2) {
        if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(x)) {
          res = path.resolve(basedir2, x);
          if (x === "." || x === ".." || x.slice(-1) === "/")
            res += "/";
          if (/\/$/.test(x) && res === basedir2) {
            loadAsDirectory(res, opts.package, onfile);
          } else
            loadAsFile(res, opts.package, onfile);
        } else if (includeCoreModules && isCore(x)) {
          return cb(null, x);
        } else
          loadNodeModules(x, basedir2, function(err2, n, pkg) {
            if (err2)
              cb(err2);
            else if (n) {
              return maybeRealpath(realpath, n, opts, function(err3, realN) {
                if (err3) {
                  cb(err3);
                } else {
                  cb(null, realN, pkg);
                }
              });
            } else {
              var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
              moduleError.code = "MODULE_NOT_FOUND";
              cb(moduleError);
            }
          });
      }
      function onfile(err2, m, pkg) {
        if (err2)
          cb(err2);
        else if (m)
          cb(null, m, pkg);
        else
          loadAsDirectory(res, function(err3, d, pkg2) {
            if (err3)
              cb(err3);
            else if (d) {
              maybeRealpath(realpath, d, opts, function(err4, realD) {
                if (err4) {
                  cb(err4);
                } else {
                  cb(null, realD, pkg2);
                }
              });
            } else {
              var moduleError = new Error("Cannot find module '" + x + "' from '" + parent + "'");
              moduleError.code = "MODULE_NOT_FOUND";
              cb(moduleError);
            }
          });
      }
      function loadAsFile(x2, thePackage, callback2) {
        var loadAsFilePackage = thePackage;
        var cb2 = callback2;
        if (typeof loadAsFilePackage === "function") {
          cb2 = loadAsFilePackage;
          loadAsFilePackage = void 0;
        }
        var exts = [""].concat(extensions);
        load(exts, x2, loadAsFilePackage);
        function load(exts2, x3, loadPackage) {
          if (exts2.length === 0)
            return cb2(null, void 0, loadPackage);
          var file = x3 + exts2[0];
          var pkg = loadPackage;
          if (pkg)
            onpkg(null, pkg);
          else
            loadpkg(path.dirname(file), onpkg);
          function onpkg(err2, pkg_, dir) {
            pkg = pkg_;
            if (err2)
              return cb2(err2);
            if (dir && pkg && opts.pathFilter) {
              var rfile = path.relative(dir, file);
              var rel = rfile.slice(0, rfile.length - exts2[0].length);
              var r = opts.pathFilter(pkg, x3, rel);
              if (r)
                return load([""].concat(extensions.slice()), path.resolve(dir, r), pkg);
            }
            isFile(file, onex);
          }
          function onex(err2, ex) {
            if (err2)
              return cb2(err2);
            if (ex)
              return cb2(null, file, pkg);
            load(exts2.slice(1), x3, pkg);
          }
        }
      }
      function loadpkg(dir, cb2) {
        if (dir === "" || dir === "/")
          return cb2(null);
        if (process.platform === "win32" && /^\w:[/\\]*$/.test(dir)) {
          return cb2(null);
        }
        if (/[/\\]node_modules[/\\]*$/.test(dir))
          return cb2(null);
        maybeRealpath(realpath, dir, opts, function(unwrapErr, pkgdir) {
          if (unwrapErr)
            return loadpkg(path.dirname(dir), cb2);
          var pkgfile = path.join(pkgdir, "package.json");
          isFile(pkgfile, function(err2, ex) {
            if (!ex)
              return loadpkg(path.dirname(dir), cb2);
            readPackage(readFile, pkgfile, function(err3, pkgParam) {
              if (err3)
                cb2(err3);
              var pkg = pkgParam;
              if (pkg && opts.packageFilter) {
                pkg = opts.packageFilter(pkg, pkgfile);
              }
              cb2(null, pkg, dir);
            });
          });
        });
      }
      function loadAsDirectory(x2, loadAsDirectoryPackage, callback2) {
        var cb2 = callback2;
        var fpkg = loadAsDirectoryPackage;
        if (typeof fpkg === "function") {
          cb2 = fpkg;
          fpkg = opts.package;
        }
        maybeRealpath(realpath, x2, opts, function(unwrapErr, pkgdir) {
          if (unwrapErr)
            return cb2(unwrapErr);
          var pkgfile = path.join(pkgdir, "package.json");
          isFile(pkgfile, function(err2, ex) {
            if (err2)
              return cb2(err2);
            if (!ex)
              return loadAsFile(path.join(x2, "index"), fpkg, cb2);
            readPackage(readFile, pkgfile, function(err3, pkgParam) {
              if (err3)
                return cb2(err3);
              var pkg = pkgParam;
              if (pkg && opts.packageFilter) {
                pkg = opts.packageFilter(pkg, pkgfile);
              }
              if (pkg && pkg.main) {
                if (typeof pkg.main !== "string") {
                  var mainError = new TypeError("package \u201C" + pkg.name + "\u201D `main` must be a string");
                  mainError.code = "INVALID_PACKAGE_MAIN";
                  return cb2(mainError);
                }
                if (pkg.main === "." || pkg.main === "./") {
                  pkg.main = "index";
                }
                loadAsFile(path.resolve(x2, pkg.main), pkg, function(err4, m, pkg2) {
                  if (err4)
                    return cb2(err4);
                  if (m)
                    return cb2(null, m, pkg2);
                  if (!pkg2)
                    return loadAsFile(path.join(x2, "index"), pkg2, cb2);
                  var dir = path.resolve(x2, pkg2.main);
                  loadAsDirectory(dir, pkg2, function(err5, n, pkg3) {
                    if (err5)
                      return cb2(err5);
                    if (n)
                      return cb2(null, n, pkg3);
                    loadAsFile(path.join(x2, "index"), pkg3, cb2);
                  });
                });
                return;
              }
              loadAsFile(path.join(x2, "/index"), pkg, cb2);
            });
          });
        });
      }
      function processDirs(cb2, dirs) {
        if (dirs.length === 0)
          return cb2(null, void 0);
        var dir = dirs[0];
        isDirectory(path.dirname(dir), isdir);
        function isdir(err2, isdir2) {
          if (err2)
            return cb2(err2);
          if (!isdir2)
            return processDirs(cb2, dirs.slice(1));
          loadAsFile(dir, opts.package, onfile2);
        }
        function onfile2(err2, m, pkg) {
          if (err2)
            return cb2(err2);
          if (m)
            return cb2(null, m, pkg);
          loadAsDirectory(dir, opts.package, ondir);
        }
        function ondir(err2, n, pkg) {
          if (err2)
            return cb2(err2);
          if (n)
            return cb2(null, n, pkg);
          processDirs(cb2, dirs.slice(1));
        }
      }
      function loadNodeModules(x2, start, cb2) {
        var thunk = function() {
          return getPackageCandidates(x2, start, opts);
        };
        processDirs(cb2, packageIterator ? packageIterator(x2, start, thunk, opts) : thunk());
      }
    };
  }
});

// node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/core.json
var require_core3 = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/core.json"(exports, module) {
    module.exports = {
      assert: true,
      "assert/strict": ">= 15",
      async_hooks: ">= 8",
      buffer_ieee754: "< 0.9.7",
      buffer: true,
      child_process: true,
      cluster: true,
      console: true,
      constants: true,
      crypto: true,
      _debug_agent: ">= 1 && < 8",
      _debugger: "< 8",
      dgram: true,
      diagnostics_channel: ">= 15.1",
      dns: true,
      "dns/promises": ">= 15",
      domain: ">= 0.7.12",
      events: true,
      freelist: "< 6",
      fs: true,
      "fs/promises": [">= 10 && < 10.1", ">= 14"],
      _http_agent: ">= 0.11.1",
      _http_client: ">= 0.11.1",
      _http_common: ">= 0.11.1",
      _http_incoming: ">= 0.11.1",
      _http_outgoing: ">= 0.11.1",
      _http_server: ">= 0.11.1",
      http: true,
      http2: ">= 8.8",
      https: true,
      inspector: ">= 8.0.0",
      _linklist: "< 8",
      module: true,
      net: true,
      "node-inspect/lib/_inspect": ">= 7.6.0 && < 12",
      "node-inspect/lib/internal/inspect_client": ">= 7.6.0 && < 12",
      "node-inspect/lib/internal/inspect_repl": ">= 7.6.0 && < 12",
      os: true,
      path: true,
      "path/posix": ">= 15.3",
      "path/win32": ">= 15.3",
      perf_hooks: ">= 8.5",
      process: ">= 1",
      punycode: true,
      querystring: true,
      readline: true,
      repl: true,
      smalloc: ">= 0.11.5 && < 3",
      _stream_duplex: ">= 0.9.4",
      _stream_transform: ">= 0.9.4",
      _stream_wrap: ">= 1.4.1",
      _stream_passthrough: ">= 0.9.4",
      _stream_readable: ">= 0.9.4",
      _stream_writable: ">= 0.9.4",
      stream: true,
      "stream/promises": ">= 15",
      string_decoder: true,
      sys: [">= 0.6 && < 0.7", ">= 0.8"],
      timers: true,
      "timers/promises": ">= 15",
      _tls_common: ">= 0.11.13",
      _tls_legacy: ">= 0.11.3 && < 10",
      _tls_wrap: ">= 0.11.3",
      tls: true,
      trace_events: ">= 10",
      tty: true,
      url: true,
      util: true,
      "util/types": ">= 15.3",
      "v8/tools/arguments": ">= 10 && < 12",
      "v8/tools/codemap": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
      "v8/tools/consarray": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
      "v8/tools/csvparser": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
      "v8/tools/logreader": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
      "v8/tools/profile_view": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
      "v8/tools/splaytree": [">= 4.4.0 && < 5", ">= 5.2.0 && < 12"],
      v8: ">= 1",
      vm: true,
      wasi: ">= 13.4 && < 13.5",
      worker_threads: ">= 11.7",
      zlib: true
    };
  }
});

// node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/core.js
var require_core4 = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/core.js"(exports, module) {
    var current = process.versions && process.versions.node && process.versions.node.split(".") || [];
    function specifierIncluded(specifier) {
      var parts = specifier.split(" ");
      var op = parts.length > 1 ? parts[0] : "=";
      var versionParts = (parts.length > 1 ? parts[1] : parts[0]).split(".");
      for (var i = 0; i < 3; ++i) {
        var cur = parseInt(current[i] || 0, 10);
        var ver = parseInt(versionParts[i] || 0, 10);
        if (cur === ver) {
          continue;
        }
        if (op === "<") {
          return cur < ver;
        } else if (op === ">=") {
          return cur >= ver;
        } else {
          return false;
        }
      }
      return op === ">=";
    }
    function matchesRange(range) {
      var specifiers = range.split(/ ?&& ?/);
      if (specifiers.length === 0) {
        return false;
      }
      for (var i = 0; i < specifiers.length; ++i) {
        if (!specifierIncluded(specifiers[i])) {
          return false;
        }
      }
      return true;
    }
    function versionIncluded(specifierValue) {
      if (typeof specifierValue === "boolean") {
        return specifierValue;
      }
      if (specifierValue && typeof specifierValue === "object") {
        for (var i = 0; i < specifierValue.length; ++i) {
          if (matchesRange(specifierValue[i])) {
            return true;
          }
        }
        return false;
      }
      return matchesRange(specifierValue);
    }
    var data = require_core3();
    var core = {};
    for (mod in data) {
      if (Object.prototype.hasOwnProperty.call(data, mod)) {
        core[mod] = versionIncluded(data[mod]);
      }
    }
    var mod;
    module.exports = core;
  }
});

// node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/is-core.js
var require_is_core = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/is-core.js"(exports, module) {
    var isCoreModule = require_is_core_module();
    module.exports = function isCore(x) {
      return isCoreModule(x);
    };
  }
});

// node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/sync.js
var require_sync = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/lib/sync.js"(exports, module) {
    var isCore = require_is_core_module();
    var fs = _chunkDUTQDV3Qjs.__require.call(void 0, "fs");
    var path = _chunkDUTQDV3Qjs.__require.call(void 0, "path");
    var caller = require_caller();
    var nodeModulesPaths = require_node_modules_paths();
    var normalizeOptions = require_normalize_options();
    var realpathFS = fs.realpathSync && typeof fs.realpathSync.native === "function" ? fs.realpathSync.native : fs.realpathSync;
    var defaultIsFile = function isFile(file) {
      try {
        var stat = fs.statSync(file);
      } catch (e) {
        if (e && (e.code === "ENOENT" || e.code === "ENOTDIR"))
          return false;
        throw e;
      }
      return stat.isFile() || stat.isFIFO();
    };
    var defaultIsDir = function isDirectory(dir) {
      try {
        var stat = fs.statSync(dir);
      } catch (e) {
        if (e && (e.code === "ENOENT" || e.code === "ENOTDIR"))
          return false;
        throw e;
      }
      return stat.isDirectory();
    };
    var defaultRealpathSync = function realpathSync(x) {
      try {
        return realpathFS(x);
      } catch (realpathErr) {
        if (realpathErr.code !== "ENOENT") {
          throw realpathErr;
        }
      }
      return x;
    };
    var maybeRealpathSync = function maybeRealpathSync2(realpathSync, x, opts) {
      if (opts && opts.preserveSymlinks === false) {
        return realpathSync(x);
      }
      return x;
    };
    var defaultReadPackageSync = function defaultReadPackageSync2(readFileSync, pkgfile) {
      var body = readFileSync(pkgfile);
      try {
        var pkg = JSON.parse(body);
        return pkg;
      } catch (jsonErr) {
      }
    };
    var getPackageCandidates = function getPackageCandidates2(x, start, opts) {
      var dirs = nodeModulesPaths(start, opts, x);
      for (var i = 0; i < dirs.length; i++) {
        dirs[i] = path.join(dirs[i], x);
      }
      return dirs;
    };
    module.exports = function resolveSync(x, options) {
      if (typeof x !== "string") {
        throw new TypeError("Path must be a string.");
      }
      var opts = normalizeOptions(x, options);
      var isFile = opts.isFile || defaultIsFile;
      var readFileSync = opts.readFileSync || fs.readFileSync;
      var isDirectory = opts.isDirectory || defaultIsDir;
      var realpathSync = opts.realpathSync || defaultRealpathSync;
      var readPackageSync = opts.readPackageSync || defaultReadPackageSync;
      if (opts.readFileSync && opts.readPackageSync) {
        throw new TypeError("`readFileSync` and `readPackageSync` are mutually exclusive.");
      }
      var packageIterator = opts.packageIterator;
      var extensions = opts.extensions || [".js"];
      var includeCoreModules = opts.includeCoreModules !== false;
      var basedir = opts.basedir || path.dirname(caller());
      var parent = opts.filename || basedir;
      opts.paths = opts.paths || [];
      var absoluteStart = maybeRealpathSync(realpathSync, path.resolve(basedir), opts);
      if (/^(?:\.\.?(?:\/|$)|\/|([A-Za-z]:)?[/\\])/.test(x)) {
        var res = path.resolve(absoluteStart, x);
        if (x === "." || x === ".." || x.slice(-1) === "/")
          res += "/";
        var m = loadAsFileSync(res) || loadAsDirectorySync(res);
        if (m)
          return maybeRealpathSync(realpathSync, m, opts);
      } else if (includeCoreModules && isCore(x)) {
        return x;
      } else {
        var n = loadNodeModulesSync(x, absoluteStart);
        if (n)
          return maybeRealpathSync(realpathSync, n, opts);
      }
      var err = new Error("Cannot find module '" + x + "' from '" + parent + "'");
      err.code = "MODULE_NOT_FOUND";
      throw err;
      function loadAsFileSync(x2) {
        var pkg = loadpkg(path.dirname(x2));
        if (pkg && pkg.dir && pkg.pkg && opts.pathFilter) {
          var rfile = path.relative(pkg.dir, x2);
          var r = opts.pathFilter(pkg.pkg, x2, rfile);
          if (r) {
            x2 = path.resolve(pkg.dir, r);
          }
        }
        if (isFile(x2)) {
          return x2;
        }
        for (var i = 0; i < extensions.length; i++) {
          var file = x2 + extensions[i];
          if (isFile(file)) {
            return file;
          }
        }
      }
      function loadpkg(dir) {
        if (dir === "" || dir === "/")
          return;
        if (process.platform === "win32" && /^\w:[/\\]*$/.test(dir)) {
          return;
        }
        if (/[/\\]node_modules[/\\]*$/.test(dir))
          return;
        var pkgfile = path.join(maybeRealpathSync(realpathSync, dir, opts), "package.json");
        if (!isFile(pkgfile)) {
          return loadpkg(path.dirname(dir));
        }
        var pkg = readPackageSync(readFileSync, pkgfile);
        if (pkg && opts.packageFilter) {
          pkg = opts.packageFilter(pkg, dir);
        }
        return { pkg, dir };
      }
      function loadAsDirectorySync(x2) {
        var pkgfile = path.join(maybeRealpathSync(realpathSync, x2, opts), "/package.json");
        if (isFile(pkgfile)) {
          try {
            var pkg = readPackageSync(readFileSync, pkgfile);
          } catch (e) {
          }
          if (pkg && opts.packageFilter) {
            pkg = opts.packageFilter(pkg, x2);
          }
          if (pkg && pkg.main) {
            if (typeof pkg.main !== "string") {
              var mainError = new TypeError("package \u201C" + pkg.name + "\u201D `main` must be a string");
              mainError.code = "INVALID_PACKAGE_MAIN";
              throw mainError;
            }
            if (pkg.main === "." || pkg.main === "./") {
              pkg.main = "index";
            }
            try {
              var m2 = loadAsFileSync(path.resolve(x2, pkg.main));
              if (m2)
                return m2;
              var n2 = loadAsDirectorySync(path.resolve(x2, pkg.main));
              if (n2)
                return n2;
            } catch (e) {
            }
          }
        }
        return loadAsFileSync(path.join(x2, "/index"));
      }
      function loadNodeModulesSync(x2, start) {
        var thunk = function() {
          return getPackageCandidates(x2, start, opts);
        };
        var dirs = packageIterator ? packageIterator(x2, start, thunk, opts) : thunk();
        for (var i = 0; i < dirs.length; i++) {
          var dir = dirs[i];
          if (isDirectory(path.dirname(dir))) {
            var m2 = loadAsFileSync(dir);
            if (m2)
              return m2;
            var n2 = loadAsDirectorySync(dir);
            if (n2)
              return n2;
          }
        }
      }
    };
  }
});

// node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/index.js
var require_resolve = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/resolve@1.20.0/node_modules/resolve/index.js"(exports, module) {
    var async = require_async();
    async.core = require_core4();
    async.isCore = require_is_core();
    async.sync = require_sync();
    module.exports = async;
  }
});

// node_modules/.pnpm/pug-filters@4.0.0/node_modules/pug-filters/lib/run-filter.js
var require_run_filter = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-filters@4.0.0/node_modules/pug-filters/lib/run-filter.js"(exports, module) {
    "use strict";
    var jstransformer = require_jstransformer();
    var resolve2 = require_resolve();
    module.exports = filter;
    function getMinifyTransformerName(outputFormat) {
      switch (outputFormat) {
        case "js":
          return "uglify-js";
        case "css":
          return "clean-css";
      }
    }
    function filter(name, str, options, currentDirectory, funcName) {
      funcName = funcName || "render";
      var trPath;
      try {
        try {
          trPath = resolve2.sync("jstransformer-" + name, {
            basedir: currentDirectory || process.cwd()
          });
        } catch (ex) {
          trPath = _chunkDUTQDV3Qjs.__require.resolve("jstransformer-" + name);
        }
      } catch (ex) {
        var err = new Error('unknown filter ":' + name + '"');
        err.code = "UNKNOWN_FILTER";
        throw err;
      }
      var tr = jstransformer(_chunkDUTQDV3Qjs.__require.call(void 0, trPath));
      var result = tr[funcName](str, options, options).body;
      if (options && options.minify) {
        var minifyTranformer = getMinifyTransformerName(tr.outputFormat);
        if (minifyTranformer) {
          try {
            result = filter(minifyTranformer, result, null, currentDirectory);
          } catch (ex) {
          }
        }
      }
      return result;
    }
  }
});

// node_modules/.pnpm/constantinople@4.0.1/node_modules/constantinople/lib/binaryOperation.js
var require_binaryOperation = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/constantinople@4.0.1/node_modules/constantinople/lib/binaryOperation.js"(exports) {
    "use strict";
    exports.__esModule = true;
    function binaryOperation(operator, left, right) {
      switch (operator) {
        case "+":
          return left + right;
        case "-":
          return left - right;
        case "/":
          return left / right;
        case "%":
          return left % right;
        case "*":
          return left * right;
        case "**":
          return Math.pow(left, right);
        case "&":
          return left & right;
        case "|":
          return left | right;
        case ">>":
          return left >> right;
        case ">>>":
          return left >>> right;
        case "<<":
          return left << right;
        case "^":
          return left ^ right;
        case "==":
          return left == right;
        case "===":
          return left === right;
        case "!=":
          return left != right;
        case "!==":
          return left !== right;
        case "in":
          return left in right;
        case "instanceof":
          return left instanceof right;
        case ">":
          return left > right;
        case "<":
          return left < right;
        case ">=":
          return left >= right;
        case "<=":
          return left <= right;
      }
    }
    exports["default"] = binaryOperation;
  }
});

// node_modules/.pnpm/constantinople@4.0.1/node_modules/constantinople/lib/index.js
var require_lib2 = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/constantinople@4.0.1/node_modules/constantinople/lib/index.js"(exports, module) {
    "use strict";
    exports.__esModule = true;
    var parser_1 = _chunkDUTQDV3Qjs.__require.call(void 0, "@babel/parser");
    var b = _chunkDUTQDV3Qjs.__require.call(void 0, "@babel/types");
    var binaryOperation_1 = require_binaryOperation();
    function expressionToConstant(expression, options) {
      if (options === void 0) {
        options = {};
      }
      var constant = true;
      function toConstant2(expression2) {
        if (!constant)
          return;
        if (b.isArrayExpression(expression2)) {
          var result_1 = [];
          for (var i = 0; constant && i < expression2.elements.length; i++) {
            var element = expression2.elements[i];
            if (b.isSpreadElement(element)) {
              var spread = toConstant2(element.argument);
              if (!(isSpreadable(spread) && constant)) {
                constant = false;
              } else {
                result_1.push.apply(result_1, spread);
              }
            } else if (b.isExpression(element)) {
              result_1.push(toConstant2(element));
            } else {
              constant = false;
            }
          }
          return result_1;
        }
        if (b.isBinaryExpression(expression2)) {
          var left = toConstant2(expression2.left);
          var right = toConstant2(expression2.right);
          return constant && binaryOperation_1["default"](expression2.operator, left, right);
        }
        if (b.isBooleanLiteral(expression2)) {
          return expression2.value;
        }
        if (b.isCallExpression(expression2)) {
          var args = [];
          for (var i = 0; constant && i < expression2.arguments.length; i++) {
            var arg = expression2.arguments[i];
            if (b.isSpreadElement(arg)) {
              var spread = toConstant2(arg.argument);
              if (!(isSpreadable(spread) && constant)) {
                constant = false;
              } else {
                args.push.apply(args, spread);
              }
            } else if (b.isExpression(arg)) {
              args.push(toConstant2(arg));
            } else {
              constant = false;
            }
          }
          if (!constant)
            return;
          if (b.isMemberExpression(expression2.callee)) {
            var object = toConstant2(expression2.callee.object);
            if (!object || !constant) {
              constant = false;
              return;
            }
            var member = expression2.callee.computed ? toConstant2(expression2.callee.property) : b.isIdentifier(expression2.callee.property) ? expression2.callee.property.name : void 0;
            if (member === void 0 && !expression2.callee.computed) {
              constant = false;
            }
            if (!constant)
              return;
            if (canCallMethod(object, "" + member)) {
              return object[member].apply(object, args);
            }
          } else {
            if (!b.isExpression(expression2.callee)) {
              constant = false;
              return;
            }
            var callee = toConstant2(expression2.callee);
            if (!constant)
              return;
            return callee.apply(null, args);
          }
        }
        if (b.isConditionalExpression(expression2)) {
          var test = toConstant2(expression2.test);
          return test ? toConstant2(expression2.consequent) : toConstant2(expression2.alternate);
        }
        if (b.isIdentifier(expression2)) {
          if (options.constants && {}.hasOwnProperty.call(options.constants, expression2.name)) {
            return options.constants[expression2.name];
          }
        }
        if (b.isLogicalExpression(expression2)) {
          var left = toConstant2(expression2.left);
          var right = toConstant2(expression2.right);
          if (constant && expression2.operator === "&&") {
            return left && right;
          }
          if (constant && expression2.operator === "||") {
            return left || right;
          }
        }
        if (b.isMemberExpression(expression2)) {
          var object = toConstant2(expression2.object);
          if (!object || !constant) {
            constant = false;
            return;
          }
          var member = expression2.computed ? toConstant2(expression2.property) : b.isIdentifier(expression2.property) ? expression2.property.name : void 0;
          if (member === void 0 && !expression2.computed) {
            constant = false;
          }
          if (!constant)
            return;
          if ({}.hasOwnProperty.call(object, "" + member) && member[0] !== "_") {
            return object[member];
          }
        }
        if (b.isNullLiteral(expression2)) {
          return null;
        }
        if (b.isNumericLiteral(expression2)) {
          return expression2.value;
        }
        if (b.isObjectExpression(expression2)) {
          var result_2 = {};
          for (var i = 0; constant && i < expression2.properties.length; i++) {
            var property = expression2.properties[i];
            if (b.isObjectProperty(property)) {
              if (property.shorthand) {
                constant = false;
                return;
              }
              var key = property.computed ? toConstant2(property.key) : b.isIdentifier(property.key) ? property.key.name : b.isStringLiteral(property.key) ? property.key.value : void 0;
              if (!key || key[0] === "_") {
                constant = false;
              }
              if (!constant)
                return;
              if (b.isExpression(property.value)) {
                var value = toConstant2(property.value);
                if (!constant)
                  return;
                result_2[key] = value;
              } else {
                constant = false;
              }
            } else if (b.isObjectMethod(property)) {
              constant = false;
            } else if (b.isSpreadProperty(property)) {
              var argument = toConstant2(property.argument);
              if (!argument)
                constant = false;
              if (!constant)
                return;
              Object.assign(result_2, argument);
            }
          }
          return result_2;
        }
        if (b.isParenthesizedExpression(expression2)) {
          return toConstant2(expression2.expression);
        }
        if (b.isRegExpLiteral(expression2)) {
          return new RegExp(expression2.pattern, expression2.flags);
        }
        if (b.isSequenceExpression(expression2)) {
          for (var i = 0; i < expression2.expressions.length - 1 && constant; i++) {
            toConstant2(expression2.expressions[i]);
          }
          return toConstant2(expression2.expressions[expression2.expressions.length - 1]);
        }
        if (b.isStringLiteral(expression2)) {
          return expression2.value;
        }
        if (b.isTemplateLiteral(expression2)) {
          var result_3 = "";
          for (var i = 0; i < expression2.quasis.length; i++) {
            var quasi = expression2.quasis[i];
            result_3 += quasi.value.cooked;
            if (i < expression2.expressions.length) {
              result_3 += "" + toConstant2(expression2.expressions[i]);
            }
          }
          return result_3;
        }
        if (b.isUnaryExpression(expression2)) {
          var argument = toConstant2(expression2.argument);
          if (!constant) {
            return;
          }
          switch (expression2.operator) {
            case "-":
              return -argument;
            case "+":
              return +argument;
            case "!":
              return !argument;
            case "~":
              return ~argument;
            case "typeof":
              return typeof argument;
            case "void":
              return void 0;
          }
        }
        constant = false;
      }
      var result = toConstant2(expression);
      return constant ? { constant: true, result } : { constant: false };
    }
    exports.expressionToConstant = expressionToConstant;
    function isSpreadable(value) {
      return typeof value === "string" || Array.isArray(value) || typeof Set !== "undefined" && value instanceof Set || typeof Map !== "undefined" && value instanceof Map;
    }
    function shallowEqual(a, b2) {
      if (a === b2)
        return true;
      if (a && b2 && typeof a === "object" && typeof b2 === "object") {
        for (var key in a) {
          if (a[key] !== b2[key]) {
            return false;
          }
        }
        for (var key in b2) {
          if (a[key] !== b2[key]) {
            return false;
          }
        }
        return true;
      }
      return false;
    }
    function canCallMethod(object, member) {
      switch (typeof object) {
        case "boolean":
          switch (member) {
            case "toString":
              return true;
            default:
              return false;
          }
        case "number":
          switch (member) {
            case "toExponential":
            case "toFixed":
            case "toPrecision":
            case "toString":
              return true;
            default:
              return false;
          }
        case "string":
          switch (member) {
            case "charAt":
            case "charCodeAt":
            case "codePointAt":
            case "concat":
            case "endsWith":
            case "includes":
            case "indexOf":
            case "lastIndexOf":
            case "match":
            case "normalize":
            case "padEnd":
            case "padStart":
            case "repeat":
            case "replace":
            case "search":
            case "slice":
            case "split":
            case "startsWith":
            case "substr":
            case "substring":
            case "toLowerCase":
            case "toUpperCase":
            case "trim":
              return true;
            default:
              return false;
          }
        default:
          if (object instanceof RegExp) {
            switch (member) {
              case "test":
              case "exec":
                return true;
              default:
                return false;
            }
          }
          return {}.hasOwnProperty.call(object, member) && member[0] !== "_";
      }
    }
    var EMPTY_OBJECT = {};
    var lastSrc = "";
    var lastConstants = EMPTY_OBJECT;
    var lastOptions = EMPTY_OBJECT;
    var lastResult = null;
    var lastWasConstant = false;
    function isConstant(src, constants, options) {
      if (constants === void 0) {
        constants = EMPTY_OBJECT;
      }
      if (options === void 0) {
        options = EMPTY_OBJECT;
      }
      if (lastSrc === src && shallowEqual(lastConstants, constants) && shallowEqual(lastOptions, options)) {
        return lastWasConstant;
      }
      lastSrc = src;
      lastConstants = constants;
      var ast;
      try {
        ast = parser_1.parseExpression(src, options);
      } catch (ex) {
        return lastWasConstant = false;
      }
      var _a = expressionToConstant(ast, { constants }), result = _a.result, constant = _a.constant;
      lastResult = result;
      return lastWasConstant = constant;
    }
    exports.isConstant = isConstant;
    function toConstant(src, constants, options) {
      if (constants === void 0) {
        constants = EMPTY_OBJECT;
      }
      if (options === void 0) {
        options = EMPTY_OBJECT;
      }
      if (!isConstant(src, constants, options)) {
        throw new Error(JSON.stringify(src) + " is not constant.");
      }
      return lastResult;
    }
    exports.toConstant = toConstant;
    exports["default"] = isConstant;
    module.exports = isConstant;
    module.exports["default"] = isConstant;
    module.exports.expressionToConstant = expressionToConstant;
    module.exports.isConstant = isConstant;
    module.exports.toConstant = toConstant;
  }
});

// node_modules/.pnpm/pug-filters@4.0.0/node_modules/pug-filters/lib/handle-filters.js
var require_handle_filters = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-filters@4.0.0/node_modules/pug-filters/lib/handle-filters.js"(exports, module) {
    "use strict";
    var dirname = _chunkDUTQDV3Qjs.__require.call(void 0, "path").dirname;
    var constantinople = require_lib2();
    var walk = require_pug_walk();
    var error = require_pug_error();
    var runFilter = require_run_filter();
    module.exports = handleFilters;
    function handleFilters(ast, filters, options, filterAliases) {
      options = options || {};
      walk(ast, function(node) {
        var dir = node.filename ? dirname(node.filename) : null;
        if (node.type === "Filter") {
          handleNestedFilters(node, filters, options, filterAliases);
          var text = getBodyAsText(node);
          var attrs = getAttributes(node, options);
          attrs.filename = node.filename;
          node.type = "Text";
          node.val = filterWithFallback(node, text, attrs);
        } else if (node.type === "RawInclude" && node.filters.length) {
          var firstFilter = node.filters.pop();
          var attrs = getAttributes(firstFilter, options);
          var filename = attrs.filename = node.file.fullPath;
          node.type = "Text";
          node.val = filterFileWithFallback(firstFilter, filename, node.file, attrs);
          node.filters.slice().reverse().forEach(function(filter) {
            var attrs2 = getAttributes(filter, options);
            attrs2.filename = filename;
            node.val = filterWithFallback(filter, node.val, attrs2);
          });
          node.filters = void 0;
          node.file = void 0;
        }
        function filterWithFallback(filter, text2, attrs2, funcName) {
          try {
            var filterName = getFilterName(filter);
            if (filters && filters[filterName]) {
              return filters[filterName](text2, attrs2);
            } else {
              return runFilter(filterName, text2, attrs2, dir, funcName);
            }
          } catch (ex) {
            if (ex.code === "UNKNOWN_FILTER") {
              throw error(ex.code, ex.message, filter);
            }
            throw ex;
          }
        }
        function filterFileWithFallback(filter, filename2, file, attrs2) {
          var filterName = getFilterName(filter);
          if (filters && filters[filterName]) {
            if (filters[filterName].renderBuffer) {
              return filters[filterName].renderBuffer(file.raw, attrs2);
            } else {
              return filters[filterName](file.str, attrs2);
            }
          } else {
            return filterWithFallback(filter, filename2, attrs2, "renderFile");
          }
        }
      }, { includeDependencies: true });
      function getFilterName(filter) {
        var filterName = filter.name;
        if (filterAliases && filterAliases[filterName]) {
          filterName = filterAliases[filterName];
          if (filterAliases[filterName]) {
            throw error("FILTER_ALISE_CHAIN", 'The filter "' + filter.name + '" is an alias for "' + filterName + '", which is an alias for "' + filterAliases[filterName] + '".  Pug does not support chains of filter aliases.', filter);
          }
        }
        return filterName;
      }
      return ast;
    }
    function handleNestedFilters(node, filters, options, filterAliases) {
      if (node.block.nodes[0] && node.block.nodes[0].type === "Filter") {
        node.block.nodes[0] = handleFilters(node.block, filters, options, filterAliases).nodes[0];
      }
    }
    function getBodyAsText(node) {
      return node.block.nodes.map(function(node2) {
        return node2.val;
      }).join("");
    }
    function getAttributes(node, options) {
      var attrs = {};
      node.attrs.forEach(function(attr) {
        try {
          attrs[attr.name] = attr.val === true ? true : constantinople.toConstant(attr.val);
        } catch (ex) {
          if (/not constant/.test(ex.message)) {
            throw error("FILTER_OPTION_NOT_CONSTANT", ex.message + " All filters are rendered compile-time so filter options must be constants.", node);
          }
          throw ex;
        }
      });
      var opts = options[node.name] || {};
      Object.keys(opts).forEach(function(opt) {
        if (!attrs.hasOwnProperty(opt)) {
          attrs[opt] = opts[opt];
        }
      });
      return attrs;
    }
  }
});

// node_modules/.pnpm/pug-filters@4.0.0/node_modules/pug-filters/index.js
var require_pug_filters = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-filters@4.0.0/node_modules/pug-filters/index.js"(exports) {
    "use strict";
    exports.runFilter = require_run_filter();
    exports.handleFilters = require_handle_filters();
  }
});

// node_modules/.pnpm/pug-linker@4.0.0/node_modules/pug-linker/index.js
var require_pug_linker = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-linker@4.0.0/node_modules/pug-linker/index.js"(exports, module) {
    "use strict";
    var assert = _chunkDUTQDV3Qjs.__require.call(void 0, "assert");
    var walk = require_pug_walk();
    function error() {
      throw require_pug_error().apply(null, arguments);
    }
    module.exports = link;
    function link(ast) {
      assert(ast.type === "Block", "The top level element should always be a block");
      var extendsNode = null;
      if (ast.nodes.length) {
        var hasExtends = ast.nodes[0].type === "Extends";
        checkExtendPosition(ast, hasExtends);
        if (hasExtends) {
          extendsNode = ast.nodes.shift();
        }
      }
      ast = applyIncludes(ast);
      ast.declaredBlocks = findDeclaredBlocks(ast);
      if (extendsNode) {
        var mixins = [];
        var expectedBlocks = [];
        ast.nodes.forEach(function addNode(node) {
          if (node.type === "NamedBlock") {
            expectedBlocks.push(node);
          } else if (node.type === "Block") {
            node.nodes.forEach(addNode);
          } else if (node.type === "Mixin" && node.call === false) {
            mixins.push(node);
          } else {
            error("UNEXPECTED_NODES_IN_EXTENDING_ROOT", "Only named blocks and mixins can appear at the top level of an extending template", node);
          }
        });
        var parent = link(extendsNode.file.ast);
        extend(parent.declaredBlocks, ast);
        var foundBlockNames = [];
        walk(parent, function(node) {
          if (node.type === "NamedBlock") {
            foundBlockNames.push(node.name);
          }
        });
        expectedBlocks.forEach(function(expectedBlock) {
          if (foundBlockNames.indexOf(expectedBlock.name) === -1) {
            error("UNEXPECTED_BLOCK", "Unexpected block " + expectedBlock.name, expectedBlock);
          }
        });
        Object.keys(ast.declaredBlocks).forEach(function(name) {
          parent.declaredBlocks[name] = ast.declaredBlocks[name];
        });
        parent.nodes = mixins.concat(parent.nodes);
        parent.hasExtends = true;
        return parent;
      }
      return ast;
    }
    function findDeclaredBlocks(ast) {
      var definitions = {};
      walk(ast, function before(node) {
        if (node.type === "NamedBlock" && node.mode === "replace") {
          definitions[node.name] = definitions[node.name] || [];
          definitions[node.name].push(node);
        }
      });
      return definitions;
    }
    function flattenParentBlocks(parentBlocks, accumulator) {
      accumulator = accumulator || [];
      parentBlocks.forEach(function(parentBlock) {
        if (parentBlock.parents) {
          flattenParentBlocks(parentBlock.parents, accumulator);
        }
        accumulator.push(parentBlock);
      });
      return accumulator;
    }
    function extend(parentBlocks, ast) {
      var stack = {};
      walk(ast, function before(node) {
        if (node.type === "NamedBlock") {
          if (stack[node.name] === node.name) {
            return node.ignore = true;
          }
          stack[node.name] = node.name;
          var parentBlockList = parentBlocks[node.name] ? flattenParentBlocks(parentBlocks[node.name]) : [];
          if (parentBlockList.length) {
            node.parents = parentBlockList;
            parentBlockList.forEach(function(parentBlock) {
              switch (node.mode) {
                case "append":
                  parentBlock.nodes = parentBlock.nodes.concat(node.nodes);
                  break;
                case "prepend":
                  parentBlock.nodes = node.nodes.concat(parentBlock.nodes);
                  break;
                case "replace":
                  parentBlock.nodes = node.nodes;
                  break;
              }
            });
          }
        }
      }, function after(node) {
        if (node.type === "NamedBlock" && !node.ignore) {
          delete stack[node.name];
        }
      });
    }
    function applyIncludes(ast, child) {
      return walk(ast, function before(node, replace) {
        if (node.type === "RawInclude") {
          replace({ type: "Text", val: node.file.str.replace(/\r/g, "") });
        }
      }, function after(node, replace) {
        if (node.type === "Include") {
          var childAST = link(node.file.ast);
          if (childAST.hasExtends) {
            childAST = removeBlocks(childAST);
          }
          replace(applyYield(childAST, node.block));
        }
      });
    }
    function removeBlocks(ast) {
      return walk(ast, function(node, replace) {
        if (node.type === "NamedBlock") {
          replace({
            type: "Block",
            nodes: node.nodes
          });
        }
      });
    }
    function applyYield(ast, block) {
      if (!block || !block.nodes.length)
        return ast;
      var replaced = false;
      ast = walk(ast, null, function(node, replace) {
        if (node.type === "YieldBlock") {
          replaced = true;
          node.type = "Block";
          node.nodes = [block];
        }
      });
      function defaultYieldLocation(node) {
        var res = node;
        for (var i = 0; i < node.nodes.length; i++) {
          if (node.nodes[i].textOnly)
            continue;
          if (node.nodes[i].type === "Block") {
            res = defaultYieldLocation(node.nodes[i]);
          } else if (node.nodes[i].block && node.nodes[i].block.nodes.length) {
            res = defaultYieldLocation(node.nodes[i].block);
          }
        }
        return res;
      }
      if (!replaced) {
        defaultYieldLocation(ast).nodes.push(block);
      }
      return ast;
    }
    function checkExtendPosition(ast, hasExtends) {
      var legitExtendsReached = false;
      walk(ast, function(node) {
        if (node.type === "Extends") {
          if (hasExtends && !legitExtendsReached) {
            legitExtendsReached = true;
          } else {
            error("EXTENDS_NOT_FIRST", 'Declaration of template inheritance ("extends") should be the first thing in the file. There can only be one extends statement per file.', node);
          }
        }
      });
    }
  }
});

// node_modules/.pnpm/doctypes@1.1.0/node_modules/doctypes/index.js
var require_doctypes = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/doctypes@1.1.0/node_modules/doctypes/index.js"(exports, module) {
    "use strict";
    module.exports = {
      "html": "<!DOCTYPE html>",
      "xml": '<?xml version="1.0" encoding="utf-8" ?>',
      "transitional": '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">',
      "strict": '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">',
      "frameset": '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Frameset//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd">',
      "1.1": '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">',
      "basic": '<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML Basic 1.1//EN" "http://www.w3.org/TR/xhtml-basic/xhtml-basic11.dtd">',
      "mobile": '<!DOCTYPE html PUBLIC "-//WAPFORUM//DTD XHTML Mobile 1.2//EN" "http://www.openmobilealliance.org/tech/DTD/xhtml-mobile12.dtd">',
      "plist": '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">'
    };
  }
});

// node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/lib/dependencies.js
var require_dependencies = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/lib/dependencies.js"(exports, module) {
    module.exports = {
      "has_own_property": [],
      "merge": [
        "style"
      ],
      "classes_array": [
        "classes",
        "escape"
      ],
      "classes_object": [
        "has_own_property"
      ],
      "classes": [
        "classes_array",
        "classes_object"
      ],
      "style": [
        "has_own_property"
      ],
      "attr": [
        "escape"
      ],
      "attrs": [
        "attr",
        "classes",
        "has_own_property",
        "style"
      ],
      "match_html": [],
      "escape": [
        "match_html"
      ],
      "rethrow": []
    };
  }
});

// node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/lib/internals.js
var require_internals = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/lib/internals.js"(exports, module) {
    module.exports = {
      "dependencies": true,
      "internals": true,
      "has_own_property": true,
      "classes_array": true,
      "classes_object": true,
      "match_html": true
    };
  }
});

// node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/lib/sources.js
var require_sources = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/lib/sources.js"(exports, module) {
    module.exports = {
      "has_own_property": "var pug_has_own_property=Object.prototype.hasOwnProperty;",
      "merge": 'function pug_merge(e,r){if(1===arguments.length){for(var t=e[0],g=1;g<e.length;g++)t=pug_merge(t,e[g]);return t}for(var l in r)if("class"===l){var n=e[l]||[];e[l]=(Array.isArray(n)?n:[n]).concat(r[l]||[])}else if("style"===l){var n=pug_style(e[l]);n=n&&";"!==n[n.length-1]?n+";":n;var a=pug_style(r[l]);a=a&&";"!==a[a.length-1]?a+";":a,e[l]=n+a}else e[l]=r[l];return e}',
      "classes_array": 'function pug_classes_array(r,a){for(var s,e="",u="",c=Array.isArray(a),g=0;g<r.length;g++)(s=pug_classes(r[g]))&&(c&&a[g]&&(s=pug_escape(s)),e=e+u+s,u=" ");return e}',
      "classes_object": 'function pug_classes_object(r){var a="",n="";for(var o in r)o&&r[o]&&pug_has_own_property.call(r,o)&&(a=a+n+o,n=" ");return a}',
      "classes": 'function pug_classes(s,r){return Array.isArray(s)?pug_classes_array(s,r):s&&"object"==typeof s?pug_classes_object(s):s||""}',
      "style": 'function pug_style(r){if(!r)return"";if("object"==typeof r){var t="";for(var e in r)pug_has_own_property.call(r,e)&&(t=t+e+":"+r[e]+";");return t}return r+""}',
      "attr": `function pug_attr(t,e,n,r){if(!1===e||null==e||!e&&("class"===t||"style"===t))return"";if(!0===e)return" "+(r?t:t+'="'+t+'"');var f=typeof e;return"object"!==f&&"function"!==f||"function"!=typeof e.toJSON||(e=e.toJSON()),"string"==typeof e||(e=JSON.stringify(e),n||-1===e.indexOf('"'))?(n&&(e=pug_escape(e))," "+t+'="'+e+'"'):" "+t+"='"+e.replace(/'/g,"&#39;")+"'"}`,
      "attrs": 'function pug_attrs(t,r){var a="";for(var s in t)if(pug_has_own_property.call(t,s)){var u=t[s];if("class"===s){u=pug_classes(u),a=pug_attr(s,u,!1,r)+a;continue}"style"===s&&(u=pug_style(u)),a+=pug_attr(s,u,!1,r)}return a}',
      "match_html": 'var pug_match_html=/["&<>]/;',
      "escape": 'function pug_escape(e){var a=""+e,t=pug_match_html.exec(a);if(!t)return e;var r,c,n,s="";for(r=t.index,c=0;r<a.length;r++){switch(a.charCodeAt(r)){case 34:n="&quot;";break;case 38:n="&amp;";break;case 60:n="&lt;";break;case 62:n="&gt;";break;default:continue}c!==r&&(s+=a.substring(c,r)),c=r+1,s+=n}return c!==r?s+a.substring(c,r):s}',
      "rethrow": 'function pug_rethrow(e,n,r,t){if(!(e instanceof Error))throw e;if(!("undefined"==typeof window&&n||t))throw e.message+=" on line "+r,e;var o,a,i,s;try{t=t||require("fs").readFileSync(n,{encoding:"utf8"}),o=3,a=t.split("\\n"),i=Math.max(r-o,0),s=Math.min(a.length,r+o)}catch(t){return e.message+=" - could not read from "+n+" ("+t.message+")",void pug_rethrow(e,null,r)}o=a.slice(i,s).map(function(e,n){var t=n+i+1;return(t==r?"  > ":"    ")+t+"| "+e}).join("\\n"),e.path=n;try{e.message=(n||"Pug")+":"+r+"\\n"+o+"\\n\\n"+e.message}catch(e){}throw e}'
    };
  }
});

// node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/build.js
var require_build = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/build.js"(exports, module) {
    "use strict";
    var fs = _chunkDUTQDV3Qjs.__require.call(void 0, "fs");
    var dependencies = require_dependencies();
    var internals = require_internals();
    var sources = require_sources();
    module.exports = build;
    function build(functions) {
      var fns = [];
      functions = functions.filter(function(fn) {
        return !internals[fn];
      });
      for (var i = 0; i < functions.length; i++) {
        if (fns.indexOf(functions[i]) === -1) {
          fns.push(functions[i]);
          functions.push.apply(functions, dependencies[functions[i]]);
        }
      }
      return fns.sort().map(function(name) {
        return sources[name];
      }).join("\n");
    }
  }
});

// node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/index.js
var require_pug_runtime = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/index.js"(exports) {
    "use strict";
    var pug_has_own_property = Object.prototype.hasOwnProperty;
    exports.merge = pug_merge;
    function pug_merge(a, b) {
      if (arguments.length === 1) {
        var attrs = a[0];
        for (var i = 1; i < a.length; i++) {
          attrs = pug_merge(attrs, a[i]);
        }
        return attrs;
      }
      for (var key in b) {
        if (key === "class") {
          var valA = a[key] || [];
          a[key] = (Array.isArray(valA) ? valA : [valA]).concat(b[key] || []);
        } else if (key === "style") {
          var valA = pug_style(a[key]);
          valA = valA && valA[valA.length - 1] !== ";" ? valA + ";" : valA;
          var valB = pug_style(b[key]);
          valB = valB && valB[valB.length - 1] !== ";" ? valB + ";" : valB;
          a[key] = valA + valB;
        } else {
          a[key] = b[key];
        }
      }
      return a;
    }
    exports.classes = pug_classes;
    function pug_classes_array(val, escaping) {
      var classString = "", className, padding = "", escapeEnabled = Array.isArray(escaping);
      for (var i = 0; i < val.length; i++) {
        className = pug_classes(val[i]);
        if (!className)
          continue;
        escapeEnabled && escaping[i] && (className = pug_escape(className));
        classString = classString + padding + className;
        padding = " ";
      }
      return classString;
    }
    function pug_classes_object(val) {
      var classString = "", padding = "";
      for (var key in val) {
        if (key && val[key] && pug_has_own_property.call(val, key)) {
          classString = classString + padding + key;
          padding = " ";
        }
      }
      return classString;
    }
    function pug_classes(val, escaping) {
      if (Array.isArray(val)) {
        return pug_classes_array(val, escaping);
      } else if (val && typeof val === "object") {
        return pug_classes_object(val);
      } else {
        return val || "";
      }
    }
    exports.style = pug_style;
    function pug_style(val) {
      if (!val)
        return "";
      if (typeof val === "object") {
        var out = "";
        for (var style in val) {
          if (pug_has_own_property.call(val, style)) {
            out = out + style + ":" + val[style] + ";";
          }
        }
        return out;
      } else {
        return val + "";
      }
    }
    exports.attr = pug_attr;
    function pug_attr(key, val, escaped, terse) {
      if (val === false || val == null || !val && (key === "class" || key === "style")) {
        return "";
      }
      if (val === true) {
        return " " + (terse ? key : key + '="' + key + '"');
      }
      var type = typeof val;
      if ((type === "object" || type === "function") && typeof val.toJSON === "function") {
        val = val.toJSON();
      }
      if (typeof val !== "string") {
        val = JSON.stringify(val);
        if (!escaped && val.indexOf('"') !== -1) {
          return " " + key + "='" + val.replace(/'/g, "&#39;") + "'";
        }
      }
      if (escaped)
        val = pug_escape(val);
      return " " + key + '="' + val + '"';
    }
    exports.attrs = pug_attrs;
    function pug_attrs(obj, terse) {
      var attrs = "";
      for (var key in obj) {
        if (pug_has_own_property.call(obj, key)) {
          var val = obj[key];
          if (key === "class") {
            val = pug_classes(val);
            attrs = pug_attr(key, val, false, terse) + attrs;
            continue;
          }
          if (key === "style") {
            val = pug_style(val);
          }
          attrs += pug_attr(key, val, false, terse);
        }
      }
      return attrs;
    }
    var pug_match_html = /["&<>]/;
    exports.escape = pug_escape;
    function pug_escape(_html) {
      var html = "" + _html;
      var regexResult = pug_match_html.exec(html);
      if (!regexResult)
        return _html;
      var result = "";
      var i, lastIndex, escape;
      for (i = regexResult.index, lastIndex = 0; i < html.length; i++) {
        switch (html.charCodeAt(i)) {
          case 34:
            escape = "&quot;";
            break;
          case 38:
            escape = "&amp;";
            break;
          case 60:
            escape = "&lt;";
            break;
          case 62:
            escape = "&gt;";
            break;
          default:
            continue;
        }
        if (lastIndex !== i)
          result += html.substring(lastIndex, i);
        lastIndex = i + 1;
        result += escape;
      }
      if (lastIndex !== i)
        return result + html.substring(lastIndex, i);
      else
        return result;
    }
    exports.rethrow = pug_rethrow;
    function pug_rethrow(err, filename, lineno, str) {
      if (!(err instanceof Error))
        throw err;
      if ((typeof window != "undefined" || !filename) && !str) {
        err.message += " on line " + lineno;
        throw err;
      }
      var context, lines, start, end;
      try {
        str = str || _chunkDUTQDV3Qjs.__require.call(void 0, "fs").readFileSync(filename, { encoding: "utf8" });
        context = 3;
        lines = str.split("\n");
        start = Math.max(lineno - context, 0);
        end = Math.min(lines.length, lineno + context);
      } catch (ex) {
        err.message += " - could not read from " + filename + " (" + ex.message + ")";
        pug_rethrow(err, null, lineno);
        return;
      }
      context = lines.slice(start, end).map(function(line, i) {
        var curr = i + start + 1;
        return (curr == lineno ? "  > " : "    ") + curr + "| " + line;
      }).join("\n");
      err.path = filename;
      try {
        err.message = (filename || "Pug") + ":" + lineno + "\n" + context + "\n\n" + err.message;
      } catch (e) {
      }
      throw err;
    }
  }
});

// node_modules/.pnpm/js-stringify@1.0.2/node_modules/js-stringify/index.js
var require_js_stringify = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/js-stringify@1.0.2/node_modules/js-stringify/index.js"(exports, module) {
    "use strict";
    module.exports = stringify;
    function stringify(obj) {
      if (obj instanceof Date) {
        return "new Date(" + stringify(obj.toISOString()) + ")";
      }
      if (obj === void 0) {
        return "undefined";
      }
      return JSON.stringify(obj).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029").replace(/</g, "\\u003C").replace(/>/g, "\\u003E").replace(/\//g, "\\u002F");
    }
  }
});

// node_modules/.pnpm/pug-attrs@3.0.0/node_modules/pug-attrs/index.js
var require_pug_attrs = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-attrs@3.0.0/node_modules/pug-attrs/index.js"(exports, module) {
    "use strict";
    var assert = _chunkDUTQDV3Qjs.__require.call(void 0, "assert");
    var constantinople = require_lib2();
    var runtime = require_pug_runtime();
    var stringify = require_js_stringify();
    function isConstant(src) {
      return constantinople(src, { pug: runtime, pug_interp: void 0 });
    }
    function toConstant(src) {
      return constantinople.toConstant(src, { pug: runtime, pug_interp: void 0 });
    }
    module.exports = compileAttrs;
    function compileAttrs(attrs, options) {
      assert(Array.isArray(attrs), "Attrs should be an array");
      assert(attrs.every(function(attr) {
        return attr && typeof attr === "object" && typeof attr.name === "string" && (typeof attr.val === "string" || typeof attr.val === "boolean") && typeof attr.mustEscape === "boolean";
      }), "All attributes should be supplied as an object of the form {name, val, mustEscape}");
      assert(options && typeof options === "object", "Options should be an object");
      assert(typeof options.terse === "boolean", "Options.terse should be a boolean");
      assert(typeof options.runtime === "function", "Options.runtime should be a function that takes a runtime function name and returns the source code that will evaluate to that function at runtime");
      assert(options.format === "html" || options.format === "object", 'Options.format should be "html" or "object"');
      var buf = [];
      var classes = [];
      var classEscaping = [];
      function addAttribute(key, val, mustEscape, buf2) {
        if (isConstant(val)) {
          if (options.format === "html") {
            var str = stringify(runtime.attr(key, toConstant(val), mustEscape, options.terse));
            var last = buf2[buf2.length - 1];
            if (last && last[last.length - 1] === str[0]) {
              buf2[buf2.length - 1] = last.substr(0, last.length - 1) + str.substr(1);
            } else {
              buf2.push(str);
            }
          } else {
            val = toConstant(val);
            if (mustEscape) {
              val = runtime.escape(val);
            }
            buf2.push(stringify(key) + ": " + stringify(val));
          }
        } else {
          if (options.format === "html") {
            buf2.push(options.runtime("attr") + '("' + key + '", ' + val + ", " + stringify(mustEscape) + ", " + stringify(options.terse) + ")");
          } else {
            if (mustEscape) {
              val = options.runtime("escape") + "(" + val + ")";
            }
            buf2.push(stringify(key) + ": " + val);
          }
        }
      }
      attrs.forEach(function(attr) {
        var key = attr.name;
        var val = attr.val;
        var mustEscape = attr.mustEscape;
        if (key === "class") {
          classes.push(val);
          classEscaping.push(mustEscape);
        } else {
          if (key === "style") {
            if (isConstant(val)) {
              val = stringify(runtime.style(toConstant(val)));
            } else {
              val = options.runtime("style") + "(" + val + ")";
            }
          }
          addAttribute(key, val, mustEscape, buf);
        }
      });
      var classesBuf = [];
      if (classes.length) {
        if (classes.every(isConstant)) {
          addAttribute("class", stringify(runtime.classes(classes.map(toConstant), classEscaping)), false, classesBuf);
        } else {
          classes = classes.map(function(cls, i) {
            if (isConstant(cls)) {
              cls = stringify(classEscaping[i] ? runtime.escape(toConstant(cls)) : toConstant(cls));
              classEscaping[i] = false;
            }
            return cls;
          });
          addAttribute("class", options.runtime("classes") + "([" + classes.join(",") + "], " + stringify(classEscaping) + ")", false, classesBuf);
        }
      }
      buf = classesBuf.concat(buf);
      if (options.format === "html")
        return buf.length ? buf.join("+") : '""';
      else
        return "{" + buf.join(",") + "}";
    }
  }
});

// node_modules/.pnpm/void-elements@3.1.0/node_modules/void-elements/index.js
var require_void_elements = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/void-elements@3.1.0/node_modules/void-elements/index.js"(exports, module) {
    module.exports = {
      "area": true,
      "base": true,
      "br": true,
      "col": true,
      "embed": true,
      "hr": true,
      "img": true,
      "input": true,
      "link": true,
      "meta": true,
      "param": true,
      "source": true,
      "track": true,
      "wbr": true
    };
  }
});

// node_modules/.pnpm/babel-walk@3.0.0-canary-5/node_modules/babel-walk/lib/explode.js
var require_explode = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/babel-walk@3.0.0-canary-5/node_modules/babel-walk/lib/explode.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var t4 = __importStar(_chunkDUTQDV3Qjs.__require.call(void 0, "@babel/types"));
    if (!(Array.isArray(t4.TYPES) && t4.TYPES.every((t5) => typeof t5 === "string"))) {
      throw new Error("@babel/types TYPES does not match the expected type.");
    }
    var FLIPPED_ALIAS_KEYS = t4.FLIPPED_ALIAS_KEYS;
    var TYPES = new Set(t4.TYPES);
    if (!(FLIPPED_ALIAS_KEYS && typeof FLIPPED_ALIAS_KEYS === "object" && Object.keys(FLIPPED_ALIAS_KEYS).every((key) => Array.isArray(FLIPPED_ALIAS_KEYS[key]) && FLIPPED_ALIAS_KEYS[key].every((v) => typeof v === "string")))) {
      throw new Error("@babel/types FLIPPED_ALIAS_KEYS does not match the expected type.");
    }
    function explode(input) {
      const results = {};
      for (const key in input) {
        const aliases = FLIPPED_ALIAS_KEYS[key];
        if (aliases) {
          for (const concreteKey of aliases) {
            if (concreteKey in results) {
              if (typeof input[key] === "function") {
                results[concreteKey].enter.push(input[key]);
              } else {
                if (input[key].enter)
                  results[concreteKey].enter.push(input[key].enter);
                if (input[key].exit)
                  results[concreteKey].exit.push(input[key].exit);
              }
            } else {
              if (typeof input[key] === "function") {
                results[concreteKey] = {
                  enter: [input[key]],
                  exit: []
                };
              } else {
                results[concreteKey] = {
                  enter: input[key].enter ? [input[key].enter] : [],
                  exit: input[key].exit ? [input[key].exit] : []
                };
              }
            }
          }
        } else if (TYPES.has(key)) {
          if (key in results) {
            if (typeof input[key] === "function") {
              results[key].enter.push(input[key]);
            } else {
              if (input[key].enter)
                results[key].enter.push(input[key].enter);
              if (input[key].exit)
                results[key].exit.push(input[key].exit);
            }
          } else {
            if (typeof input[key] === "function") {
              results[key] = {
                enter: [input[key]],
                exit: []
              };
            } else {
              results[key] = {
                enter: input[key].enter ? [input[key].enter] : [],
                exit: input[key].exit ? [input[key].exit] : []
              };
            }
          }
        }
      }
      return results;
    }
    exports.default = explode;
  }
});

// node_modules/.pnpm/babel-walk@3.0.0-canary-5/node_modules/babel-walk/lib/index.js
var require_lib3 = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/babel-walk@3.0.0-canary-5/node_modules/babel-walk/lib/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.recursive = exports.ancestor = exports.simple = void 0;
    var t4 = __importStar(_chunkDUTQDV3Qjs.__require.call(void 0, "@babel/types"));
    var explode_1 = __importDefault(require_explode());
    var VISITOR_KEYS = t4.VISITOR_KEYS;
    if (!(VISITOR_KEYS && typeof VISITOR_KEYS === "object" && Object.keys(VISITOR_KEYS).every((key) => Array.isArray(VISITOR_KEYS[key]) && VISITOR_KEYS[key].every((v) => typeof v === "string")))) {
      throw new Error("@babel/types VISITOR_KEYS does not match the expected type.");
    }
    function simple(visitors) {
      const vis = explode_1.default(visitors);
      return (node, state) => {
        (function recurse(node2) {
          if (!node2)
            return;
          const visitor = vis[node2.type];
          if (visitor === null || visitor === void 0 ? void 0 : visitor.enter) {
            for (const v of visitor.enter) {
              v(node2, state);
            }
          }
          for (const key of VISITOR_KEYS[node2.type] || []) {
            const subNode = node2[key];
            if (Array.isArray(subNode)) {
              for (const subSubNode of subNode) {
                recurse(subSubNode);
              }
            } else {
              recurse(subNode);
            }
          }
          if (visitor === null || visitor === void 0 ? void 0 : visitor.exit) {
            for (const v of visitor.exit) {
              v(node2, state);
            }
          }
        })(node);
      };
    }
    exports.simple = simple;
    function ancestor(visitors) {
      const vis = explode_1.default(visitors);
      return (node, state) => {
        const ancestors = [];
        (function recurse(node2) {
          if (!node2)
            return;
          const visitor = vis[node2.type];
          const isNew = node2 !== ancestors[ancestors.length - 1];
          if (isNew)
            ancestors.push(node2);
          if (visitor === null || visitor === void 0 ? void 0 : visitor.enter) {
            for (const v of visitor.enter) {
              v(node2, state, ancestors);
            }
          }
          for (const key of VISITOR_KEYS[node2.type] || []) {
            const subNode = node2[key];
            if (Array.isArray(subNode)) {
              for (const subSubNode of subNode) {
                recurse(subSubNode);
              }
            } else {
              recurse(subNode);
            }
          }
          if (visitor === null || visitor === void 0 ? void 0 : visitor.exit) {
            for (const v of visitor.exit) {
              v(node2, state, ancestors);
            }
          }
          if (isNew)
            ancestors.pop();
        })(node);
      };
    }
    exports.ancestor = ancestor;
    function recursive(visitors) {
      const vis = explode_1.default(visitors);
      return (node, state) => {
        (function recurse(node2) {
          if (!node2)
            return;
          const visitor = vis[node2.type];
          if (visitor === null || visitor === void 0 ? void 0 : visitor.enter) {
            for (const v of visitor.enter) {
              v(node2, state, recurse);
            }
          } else {
            for (const key of VISITOR_KEYS[node2.type] || []) {
              const subNode = node2[key];
              if (Array.isArray(subNode)) {
                for (const subSubNode of subNode) {
                  recurse(subSubNode);
                }
              } else {
                recurse(subNode);
              }
            }
          }
        })(node);
      };
    }
    exports.recursive = recursive;
  }
});

// node_modules/.pnpm/assert-never@1.2.1/node_modules/assert-never/index.js
var require_assert_never = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/assert-never@1.2.1/node_modules/assert-never/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function assertNever(value, noThrow) {
      if (noThrow) {
        return value;
      }
      throw new Error("Unhandled discriminated union member: " + JSON.stringify(value));
    }
    exports.assertNever = assertNever;
    exports.default = assertNever;
  }
});

// node_modules/.pnpm/with@7.0.2/node_modules/with/lib/reference.js
var require_reference = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/with@7.0.2/node_modules/with/lib/reference.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var t4 = __importStar(_chunkDUTQDV3Qjs.__require.call(void 0, "@babel/types"));
    function isReferenced(node, parent) {
      switch (parent.type) {
        case "ObjectProperty":
          return parent.value === node || parent.computed;
        case "BreakStatement":
        case "ContinueStatement":
          return false;
        case "AssignmentExpression":
          return true;
      }
      return t4.isReferenced(node, parent);
    }
    exports.default = isReferenced;
  }
});

// node_modules/.pnpm/with@7.0.2/node_modules/with/lib/globals.js
var require_globals = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/with@7.0.2/node_modules/with/lib/globals.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var assert_never_1 = __importDefault(require_assert_never());
    var babel_walk_1 = require_lib3();
    var t4 = __importStar(_chunkDUTQDV3Qjs.__require.call(void 0, "@babel/types"));
    var reference_1 = __importDefault(require_reference());
    var isScope = (node) => t4.isFunctionParent(node) || t4.isProgram(node);
    var isBlockScope = (node) => t4.isBlockStatement(node) || isScope(node);
    var declaresArguments = (node) => t4.isFunction(node) && !t4.isArrowFunctionExpression(node);
    var declaresThis = declaresArguments;
    var LOCALS_SYMBOL = Symbol("locals");
    var getLocals = (node) => node[LOCALS_SYMBOL];
    var declareLocals = (node) => node[LOCALS_SYMBOL] = node[LOCALS_SYMBOL] || new Set();
    var setLocal = (node, name) => declareLocals(node).add(name);
    function declareFunction(node) {
      for (const param of node.params) {
        declarePattern(param, node);
      }
      const id = node.id;
      if (id) {
        setLocal(node, id.name);
      }
    }
    function declarePattern(node, parent) {
      switch (node.type) {
        case "Identifier":
          setLocal(parent, node.name);
          break;
        case "ObjectPattern":
          for (const prop of node.properties) {
            switch (prop.type) {
              case "RestElement":
                declarePattern(prop.argument, parent);
                break;
              case "ObjectProperty":
                declarePattern(prop.value, parent);
                break;
              default:
                assert_never_1.default(prop);
                break;
            }
          }
          break;
        case "ArrayPattern":
          for (const element of node.elements) {
            if (element)
              declarePattern(element, parent);
          }
          break;
        case "RestElement":
          declarePattern(node.argument, parent);
          break;
        case "AssignmentPattern":
          declarePattern(node.left, parent);
          break;
        default:
          throw new Error("Unrecognized pattern type: " + node.type);
      }
    }
    function declareModuleSpecifier(node, _state, parents) {
      for (let i = parents.length - 2; i >= 0; i--) {
        if (isScope(parents[i])) {
          setLocal(parents[i], node.local.name);
          return;
        }
      }
    }
    var firstPass = babel_walk_1.ancestor({
      VariableDeclaration(node, _state, parents) {
        for (let i = parents.length - 2; i >= 0; i--) {
          if (node.kind === "var" ? t4.isFunctionParent(parents[i]) : isBlockScope(parents[i])) {
            for (const declaration of node.declarations) {
              declarePattern(declaration.id, parents[i]);
            }
            return;
          }
        }
      },
      FunctionDeclaration(node, _state, parents) {
        if (node.id) {
          for (let i = parents.length - 2; i >= 0; i--) {
            if (isScope(parents[i])) {
              setLocal(parents[i], node.id.name);
              return;
            }
          }
        }
      },
      Function: declareFunction,
      ClassDeclaration(node, _state, parents) {
        for (let i = parents.length - 2; i >= 0; i--) {
          if (isScope(parents[i])) {
            setLocal(parents[i], node.id.name);
            return;
          }
        }
      },
      TryStatement(node) {
        if (node.handler === null)
          return;
        if (node.handler.param === null)
          return;
        declarePattern(node.handler.param, node.handler);
      },
      ImportDefaultSpecifier: declareModuleSpecifier,
      ImportSpecifier: declareModuleSpecifier,
      ImportNamespaceSpecifier: declareModuleSpecifier
    });
    var secondPass = babel_walk_1.ancestor({
      Identifier(node, state, parents) {
        var _a;
        const name = node.name;
        if (name === "undefined")
          return;
        const lastParent = parents[parents.length - 2];
        if (lastParent) {
          if (!reference_1.default(node, lastParent))
            return;
          for (const parent of parents) {
            if (name === "arguments" && declaresArguments(parent)) {
              return;
            }
            if ((_a = getLocals(parent)) === null || _a === void 0 ? void 0 : _a.has(name)) {
              return;
            }
          }
        }
        state.globals.push(node);
      },
      ThisExpression(node, state, parents) {
        for (const parent of parents) {
          if (declaresThis(parent)) {
            return;
          }
        }
        state.globals.push(node);
      }
    });
    function findGlobals(ast) {
      const globals = [];
      if (!t4.isNode(ast)) {
        throw new TypeError("Source must be a Babylon AST");
      }
      firstPass(ast, void 0);
      secondPass(ast, { globals });
      const groupedGlobals = new Map();
      for (const node of globals) {
        const name = node.type === "ThisExpression" ? "this" : node.name;
        const existing = groupedGlobals.get(name);
        if (existing) {
          existing.push(node);
        } else {
          groupedGlobals.set(name, [node]);
        }
      }
      return [...groupedGlobals].map(([name, nodes]) => ({ name, nodes })).sort((a, b) => a.name < b.name ? -1 : 1);
    }
    exports.default = findGlobals;
  }
});

// node_modules/.pnpm/with@7.0.2/node_modules/with/lib/index.js
var require_lib4 = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/with@7.0.2/node_modules/with/lib/index.js"(exports, module) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (Object.hasOwnProperty.call(mod, k))
            __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    var parser_1 = _chunkDUTQDV3Qjs.__require.call(void 0, "@babel/parser");
    var babel_walk_1 = require_lib3();
    var t4 = __importStar(_chunkDUTQDV3Qjs.__require.call(void 0, "@babel/types"));
    var globals_1 = __importDefault(require_globals());
    var parseOptions = {
      allowReturnOutsideFunction: true,
      allowImportExportEverywhere: true
    };
    function addWith(obj, src, exclude = []) {
      obj = obj + "";
      src = src + "";
      let ast;
      try {
        ast = parser_1.parse(src, parseOptions);
      } catch (e) {
        throw Object.assign(new Error("Error parsing body of the with expression"), {
          component: "src",
          babylonError: e
        });
      }
      let objAst;
      try {
        objAst = parser_1.parse(obj, parseOptions);
      } catch (e) {
        throw Object.assign(new Error("Error parsing object part of the with expression"), {
          component: "obj",
          babylonError: e
        });
      }
      const excludeSet = new Set([
        "undefined",
        "this",
        ...exclude,
        ...globals_1.default(objAst).map((g) => g.name)
      ]);
      const vars = new Set(globals_1.default(ast).map((global) => global.name).filter((v) => !excludeSet.has(v)));
      if (vars.size === 0)
        return src;
      let declareLocal = "";
      let local = "locals_for_with";
      let result = "result_of_with";
      if (t4.isValidIdentifier(obj)) {
        local = obj;
      } else {
        while (vars.has(local) || excludeSet.has(local)) {
          local += "_";
        }
        declareLocal = `var ${local} = (${obj});`;
      }
      while (vars.has(result) || excludeSet.has(result)) {
        result += "_";
      }
      const args = [
        "this",
        ...Array.from(vars).map((v) => `${JSON.stringify(v)} in ${local} ?
        ${local}.${v} :
        typeof ${v} !== 'undefined' ? ${v} : undefined`)
      ];
      const unwrapped = unwrapReturns(ast, src, result);
      return `;
    ${declareLocal}
    ${unwrapped.before}
    (function (${Array.from(vars).join(", ")}) {
      ${unwrapped.body}
    }.call(${args.join(", ")}));
    ${unwrapped.after};`;
    }
    exports.default = addWith;
    var unwrapReturnsVisitors = babel_walk_1.recursive({
      Function(_node, _state, _c) {
      },
      ReturnStatement(node, state) {
        state.hasReturn = true;
        let value = "";
        if (node.argument) {
          value = `value: (${state.source(node.argument)})`;
        }
        state.replace(node, `return {${value}};`);
      }
    });
    function unwrapReturns(ast, src, result) {
      const charArray = src.split("");
      const state = {
        hasReturn: false,
        source(node) {
          return src.slice(node.start, node.end);
        },
        replace(node, str) {
          charArray.fill("", node.start, node.end);
          charArray[node.start] = str;
        }
      };
      unwrapReturnsVisitors(ast, state);
      return {
        before: state.hasReturn ? `var ${result} = ` : "",
        body: charArray.join(""),
        after: state.hasReturn ? `;if (${result}) return ${result}.value` : ""
      };
    }
    module.exports = addWith;
    module.exports.default = addWith;
  }
});

// node_modules/.pnpm/pug-code-gen@3.0.2/node_modules/pug-code-gen/index.js
var require_pug_code_gen = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-code-gen@3.0.2/node_modules/pug-code-gen/index.js"(exports, module) {
    "use strict";
    var doctypes = require_doctypes();
    var makeError = require_pug_error();
    var buildRuntime = require_build();
    var runtime = require_pug_runtime();
    var compileAttrs = require_pug_attrs();
    var selfClosing = require_void_elements();
    var constantinople = require_lib2();
    var stringify = require_js_stringify();
    var addWith = require_lib4();
    var WHITE_SPACE_SENSITIVE_TAGS = {
      pre: true,
      textarea: true
    };
    var INTERNAL_VARIABLES = [
      "pug",
      "pug_mixins",
      "pug_interp",
      "pug_debug_filename",
      "pug_debug_line",
      "pug_debug_sources",
      "pug_html"
    ];
    module.exports = generateCode;
    module.exports.CodeGenerator = Compiler;
    function generateCode(ast, options) {
      return new Compiler(ast, options).compile();
    }
    function isConstant(src) {
      return constantinople(src, { pug: runtime, pug_interp: void 0 });
    }
    function toConstant(src) {
      return constantinople.toConstant(src, { pug: runtime, pug_interp: void 0 });
    }
    function Compiler(node, options) {
      this.options = options = options || {};
      this.node = node;
      this.bufferedConcatenationCount = 0;
      this.hasCompiledDoctype = false;
      this.hasCompiledTag = false;
      this.pp = options.pretty || false;
      if (this.pp && typeof this.pp !== "string") {
        this.pp = "  ";
      }
      if (this.pp && !/^\s+$/.test(this.pp)) {
        throw new Error("The pretty parameter should either be a boolean or whitespace only string");
      }
      this.debug = options.compileDebug !== false;
      this.indents = 0;
      this.parentIndents = 0;
      this.terse = false;
      this.mixins = {};
      this.dynamicMixins = false;
      this.eachCount = 0;
      if (options.doctype)
        this.setDoctype(options.doctype);
      this.runtimeFunctionsUsed = [];
      this.inlineRuntimeFunctions = options.inlineRuntimeFunctions || false;
      if (this.debug && this.inlineRuntimeFunctions) {
        this.runtimeFunctionsUsed.push("rethrow");
      }
    }
    Compiler.prototype = {
      runtime: function(name) {
        if (this.inlineRuntimeFunctions) {
          this.runtimeFunctionsUsed.push(name);
          return "pug_" + name;
        } else {
          return "pug." + name;
        }
      },
      error: function(message, code, node) {
        var err = makeError(code, message, {
          line: node.line,
          column: node.column,
          filename: node.filename
        });
        throw err;
      },
      compile: function() {
        this.buf = [];
        if (this.pp)
          this.buf.push("var pug_indent = [];");
        this.lastBufferedIdx = -1;
        this.visit(this.node);
        if (!this.dynamicMixins) {
          var mixinNames = Object.keys(this.mixins);
          for (var i = 0; i < mixinNames.length; i++) {
            var mixin = this.mixins[mixinNames[i]];
            if (!mixin.used) {
              for (var x = 0; x < mixin.instances.length; x++) {
                for (var y = mixin.instances[x].start; y < mixin.instances[x].end; y++) {
                  this.buf[y] = "";
                }
              }
            }
          }
        }
        var js = this.buf.join("\n");
        var globals = this.options.globals ? this.options.globals.concat(INTERNAL_VARIABLES) : INTERNAL_VARIABLES;
        if (this.options.self) {
          js = "var self = locals || {};" + js;
        } else {
          js = addWith("locals || {}", js, globals.concat(this.runtimeFunctionsUsed.map(function(name) {
            return "pug_" + name;
          })));
        }
        if (this.debug) {
          if (this.options.includeSources) {
            js = "var pug_debug_sources = " + stringify(this.options.includeSources) + ";\n" + js;
          }
          js = "var pug_debug_filename, pug_debug_line;try {" + js + "} catch (err) {" + (this.inlineRuntimeFunctions ? "pug_rethrow" : "pug.rethrow") + "(err, pug_debug_filename, pug_debug_line" + (this.options.includeSources ? ", pug_debug_sources[pug_debug_filename]" : "") + ");}";
        }
        return buildRuntime(this.runtimeFunctionsUsed) + "function " + (this.options.templateName || "template") + '(locals) {var pug_html = "", pug_mixins = {}, pug_interp;' + js + ";return pug_html;}";
      },
      setDoctype: function(name) {
        this.doctype = doctypes[name.toLowerCase()] || "<!DOCTYPE " + name + ">";
        this.terse = this.doctype.toLowerCase() == "<!doctype html>";
        this.xml = this.doctype.indexOf("<?xml") == 0;
      },
      buffer: function(str) {
        var self2 = this;
        str = stringify(str);
        str = str.substr(1, str.length - 2);
        if (this.lastBufferedIdx == this.buf.length && this.bufferedConcatenationCount < 100) {
          if (this.lastBufferedType === "code") {
            this.lastBuffered += ' + "';
            this.bufferedConcatenationCount++;
          }
          this.lastBufferedType = "text";
          this.lastBuffered += str;
          this.buf[this.lastBufferedIdx - 1] = "pug_html = pug_html + " + this.bufferStartChar + this.lastBuffered + '";';
        } else {
          this.bufferedConcatenationCount = 0;
          this.buf.push('pug_html = pug_html + "' + str + '";');
          this.lastBufferedType = "text";
          this.bufferStartChar = '"';
          this.lastBuffered = str;
          this.lastBufferedIdx = this.buf.length;
        }
      },
      bufferExpression: function(src) {
        if (isConstant(src)) {
          return this.buffer(toConstant(src) + "");
        }
        if (this.lastBufferedIdx == this.buf.length && this.bufferedConcatenationCount < 100) {
          this.bufferedConcatenationCount++;
          if (this.lastBufferedType === "text")
            this.lastBuffered += '"';
          this.lastBufferedType = "code";
          this.lastBuffered += " + (" + src + ")";
          this.buf[this.lastBufferedIdx - 1] = "pug_html = pug_html + (" + this.bufferStartChar + this.lastBuffered + ");";
        } else {
          this.bufferedConcatenationCount = 0;
          this.buf.push("pug_html = pug_html + (" + src + ");");
          this.lastBufferedType = "code";
          this.bufferStartChar = "";
          this.lastBuffered = "(" + src + ")";
          this.lastBufferedIdx = this.buf.length;
        }
      },
      prettyIndent: function(offset, newline) {
        offset = offset || 0;
        newline = newline ? "\n" : "";
        this.buffer(newline + Array(this.indents + offset).join(this.pp));
        if (this.parentIndents)
          this.buf.push('pug_html = pug_html + pug_indent.join("");');
      },
      visit: function(node, parent) {
        var debug = this.debug;
        if (!node) {
          var msg;
          if (parent) {
            msg = "A child of " + parent.type + " (" + (parent.filename || "Pug") + ":" + parent.line + ")";
          } else {
            msg = "A top-level node";
          }
          msg += " is " + node + ", expected a Pug AST Node.";
          throw new TypeError(msg);
        }
        if (debug && node.debug !== false && node.type !== "Block") {
          if (node.line) {
            var js = ";pug_debug_line = " + node.line;
            if (node.filename)
              js += ";pug_debug_filename = " + stringify(node.filename);
            this.buf.push(js + ";");
          }
        }
        if (!this["visit" + node.type]) {
          var msg;
          if (parent) {
            msg = "A child of " + parent.type;
          } else {
            msg = "A top-level node";
          }
          msg += " (" + (node.filename || "Pug") + ":" + node.line + ") is of type " + node.type + ", which is not supported by pug-code-gen.";
          switch (node.type) {
            case "Filter":
              msg += " Please use pug-filters to preprocess this AST.";
              break;
            case "Extends":
            case "Include":
            case "NamedBlock":
            case "FileReference":
              msg += " Please use pug-linker to preprocess this AST.";
              break;
          }
          throw new TypeError(msg);
        }
        this.visitNode(node);
      },
      visitNode: function(node) {
        return this["visit" + node.type](node);
      },
      visitCase: function(node) {
        this.buf.push("switch (" + node.expr + "){");
        this.visit(node.block, node);
        this.buf.push("}");
      },
      visitWhen: function(node) {
        if (node.expr == "default") {
          this.buf.push("default:");
        } else {
          this.buf.push("case " + node.expr + ":");
        }
        if (node.block) {
          this.visit(node.block, node);
          this.buf.push("  break;");
        }
      },
      visitLiteral: function(node) {
        this.buffer(node.str);
      },
      visitNamedBlock: function(block) {
        return this.visitBlock(block);
      },
      visitBlock: function(block) {
        var escapePrettyMode = this.escapePrettyMode;
        var pp = this.pp;
        if (pp && block.nodes.length > 1 && !escapePrettyMode && block.nodes[0].type === "Text" && block.nodes[1].type === "Text") {
          this.prettyIndent(1, true);
        }
        for (var i = 0; i < block.nodes.length; ++i) {
          if (pp && i > 0 && !escapePrettyMode && block.nodes[i].type === "Text" && block.nodes[i - 1].type === "Text" && /\n$/.test(block.nodes[i - 1].val)) {
            this.prettyIndent(1, false);
          }
          this.visit(block.nodes[i], block);
        }
      },
      visitMixinBlock: function(block) {
        if (this.pp)
          this.buf.push("pug_indent.push(" + stringify(Array(this.indents + 1).join(this.pp)) + ");");
        this.buf.push("block && block();");
        if (this.pp)
          this.buf.push("pug_indent.pop();");
      },
      visitDoctype: function(doctype) {
        if (doctype && (doctype.val || !this.doctype)) {
          this.setDoctype(doctype.val || "html");
        }
        if (this.doctype)
          this.buffer(this.doctype);
        this.hasCompiledDoctype = true;
      },
      visitMixin: function(mixin) {
        var name = "pug_mixins[";
        var args = mixin.args || "";
        var block = mixin.block;
        var attrs = mixin.attrs;
        var attrsBlocks = this.attributeBlocks(mixin.attributeBlocks);
        var pp = this.pp;
        var dynamic = mixin.name[0] === "#";
        var key = mixin.name;
        if (dynamic)
          this.dynamicMixins = true;
        name += (dynamic ? mixin.name.substr(2, mixin.name.length - 3) : '"' + mixin.name + '"') + "]";
        this.mixins[key] = this.mixins[key] || { used: false, instances: [] };
        if (mixin.call) {
          this.mixins[key].used = true;
          if (pp)
            this.buf.push("pug_indent.push(" + stringify(Array(this.indents + 1).join(pp)) + ");");
          if (block || attrs.length || attrsBlocks.length) {
            this.buf.push(name + ".call({");
            if (block) {
              this.buf.push("block: function(){");
              this.parentIndents++;
              var _indents = this.indents;
              this.indents = 0;
              this.visit(mixin.block, mixin);
              this.indents = _indents;
              this.parentIndents--;
              if (attrs.length || attrsBlocks.length) {
                this.buf.push("},");
              } else {
                this.buf.push("}");
              }
            }
            if (attrsBlocks.length) {
              if (attrs.length) {
                var val = this.attrs(attrs);
                attrsBlocks.unshift(val);
              }
              if (attrsBlocks.length > 1) {
                this.buf.push("attributes: " + this.runtime("merge") + "([" + attrsBlocks.join(",") + "])");
              } else {
                this.buf.push("attributes: " + attrsBlocks[0]);
              }
            } else if (attrs.length) {
              var val = this.attrs(attrs);
              this.buf.push("attributes: " + val);
            }
            if (args) {
              this.buf.push("}, " + args + ");");
            } else {
              this.buf.push("});");
            }
          } else {
            this.buf.push(name + "(" + args + ");");
          }
          if (pp)
            this.buf.push("pug_indent.pop();");
        } else {
          var mixin_start = this.buf.length;
          args = args ? args.split(",") : [];
          var rest;
          if (args.length && /^\.\.\./.test(args[args.length - 1].trim())) {
            rest = args.pop().trim().replace(/^\.\.\./, "");
          }
          this.buf.push(name + " = pug_interp = function(" + args.join(",") + "){");
          this.buf.push("var block = (this && this.block), attributes = (this && this.attributes) || {};");
          if (rest) {
            this.buf.push("var " + rest + " = [];");
            this.buf.push("for (pug_interp = " + args.length + "; pug_interp < arguments.length; pug_interp++) {");
            this.buf.push("  " + rest + ".push(arguments[pug_interp]);");
            this.buf.push("}");
          }
          this.parentIndents++;
          this.visit(block, mixin);
          this.parentIndents--;
          this.buf.push("};");
          var mixin_end = this.buf.length;
          this.mixins[key].instances.push({ start: mixin_start, end: mixin_end });
        }
      },
      visitTag: function(tag, interpolated) {
        this.indents++;
        var name = tag.name, pp = this.pp, self2 = this;
        function bufferName() {
          if (interpolated)
            self2.bufferExpression(tag.expr);
          else
            self2.buffer(name);
        }
        if (WHITE_SPACE_SENSITIVE_TAGS[tag.name] === true)
          this.escapePrettyMode = true;
        if (!this.hasCompiledTag) {
          if (!this.hasCompiledDoctype && name == "html") {
            this.visitDoctype();
          }
          this.hasCompiledTag = true;
        }
        if (pp && !tag.isInline)
          this.prettyIndent(0, true);
        if (tag.selfClosing || !this.xml && selfClosing[tag.name]) {
          this.buffer("<");
          bufferName();
          this.visitAttributes(tag.attrs, this.attributeBlocks(tag.attributeBlocks));
          if (this.terse && !tag.selfClosing) {
            this.buffer(">");
          } else {
            this.buffer("/>");
          }
          if (tag.code || tag.block && !(tag.block.type === "Block" && tag.block.nodes.length === 0) && tag.block.nodes.some(function(tag2) {
            return tag2.type !== "Text" || !/^\s*$/.test(tag2.val);
          })) {
            this.error(name + " is a self closing element: <" + name + "/> but contains nested content.", "SELF_CLOSING_CONTENT", tag);
          }
        } else {
          this.buffer("<");
          bufferName();
          this.visitAttributes(tag.attrs, this.attributeBlocks(tag.attributeBlocks));
          this.buffer(">");
          if (tag.code)
            this.visitCode(tag.code);
          this.visit(tag.block, tag);
          if (pp && !tag.isInline && WHITE_SPACE_SENSITIVE_TAGS[tag.name] !== true && !tagCanInline(tag))
            this.prettyIndent(0, true);
          this.buffer("</");
          bufferName();
          this.buffer(">");
        }
        if (WHITE_SPACE_SENSITIVE_TAGS[tag.name] === true)
          this.escapePrettyMode = false;
        this.indents--;
      },
      visitInterpolatedTag: function(tag) {
        return this.visitTag(tag, true);
      },
      visitText: function(text) {
        this.buffer(text.val);
      },
      visitComment: function(comment) {
        if (!comment.buffer)
          return;
        if (this.pp)
          this.prettyIndent(1, true);
        this.buffer("<!--" + comment.val + "-->");
      },
      visitYieldBlock: function(block) {
      },
      visitBlockComment: function(comment) {
        if (!comment.buffer)
          return;
        if (this.pp)
          this.prettyIndent(1, true);
        this.buffer("<!--" + (comment.val || ""));
        this.visit(comment.block, comment);
        if (this.pp)
          this.prettyIndent(1, true);
        this.buffer("-->");
      },
      visitCode: function(code) {
        if (code.buffer) {
          var val = code.val.trim();
          val = "null == (pug_interp = " + val + ') ? "" : pug_interp';
          if (code.mustEscape !== false)
            val = this.runtime("escape") + "(" + val + ")";
          this.bufferExpression(val);
        } else {
          this.buf.push(code.val);
        }
        if (code.block) {
          if (!code.buffer)
            this.buf.push("{");
          this.visit(code.block, code);
          if (!code.buffer)
            this.buf.push("}");
        }
      },
      visitConditional: function(cond) {
        var test = cond.test;
        this.buf.push("if (" + test + ") {");
        this.visit(cond.consequent, cond);
        this.buf.push("}");
        if (cond.alternate) {
          if (cond.alternate.type === "Conditional") {
            this.buf.push("else");
            this.visitConditional(cond.alternate);
          } else {
            this.buf.push("else {");
            this.visit(cond.alternate, cond);
            this.buf.push("}");
          }
        }
      },
      visitWhile: function(loop) {
        var test = loop.test;
        this.buf.push("while (" + test + ") {");
        this.visit(loop.block, loop);
        this.buf.push("}");
      },
      visitEach: function(each) {
        var indexVarName = each.key || "pug_index" + this.eachCount;
        this.eachCount++;
        this.buf.push("// iterate " + each.obj + "\n;(function(){\n  var $$obj = " + each.obj + ";\n  if ('number' == typeof $$obj.length) {");
        if (each.alternate) {
          this.buf.push("    if ($$obj.length) {");
        }
        this.buf.push("      for (var " + indexVarName + " = 0, $$l = $$obj.length; " + indexVarName + " < $$l; " + indexVarName + "++) {\n        var " + each.val + " = $$obj[" + indexVarName + "];");
        this.visit(each.block, each);
        this.buf.push("      }");
        if (each.alternate) {
          this.buf.push("    } else {");
          this.visit(each.alternate, each);
          this.buf.push("    }");
        }
        this.buf.push("  } else {\n    var $$l = 0;\n    for (var " + indexVarName + " in $$obj) {\n      $$l++;\n      var " + each.val + " = $$obj[" + indexVarName + "];");
        this.visit(each.block, each);
        this.buf.push("    }");
        if (each.alternate) {
          this.buf.push("    if ($$l === 0) {");
          this.visit(each.alternate, each);
          this.buf.push("    }");
        }
        this.buf.push("  }\n}).call(this);\n");
      },
      visitEachOf: function(each) {
        this.buf.push("// iterate " + each.obj + "\nfor (const " + each.val + " of " + each.obj + ") {\n");
        this.visit(each.block, each);
        this.buf.push("}\n");
      },
      visitAttributes: function(attrs, attributeBlocks) {
        if (attributeBlocks.length) {
          if (attrs.length) {
            var val = this.attrs(attrs);
            attributeBlocks.unshift(val);
          }
          if (attributeBlocks.length > 1) {
            this.bufferExpression(this.runtime("attrs") + "(" + this.runtime("merge") + "([" + attributeBlocks.join(",") + "]), " + stringify(this.terse) + ")");
          } else {
            this.bufferExpression(this.runtime("attrs") + "(" + attributeBlocks[0] + ", " + stringify(this.terse) + ")");
          }
        } else if (attrs.length) {
          this.attrs(attrs, true);
        }
      },
      attrs: function(attrs, buffer) {
        var res = compileAttrs(attrs, {
          terse: this.terse,
          format: buffer ? "html" : "object",
          runtime: this.runtime.bind(this)
        });
        if (buffer) {
          this.bufferExpression(res);
        }
        return res;
      },
      attributeBlocks: function(attributeBlocks) {
        return attributeBlocks && attributeBlocks.slice().map(function(attrBlock) {
          return attrBlock.val;
        });
      }
    };
    function tagCanInline(tag) {
      function isInline(node) {
        if (node.type === "Block")
          return node.nodes.every(isInline);
        if (node.type === "YieldBlock")
          return true;
        return node.type === "Text" && !/\n/.test(node.val) || node.isInline;
      }
      return tag.block.nodes.every(isInline);
    }
  }
});

// node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/wrap.js
var require_wrap = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug-runtime@3.0.1/node_modules/pug-runtime/wrap.js"(exports, module) {
    var runtime = require_pug_runtime();
    module.exports = wrap;
    function wrap(template, templateName) {
      templateName = templateName || "template";
      return Function("pug", template + "\nreturn " + templateName + ";")(runtime);
    }
  }
});

// node_modules/.pnpm/pug@3.0.2/node_modules/pug/lib/index.js
var require_lib5 = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/pug@3.0.2/node_modules/pug/lib/index.js"(exports) {
    "use strict";
    var fs = _chunkDUTQDV3Qjs.__require.call(void 0, "fs");
    var path = _chunkDUTQDV3Qjs.__require.call(void 0, "path");
    var lex = require_pug_lexer();
    var stripComments = require_pug_strip_comments();
    var parse3 = require_pug_parser();
    var load = require_pug_load();
    var filters = require_pug_filters();
    var link = require_pug_linker();
    var generateCode = require_pug_code_gen();
    var runtime = require_pug_runtime();
    var runtimeWrap = require_wrap();
    exports.name = "Pug";
    exports.runtime = runtime;
    exports.cache = {};
    function applyPlugins(value, options, plugins, name) {
      return plugins.reduce(function(value2, plugin) {
        return plugin[name] ? plugin[name](value2, options) : value2;
      }, value);
    }
    function findReplacementFunc(plugins, name) {
      var eligiblePlugins = plugins.filter(function(plugin) {
        return plugin[name];
      });
      if (eligiblePlugins.length > 1) {
        throw new Error("Two or more plugins all implement " + name + " method.");
      } else if (eligiblePlugins.length) {
        return eligiblePlugins[0][name].bind(eligiblePlugins[0]);
      }
      return null;
    }
    exports.filters = {};
    function compileBody(str, options) {
      var debug_sources = {};
      debug_sources[options.filename] = str;
      var dependencies = [];
      var plugins = options.plugins || [];
      var ast = load.string(str, {
        filename: options.filename,
        basedir: options.basedir,
        lex: function(str2, options2) {
          var lexOptions = {};
          Object.keys(options2).forEach(function(key) {
            lexOptions[key] = options2[key];
          });
          lexOptions.plugins = plugins.filter(function(plugin) {
            return !!plugin.lex;
          }).map(function(plugin) {
            return plugin.lex;
          });
          var contents = applyPlugins(str2, { filename: options2.filename }, plugins, "preLex");
          return applyPlugins(lex(contents, lexOptions), options2, plugins, "postLex");
        },
        parse: function(tokens, options2) {
          tokens = tokens.map(function(token) {
            if (token.type === "path" && path.extname(token.val) === "") {
              return {
                type: "path",
                loc: token.loc,
                val: token.val + ".pug"
              };
            }
            return token;
          });
          tokens = stripComments(tokens, options2);
          tokens = applyPlugins(tokens, options2, plugins, "preParse");
          var parseOptions = {};
          Object.keys(options2).forEach(function(key) {
            parseOptions[key] = options2[key];
          });
          parseOptions.plugins = plugins.filter(function(plugin) {
            return !!plugin.parse;
          }).map(function(plugin) {
            return plugin.parse;
          });
          return applyPlugins(applyPlugins(parse3(tokens, parseOptions), options2, plugins, "postParse"), options2, plugins, "preLoad");
        },
        resolve: function(filename, source, loadOptions) {
          var replacementFunc = findReplacementFunc(plugins, "resolve");
          if (replacementFunc) {
            return replacementFunc(filename, source, options);
          }
          return load.resolve(filename, source, loadOptions);
        },
        read: function(filename, loadOptions) {
          dependencies.push(filename);
          var contents;
          var replacementFunc = findReplacementFunc(plugins, "read");
          if (replacementFunc) {
            contents = replacementFunc(filename, options);
          } else {
            contents = load.read(filename, loadOptions);
          }
          debug_sources[filename] = Buffer.isBuffer(contents) ? contents.toString("utf8") : contents;
          return contents;
        }
      });
      ast = applyPlugins(ast, options, plugins, "postLoad");
      ast = applyPlugins(ast, options, plugins, "preFilters");
      var filtersSet = {};
      Object.keys(exports.filters).forEach(function(key) {
        filtersSet[key] = exports.filters[key];
      });
      if (options.filters) {
        Object.keys(options.filters).forEach(function(key) {
          filtersSet[key] = options.filters[key];
        });
      }
      ast = filters.handleFilters(ast, filtersSet, options.filterOptions, options.filterAliases);
      ast = applyPlugins(ast, options, plugins, "postFilters");
      ast = applyPlugins(ast, options, plugins, "preLink");
      ast = link(ast);
      ast = applyPlugins(ast, options, plugins, "postLink");
      ast = applyPlugins(ast, options, plugins, "preCodeGen");
      var js = (findReplacementFunc(plugins, "generateCode") || generateCode)(ast, {
        pretty: options.pretty,
        compileDebug: options.compileDebug,
        doctype: options.doctype,
        inlineRuntimeFunctions: options.inlineRuntimeFunctions,
        globals: options.globals,
        self: options.self,
        includeSources: options.includeSources ? debug_sources : false,
        templateName: options.templateName
      });
      js = applyPlugins(js, options, plugins, "postCodeGen");
      if (options.debug) {
        console.error("\nCompiled Function:\n\n[90m%s[0m", js.replace(/^/gm, "  "));
      }
      return { body: js, dependencies };
    }
    function handleTemplateCache(options, str) {
      var key = options.filename;
      if (options.cache && exports.cache[key]) {
        return exports.cache[key];
      } else {
        if (str === void 0)
          str = fs.readFileSync(options.filename, "utf8");
        var templ = exports.compile(str, options);
        if (options.cache)
          exports.cache[key] = templ;
        return templ;
      }
    }
    exports.compile = function(str, options) {
      var options = options || {};
      str = String(str);
      var parsed = compileBody(str, {
        compileDebug: options.compileDebug !== false,
        filename: options.filename,
        basedir: options.basedir,
        pretty: options.pretty,
        doctype: options.doctype,
        inlineRuntimeFunctions: options.inlineRuntimeFunctions,
        globals: options.globals,
        self: options.self,
        includeSources: options.compileDebug === true,
        debug: options.debug,
        templateName: "template",
        filters: options.filters,
        filterOptions: options.filterOptions,
        filterAliases: options.filterAliases,
        plugins: options.plugins
      });
      var res = options.inlineRuntimeFunctions ? new Function("", parsed.body + ";return template;")() : runtimeWrap(parsed.body);
      res.dependencies = parsed.dependencies;
      return res;
    };
    exports.compileClientWithDependenciesTracked = function(str, options) {
      var options = options || {};
      str = String(str);
      var parsed = compileBody(str, {
        compileDebug: options.compileDebug,
        filename: options.filename,
        basedir: options.basedir,
        pretty: options.pretty,
        doctype: options.doctype,
        inlineRuntimeFunctions: options.inlineRuntimeFunctions !== false,
        globals: options.globals,
        self: options.self,
        includeSources: options.compileDebug,
        debug: options.debug,
        templateName: options.name || "template",
        filters: options.filters,
        filterOptions: options.filterOptions,
        filterAliases: options.filterAliases,
        plugins: options.plugins
      });
      var body = parsed.body;
      if (options.module) {
        if (options.inlineRuntimeFunctions === false) {
          body = 'var pug = require("pug-runtime");' + body;
        }
        body += " module.exports = " + (options.name || "template") + ";";
      }
      return { body, dependencies: parsed.dependencies };
    };
    exports.compileClient = function(str, options) {
      return exports.compileClientWithDependenciesTracked(str, options).body;
    };
    exports.compileFile = function(path2, options) {
      options = options || {};
      options.filename = path2;
      return handleTemplateCache(options);
    };
    exports.render = function(str, options, fn) {
      if (typeof options == "function") {
        fn = options, options = void 0;
      }
      if (typeof fn === "function") {
        var res;
        try {
          res = exports.render(str, options);
        } catch (ex) {
          return fn(ex);
        }
        return fn(null, res);
      }
      options = options || {};
      if (options.cache && !options.filename) {
        throw new Error('the "filename" option is required for caching');
      }
      return handleTemplateCache(options, str)(options);
    };
    exports.renderFile = function(path2, options, fn) {
      if (typeof options == "function") {
        fn = options, options = void 0;
      }
      if (typeof fn === "function") {
        var res;
        try {
          res = exports.renderFile(path2, options);
        } catch (ex) {
          return fn(ex);
        }
        return fn(null, res);
      }
      options = options || {};
      options.filename = path2;
      return handleTemplateCache(options)(options);
    };
    exports.compileFileClient = function(path2, options) {
      var key = path2 + ":client";
      options = options || {};
      options.filename = path2;
      if (options.cache && exports.cache[key]) {
        return exports.cache[key];
      }
      var str = fs.readFileSync(options.filename, "utf8");
      var out = exports.compileClient(str, options);
      if (options.cache)
        exports.cache[key] = out;
      return out;
    };
    exports.__express = function(path2, options, fn) {
      if (options.compileDebug == void 0 && process.env.NODE_ENV === "production") {
        options.compileDebug = false;
      }
      exports.renderFile(path2, options, fn);
    };
  }
});

// node_modules/.pnpm/@antfu+utils@0.3.0/node_modules/@antfu/utils/dist/index.js
var require_dist = _chunkDUTQDV3Qjs.__commonJS.call(void 0, {
  "node_modules/.pnpm/@antfu+utils@0.3.0/node_modules/@antfu/utils/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    function clamp(n, min, max) {
      return Math.min(max, Math.max(min, n));
    }
    function sum(...args) {
      return flattenArrayable(args).reduce((a, b) => a + b, 0);
    }
    function toArray(array) {
      array = array || [];
      if (Array.isArray(array))
        return array;
      return [array];
    }
    function flattenArrayable(array) {
      return toArray(array).flat(1);
    }
    function mergeArrayable(...args) {
      return args.flatMap((i) => toArray(i));
    }
    function partition2(array, ...filters) {
      const result = new Array(filters.length + 1).fill(null).map(() => []);
      array.forEach((e, idx, arr) => {
        let i = 0;
        for (const filter of filters) {
          if (filter(e, idx, arr)) {
            result[i].push(e);
            return;
          }
          i += 1;
        }
        result[i].push(e);
      });
      return result;
    }
    function uniq(array) {
      return Array.from(new Set(array));
    }
    function last(array) {
      return at(array, -1);
    }
    function remove(array, value) {
      if (!array)
        return false;
      const index = array.indexOf(value);
      if (index >= 0) {
        array.splice(index, 1);
        return true;
      }
      return false;
    }
    function at(array, index) {
      const len = array.length;
      if (!len)
        return void 0;
      if (index < 0)
        index += len;
      return array[index];
    }
    function range(...args) {
      let start, stop, step;
      if (args.length === 1) {
        start = 0;
        step = 1;
        [stop] = args;
      } else {
        [start, stop, step = 1] = args;
      }
      const arr = [];
      let current = start;
      while (current < stop) {
        arr.push(current);
        current += step || 1;
      }
      return arr;
    }
    function move(arr, from, to) {
      arr.splice(to, 0, arr.splice(from, 1)[0]);
      return arr;
    }
    function clampArrayRange(n, arr) {
      return clamp(n, 0, arr.length - 1);
    }
    var assert = (condition, message) => {
      if (!condition)
        throw new Error(message);
    };
    var toString2 = (v) => Object.prototype.toString.call(v);
    var noop = () => {
    };
    function notNullish(v) {
      return v != null;
    }
    function noNull(v) {
      return v !== null;
    }
    function notUndefined(v) {
      return v !== void 0;
    }
    function isTruthy(v) {
      return Boolean(v);
    }
    var isBrowser = typeof window !== "undefined";
    var isDef = (val) => typeof val !== "undefined";
    var isBoolean = (val) => typeof val === "boolean";
    var isFunction = (val) => typeof val === "function";
    var isNumber = (val) => typeof val === "number";
    var isString = (val) => typeof val === "string";
    var isObject = (val) => toString.call(val) === "[object Object]";
    var isWindow = (val) => typeof window !== "undefined" && toString.call(val) === "[object Window]";
    function slash(str) {
      return str.replace(/\\/g, "/");
    }
    function ensurePrefix(prefix, str) {
      if (!str.startsWith(prefix))
        return prefix + str;
      return str;
    }
    function template(str, ...args) {
      return str.replace(/{(\d+)}/g, (match, key) => {
        const index = Number(key);
        if (Number.isNaN(index))
          return match;
        return args[index];
      });
    }
    var timestamp = () => +Date.now();
    function batchInvoke(functions) {
      functions.forEach((fn) => fn && fn());
    }
    function invoke(fn) {
      return fn();
    }
    function tap(value, callback) {
      callback(value);
      return value;
    }
    function objectMap(obj, fn) {
      return Object.fromEntries(Object.entries(obj).map(([k, v]) => fn(k, v)).filter(notNullish));
    }
    function isKeyOf(obj, k) {
      return k in obj;
    }
    function objectKeys(obj) {
      return Object.keys(obj);
    }
    function objectEntries(obj) {
      return Object.entries(obj);
    }
    function deepMerge(target, ...sources) {
      if (!sources.length)
        return target;
      const source = sources.shift();
      if (source === void 0)
        return target;
      if (isMergableObject(target) && isMergableObject(source)) {
        objectKeys(source).forEach((key) => {
          if (isMergableObject(source[key])) {
            if (!target[key])
              target[key] = {};
            deepMerge(target[key], source[key]);
          } else {
            target[key] = source[key];
          }
        });
      }
      return deepMerge(target, ...sources);
    }
    function isMergableObject(item) {
      return isObject(item) && !Array.isArray(item);
    }
    function objectPick(obj, keys, omitUndefined = false) {
      return keys.reduce((n, k) => {
        if (k in obj) {
          if (!omitUndefined || !obj[k] === void 0)
            n[k] = obj[k];
        }
        return n;
      }, {});
    }
    function clearUndefined(obj) {
      Object.keys(obj).forEach((key) => obj[key] === void 0 ? delete obj[key] : {});
      return obj;
    }
    function hasOwnProperty(obj, v) {
      if (obj == null)
        return false;
      return Object.prototype.hasOwnProperty.call(obj, v);
    }
    function createSingletonPromise(fn) {
      let _promise;
      function wrapper() {
        if (!_promise)
          _promise = fn();
        return _promise;
      }
      wrapper.reset = async () => {
        const _prev = _promise;
        _promise = void 0;
        if (_prev)
          await _prev;
      };
      return wrapper;
    }
    function sleep(ms, callback) {
      return new Promise((resolve2) => setTimeout(async () => {
        await (callback == null ? void 0 : callback());
        resolve2();
      }, ms));
    }
    function createPromiseLock() {
      const locks = [];
      return {
        async run(fn) {
          const p = fn();
          locks.push(p);
          try {
            return await p;
          } finally {
            remove(locks, p);
          }
        },
        async wait() {
          await Promise.allSettled(locks);
        },
        isWaiting() {
          return Boolean(locks.length);
        },
        clear() {
          locks.length = 0;
        }
      };
    }
    function throttle(delay, noTrailing, callback, debounceMode) {
      var timeoutID;
      var cancelled = false;
      var lastExec = 0;
      function clearExistingTimeout() {
        if (timeoutID) {
          clearTimeout(timeoutID);
        }
      }
      function cancel() {
        clearExistingTimeout();
        cancelled = true;
      }
      if (typeof noTrailing !== "boolean") {
        debounceMode = callback;
        callback = noTrailing;
        noTrailing = void 0;
      }
      function wrapper() {
        for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {
          arguments_[_key] = arguments[_key];
        }
        var self2 = this;
        var elapsed = Date.now() - lastExec;
        if (cancelled) {
          return;
        }
        function exec() {
          lastExec = Date.now();
          callback.apply(self2, arguments_);
        }
        function clear() {
          timeoutID = void 0;
        }
        if (debounceMode && !timeoutID) {
          exec();
        }
        clearExistingTimeout();
        if (debounceMode === void 0 && elapsed > delay) {
          exec();
        } else if (noTrailing !== true) {
          timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === void 0 ? delay - elapsed : delay);
        }
      }
      wrapper.cancel = cancel;
      return wrapper;
    }
    function debounce(delay, atBegin, callback) {
      return callback === void 0 ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);
    }
    exports.assert = assert;
    exports.at = at;
    exports.batchInvoke = batchInvoke;
    exports.clamp = clamp;
    exports.clampArrayRange = clampArrayRange;
    exports.clearUndefined = clearUndefined;
    exports.createPromiseLock = createPromiseLock;
    exports.createSingletonPromise = createSingletonPromise;
    exports.debounce = debounce;
    exports.deepMerge = deepMerge;
    exports.ensurePrefix = ensurePrefix;
    exports.flattenArrayable = flattenArrayable;
    exports.hasOwnProperty = hasOwnProperty;
    exports.invoke = invoke;
    exports.isBoolean = isBoolean;
    exports.isBrowser = isBrowser;
    exports.isDef = isDef;
    exports.isFunction = isFunction;
    exports.isKeyOf = isKeyOf;
    exports.isNumber = isNumber;
    exports.isObject = isObject;
    exports.isString = isString;
    exports.isTruthy = isTruthy;
    exports.isWindow = isWindow;
    exports.last = last;
    exports.mergeArrayable = mergeArrayable;
    exports.move = move;
    exports.noNull = noNull;
    exports.noop = noop;
    exports.notNullish = notNullish;
    exports.notUndefined = notUndefined;
    exports.objectEntries = objectEntries;
    exports.objectKeys = objectKeys;
    exports.objectMap = objectMap;
    exports.objectPick = objectPick;
    exports.partition = partition2;
    exports.range = range;
    exports.remove = remove;
    exports.slash = slash;
    exports.sleep = sleep;
    exports.sum = sum;
    exports.tap = tap;
    exports.template = template;
    exports.throttle = throttle;
    exports.timestamp = timestamp;
    exports.toArray = toArray;
    exports.toString = toString2;
    exports.uniq = uniq;
  }
});

// src/index.ts
var _unplugin = require('unplugin');

// node_modules/.pnpm/@rollup+pluginutils@4.1.1/node_modules/@rollup/pluginutils/dist/es/index.js
var import_picomatch = _chunkDUTQDV3Qjs.__toModule.call(void 0, require_picomatch2());
var _path = require('path');
function isArray(arg) {
  return Array.isArray(arg);
}
function ensureArray(thing) {
  if (isArray(thing))
    return thing;
  if (thing == null)
    return [];
  return [thing];
}
var normalizePath = function normalizePath2(filename) {
  return filename.split(_path.win32.sep).join(_path.posix.sep);
};
function getMatcherString(id, resolutionBase) {
  if (resolutionBase === false || _path.isAbsolute.call(void 0, id) || id.startsWith("*")) {
    return id;
  }
  const basePath = normalizePath(_path.resolve.call(void 0, resolutionBase || "")).replace(/[-^$*+?.()|[\]{}]/g, "\\$&");
  return _path.posix.join(basePath, id);
}
var createFilter = function createFilter2(include, exclude, options) {
  const resolutionBase = options && options.resolve;
  const getMatcher = (id) => id instanceof RegExp ? id : {
    test: (what) => {
      const pattern = getMatcherString(id, resolutionBase);
      const fn = (0, import_picomatch.default)(pattern, { dot: true });
      const result = fn(what);
      return result;
    }
  };
  const includeMatchers = ensureArray(include).map(getMatcher);
  const excludeMatchers = ensureArray(exclude).map(getMatcher);
  return function result(id) {
    if (typeof id !== "string")
      return false;
    if (/\0/.test(id))
      return false;
    const pathId = normalizePath(id);
    for (let i = 0; i < excludeMatchers.length; ++i) {
      const matcher = excludeMatchers[i];
      if (matcher.test(pathId))
        return false;
    }
    for (let i = 0; i < includeMatchers.length; ++i) {
      const matcher = includeMatchers[i];
      if (matcher.test(pathId))
        return true;
    }
    return !includeMatchers.length;
  };
};
var reservedWords = "break case class catch const continue debugger default delete do else export extends finally for function if import in instanceof let new return super switch this throw try typeof var void while with yield enum await implements package protected static interface private public";
var builtins = "arguments Infinity NaN undefined null true false eval uneval isFinite isNaN parseFloat parseInt decodeURI decodeURIComponent encodeURI encodeURIComponent escape unescape Object Function Boolean Symbol Error EvalError InternalError RangeError ReferenceError SyntaxError TypeError URIError Number Math Date String RegExp Array Int8Array Uint8Array Uint8ClampedArray Int16Array Uint16Array Int32Array Uint32Array Float32Array Float64Array Map Set WeakMap WeakSet SIMD ArrayBuffer DataView JSON Promise Generator GeneratorFunction Reflect Proxy Intl";
var forbiddenIdentifiers = new Set(`${reservedWords} ${builtins}`.split(" "));
forbiddenIdentifiers.add("");

// src/core/transform.ts
var _magicstring = require('magic-string'); var _magicstring2 = _interopRequireDefault(_magicstring);
var _reftransform = require('@vue/ref-transform');

// src/core/parseSFC.ts
var _htmlparser2 = require('htmlparser2');
var _parser = require('@babel/parser');
var _shared = require('@vue/shared');

// src/core/identifiers.ts
function getIdentifierDeclarations(nodes, identifiers = new Set()) {
  for (let node of nodes) {
    if (node.type === "ExportNamedDeclaration") {
      node = node.declaration;
      if (!node)
        continue;
    }
    if (node.type === "ImportDeclaration") {
      for (const specifier of node.specifiers)
        identifiers.add(specifier.local.name);
    } else if (node.type === "VariableDeclaration") {
      let handleVariableId = function(node2) {
        if (node2.type === "Identifier") {
          identifiers.add(node2.name);
        } else if (node2.type === "ObjectPattern") {
          for (const property of node2.properties) {
            if (property.type === "ObjectProperty")
              handleVariableId(property.value);
            else if (property.type === "RestElement" && property.argument.type === "Identifier")
              identifiers.add(property.argument.name);
          }
        } else if (node2.type === "ArrayPattern") {
          for (const element of node2.elements) {
            if ((element == null ? void 0 : element.type) === "Identifier")
              identifiers.add(element.name);
            else if ((element == null ? void 0 : element.type) === "RestElement" && element.argument.type === "Identifier")
              identifiers.add(element.argument.name);
            else if ((element == null ? void 0 : element.type) === "ObjectPattern" || (element == null ? void 0 : element.type) === "ArrayPattern")
              handleVariableId(element);
          }
        }
      };
      for (const declarator of node.declarations)
        handleVariableId(declarator.id);
    } else if (node.type === "FunctionDeclaration" || node.type === "ClassDeclaration") {
      if (node.id)
        identifiers.add(node.id.name);
    } else if (node.type === "TSEnumDeclaration") {
      if (node.id)
        identifiers.add(node.id.name);
    }
  }
  return identifiers;
}
function getIdentifierUsages(node, identifiers = new Set()) {
  if (!node)
    return identifiers;
  if (node.type === "BlockStatement") {
    node.body.forEach((child) => getIdentifierUsages(child, identifiers));
  } else if (node.type === "ExpressionStatement") {
    getIdentifierUsages(node.expression, identifiers);
  } else if (node.type === "Identifier") {
    identifiers.add(node.name);
  } else if (node.type === "MemberExpression") {
    getIdentifierUsages(node.object, identifiers);
  } else if (node.type === "CallExpression") {
    getIdentifierUsages(node.callee, identifiers);
    node.arguments.forEach((arg) => getIdentifierUsages(arg, identifiers));
  } else if (node.type === "BinaryExpression" || node.type === "LogicalExpression") {
    getIdentifierUsages(node.left, identifiers);
    getIdentifierUsages(node.right, identifiers);
  } else if (node.type === "UnaryExpression") {
    getIdentifierUsages(node.argument, identifiers);
  } else if (node.type === "ForOfStatement" || node.type === "ForInStatement") {
    getIdentifierUsages(node.right, identifiers);
  } else if (node.type === "ConditionalExpression") {
    getIdentifierUsages(node.test, identifiers);
    getIdentifierUsages(node.consequent, identifiers);
    getIdentifierUsages(node.alternate, identifiers);
  } else if (node.type === "ObjectExpression") {
    node.properties.forEach((prop) => {
      if (prop.type === "ObjectProperty") {
        if (prop.computed)
          getIdentifierUsages(prop.key, identifiers);
        getIdentifierUsages(prop.value, identifiers);
      } else if (prop.type === "SpreadElement") {
        getIdentifierUsages(prop, identifiers);
      }
    });
  } else if (node.type === "ArrayExpression") {
    node.elements.forEach((element) => getIdentifierUsages(element, identifiers));
  } else if (node.type === "SpreadElement" || node.type === "ReturnStatement") {
    getIdentifierUsages(node.argument, identifiers);
  } else if (node.type === "NewExpression") {
    getIdentifierUsages(node.callee, identifiers);
    node.arguments.forEach((arg) => getIdentifierUsages(arg, identifiers));
  } else if (node.type === "ArrowFunctionExpression" || node.type === "FunctionDeclaration" || node.type === "FunctionExpression") {
    getIdentifierUsages(node.body, identifiers);
  } else if (node.type === "TemplateLiteral") {
    node.expressions.forEach((expr) => getIdentifierUsages(expr, identifiers));
  }
  return identifiers;
}

// src/core/parseSFC.ts
function parseSFC(code, id, options) {
  var _a, _b, _c, _d;
  const components = new Set();
  const expressions = new Set();
  const identifiers = new Set();
  let templateLevel = 0;
  let inScriptSetup = false;
  let inScript = false;
  const scriptSetup = {
    start: 0,
    end: 0,
    contentStart: 0,
    contentEnd: 0,
    content: "",
    attrs: {},
    found: false,
    ast: void 0
  };
  const script = {
    start: 0,
    end: 0,
    contentStart: 0,
    contentEnd: 0,
    content: "",
    attrs: {},
    found: false,
    ast: void 0
  };
  const htmlParserOptions = {
    xmlMode: true,
    lowerCaseTags: false,
    lowerCaseAttributeNames: false,
    recognizeSelfClosing: true
  };
  let pugStart;
  function handleTemplateContent(name, attributes) {
    if (!_shared.isHTMLTag.call(void 0, name) && !_shared.isSVGTag.call(void 0, name) && !_shared.isVoidTag.call(void 0, name))
      components.add(_shared.capitalize.call(void 0, _shared.camelize.call(void 0, name)));
    Object.entries(attributes).forEach(([key, value]) => {
      if (!value)
        return;
      if (key.startsWith("v-") || key.startsWith("@") || key.startsWith(":")) {
        if (key === "v-for")
          expressions.add(`(${value.replace(/^.*\s(?:in|of)\s/, "")})`);
        else
          expressions.add(`(${value})`);
      }
      if (key === "ref")
        identifiers.add(value);
    });
  }
  function handlePugTemplate(pugCode, id2) {
    try {
      const html = require_lib5().compile(pugCode, { filename: id2 })();
      const parser2 = new (0, _htmlparser2.Parser)({
        onopentag(name, attributes) {
          name && handleTemplateContent(name, attributes);
        }
      }, htmlParserOptions);
      parser2.write(html);
      parser2.end();
    } catch (e2) {
    }
  }
  const parser = new (0, _htmlparser2.Parser)({
    onopentag(name, attributes) {
      if (!name)
        return;
      if (name === "template") {
        if (templateLevel === 0 && attributes.lang === "pug")
          pugStart = parser.endIndex + 1;
        templateLevel += 1;
      }
      if (templateLevel > 0) {
        handleTemplateContent(name, attributes);
      } else {
        if (name === "script") {
          if ("setup" in attributes) {
            scriptSetup.start = parser.startIndex;
            scriptSetup.contentStart = parser.endIndex + 1;
            scriptSetup.attrs = attributes;
            scriptSetup.found = true;
            inScriptSetup = true;
          } else {
            script.start = parser.startIndex;
            script.contentStart = parser.endIndex + 1;
            script.attrs = attributes;
            script.found = true;
            inScript = true;
          }
        }
      }
    },
    ontext(text) {
      if (templateLevel > 0) {
        Array.from(text.matchAll(/\{\{(.*?)\}\}/g)).forEach(([, expression]) => {
          expressions.add(`(${expression})`);
        });
      }
    },
    onclosetag(name) {
      if (name === "template") {
        templateLevel -= 1;
        if (templateLevel === 0 && pugStart != null)
          handlePugTemplate(code.slice(pugStart, parser.startIndex), id);
      }
      if (inScriptSetup && name === "script") {
        scriptSetup.end = parser.endIndex + 1;
        scriptSetup.contentEnd = parser.startIndex;
        scriptSetup.content = code.slice(scriptSetup.contentStart, scriptSetup.contentEnd);
        inScriptSetup = false;
      }
      if (inScript && name === "script") {
        script.end = parser.endIndex + 1;
        script.contentEnd = parser.startIndex;
        script.content = code.slice(script.contentStart, script.contentEnd);
        inScript = false;
      }
    }
  }, htmlParserOptions);
  parser.write(code);
  parser.end();
  expressions.forEach((exp) => {
    const nodes = _parser.parse.call(void 0, exp).program.body;
    nodes.forEach((node) => getIdentifierUsages(node, identifiers));
  });
  if (script.found && scriptSetup.found && scriptSetup.attrs.lang !== script.attrs.lang)
    throw new SyntaxError("<script setup> language must be the same as <script>");
  const parserOptions = {
    sourceType: "module",
    plugins: []
  };
  const lang = scriptSetup.attrs.lang || script.attrs.lang || "js";
  if (lang === "ts")
    parserOptions.plugins.push("typescript");
  else if (lang === "jsx")
    parserOptions.plugins.push("jsx");
  else if (lang === "tsx")
    parserOptions.plugins.push("typescript", "jsx");
  else if (lang !== "js")
    throw new SyntaxError(`Unsupported script language: ${lang}`);
  scriptSetup.ast = _parser.parse.call(void 0, scriptSetup.content, parserOptions).program;
  script.ast = _parser.parse.call(void 0, script.content || "", parserOptions).program;
  scriptSetup.ast = ((_b = (_a = options == null ? void 0 : options.astTransforms) == null ? void 0 : _a.scriptSetup) == null ? void 0 : _b.call(_a, scriptSetup.ast)) || scriptSetup.ast;
  script.ast = ((_d = (_c = options == null ? void 0 : options.astTransforms) == null ? void 0 : _c.script) == null ? void 0 : _d.call(_c, script.ast)) || script.ast;
  return {
    id,
    template: {
      components,
      identifiers
    },
    scriptSetup,
    script,
    parserOptions,
    extraDeclarations: []
  };
}

// src/core/transformScriptSetup.ts
var import_utils = _chunkDUTQDV3Qjs.__toModule.call(void 0, require_dist());
var _core = require('@babel/core');

var _generator = require('@babel/generator'); var _generator2 = _interopRequireDefault(_generator);

// src/core/macros.ts


var DEFINE_PROPS = "defineProps";
var DEFINE_EMITS = "defineEmits";
var DEFINE_EXPOSE = "defineExpose";
var WITH_DEFAULTS = "withDefaults";
function applyMacros(nodes) {
  let hasDefinePropsCall = false;
  let hasDefineEmitCall = false;
  let propsRuntimeDecl;
  let propsRuntimeDefaults;
  let propsTypeDecl;
  let propsTypeDeclRaw;
  let emitsRuntimeDecl;
  let emitsTypeDecl;
  let emitsTypeDeclRaw;
  let exposeDecl;
  const typeDeclaredProps = {};
  const declaredTypes = {};
  function error(msg, node) {
    throw new Error(msg);
  }
  function processDefineProps(node) {
    if (!isCallOf(node, DEFINE_PROPS))
      return false;
    if (hasDefinePropsCall)
      error(`duplicate ${DEFINE_PROPS}() call`, node);
    hasDefinePropsCall = true;
    propsRuntimeDecl = node.arguments[0];
    if (node.typeParameters) {
      if (propsRuntimeDecl) {
        error(`${DEFINE_PROPS}() cannot accept both type and non-type arguments at the same time. Use one or the other.`, node);
      }
      propsTypeDeclRaw = node.typeParameters.params[0];
      propsTypeDecl = resolveQualifiedType(propsTypeDeclRaw, (node2) => node2.type === "TSTypeLiteral");
      if (!propsTypeDecl) {
        error(`type argument passed to ${DEFINE_PROPS}() must be a literal type, or a reference to an interface or literal type.`, propsTypeDeclRaw);
      }
    }
    return true;
  }
  function processWithDefaults(node) {
    if (!isCallOf(node, WITH_DEFAULTS))
      return false;
    if (processDefineProps(node.arguments[0])) {
      if (propsRuntimeDecl) {
        error(`${WITH_DEFAULTS} can only be used with type-based ${DEFINE_PROPS} declaration.`, node);
      }
      propsRuntimeDefaults = node.arguments[1];
    } else {
      error(`${WITH_DEFAULTS}' first argument must be a ${DEFINE_PROPS} call.`, node.arguments[0] || node);
    }
    return true;
  }
  function processDefineEmits(node) {
    if (!isCallOf(node, DEFINE_EMITS))
      return false;
    if (hasDefineEmitCall)
      error(`duplicate ${DEFINE_EMITS}() call`, node);
    hasDefineEmitCall = true;
    emitsRuntimeDecl = node.arguments[0];
    if (node.typeParameters) {
      if (emitsRuntimeDecl) {
        error(`${DEFINE_EMITS}() cannot accept both type and non-type arguments at the same time. Use one or the other.`, node);
      }
      emitsTypeDeclRaw = node.typeParameters.params[0];
      emitsTypeDecl = resolveQualifiedType(emitsTypeDeclRaw, (node2) => node2.type === "TSFunctionType" || node2.type === "TSTypeLiteral");
      if (!emitsTypeDecl) {
        error(`type argument passed to ${DEFINE_EMITS}() must be a function type, a literal type with call signatures, or a reference to the above types.`, emitsTypeDeclRaw);
      }
    }
    return true;
  }
  function resolveQualifiedType(node, qualifier) {
    if (qualifier(node))
      return node;
    if (node.type === "TSTypeReference" && node.typeName.type === "Identifier") {
      const refName = node.typeName.name;
      const isQualifiedType = (node2) => {
        if (node2.type === "TSInterfaceDeclaration" && node2.id.name === refName)
          return node2.body;
        else if (node2.type === "TSTypeAliasDeclaration" && node2.id.name === refName && qualifier(node2.typeAnnotation))
          return node2.typeAnnotation;
        else if (node2.type === "ExportNamedDeclaration" && node2.declaration)
          return isQualifiedType(node2.declaration);
      };
      for (const node2 of nodes) {
        const qualified = isQualifiedType(node2);
        if (qualified)
          return qualified;
      }
    }
  }
  function processDefineExpose(node) {
    if (!isCallOf(node, DEFINE_EXPOSE))
      return false;
    if (exposeDecl)
      error(`duplicate ${DEFINE_EXPOSE}() call`, node);
    if (node.arguments.length !== 1)
      error(`${DEFINE_EXPOSE}() requires one argument`, node);
    exposeDecl = node.arguments[0];
    return true;
  }
  function genRuntimeProps(props) {
    const keys = Object.keys(props);
    if (!keys.length)
      return void 0;
    const hasStaticDefaults = propsRuntimeDefaults && propsRuntimeDefaults.type === "ObjectExpression" && propsRuntimeDefaults.properties.every((node) => node.type === "ObjectProperty" && !node.computed);
    return _core.types.objectExpression(Object.entries(props).map(([key, value]) => {
      if (value.type === "null")
        return _core.types.objectProperty(_core.types.identifier(key), _core.types.nullLiteral());
      const prop = hasStaticDefaults ? propsRuntimeDefaults.properties.find((node) => node.key.name === key) : void 0;
      if (prop)
        value.required = false;
      const entries = Object.entries(value).map(([key2, value2]) => key2 === "type" ? _core.types.objectProperty(_core.types.identifier(key2), typeof value2 === "string" ? _core.types.identifier(value2) : _core.types.arrayExpression(value2.map((i) => _core.types.identifier(i)))) : _core.types.objectProperty(_core.types.identifier(key2), _parser.parseExpression.call(void 0, JSON.stringify(value2))));
      if (prop)
        entries.push(_core.types.objectProperty(_core.types.identifier("default"), prop.value));
      return _core.types.objectProperty(_core.types.identifier(key), _core.types.objectExpression(entries));
    }));
  }
  function getProps() {
    if (propsRuntimeDecl)
      return propsRuntimeDecl;
    if (propsTypeDecl) {
      extractRuntimeProps(propsTypeDecl, typeDeclaredProps, declaredTypes);
      return genRuntimeProps(typeDeclaredProps);
    }
  }
  function throwIfAwait(node) {
    if (node.type === "AwaitExpression")
      error("top-level await is not supported in Vue 2", node);
  }
  nodes = nodes.map((raw) => {
    let node = raw;
    if (raw.type === "ExpressionStatement")
      node = raw.expression;
    if (node.type === "VariableDeclaration" && !node.declare) {
      const total = node.declarations.length;
      for (let i = 0; i < total; i++) {
        const decl = node.declarations[i];
        if (decl.init) {
          if (processDefineEmits(decl.init))
            decl.init = _core.types.memberExpression(_core.types.identifier("__ctx"), _core.types.identifier("emit"));
          else if (processDefineProps(decl.init) || processWithDefaults(decl.init))
            decl.init = _core.types.identifier("__props");
          else
            throwIfAwait(decl.init);
        }
      }
    }
    if (processDefineEmits(node) || processDefineProps(node) || processDefineExpose(node))
      return null;
    throwIfAwait(node);
    return raw;
  }).filter(Boolean);
  return {
    nodes,
    props: getProps(),
    expose: exposeDecl
  };
}
function isCallOf(node, test) {
  return !!(node && node.type === "CallExpression" && node.callee.type === "Identifier" && (typeof test === "string" ? node.callee.name === test : test(node.callee.name)));
}
function extractRuntimeProps(node, props, declaredTypes) {
  const members = node.type === "TSTypeLiteral" ? node.members : node.body;
  for (const m of members) {
    if ((m.type === "TSPropertySignature" || m.type === "TSMethodSignature") && m.key.type === "Identifier") {
      let type;
      if (m.type === "TSMethodSignature") {
        type = ["Function"];
      } else if (m.typeAnnotation) {
        type = inferRuntimeType(m.typeAnnotation.typeAnnotation, declaredTypes);
      }
      props[m.key.name] = {
        key: m.key.name,
        required: !m.optional,
        type: (type == null ? void 0 : type.length) === 1 ? type[0] : type || "null"
      };
    }
  }
}
function inferRuntimeType(node, declaredTypes) {
  switch (node.type) {
    case "TSStringKeyword":
      return ["String"];
    case "TSNumberKeyword":
      return ["Number"];
    case "TSBooleanKeyword":
      return ["Boolean"];
    case "TSObjectKeyword":
      return ["Object"];
    case "TSTypeLiteral":
      return ["Object"];
    case "TSFunctionType":
      return ["Function"];
    case "TSArrayType":
    case "TSTupleType":
      return ["Array"];
    case "TSLiteralType":
      switch (node.literal.type) {
        case "StringLiteral":
          return ["String"];
        case "BooleanLiteral":
          return ["Boolean"];
        case "NumericLiteral":
        case "BigIntLiteral":
          return ["Number"];
        default:
          return ["null"];
      }
    case "TSTypeReference":
      if (node.typeName.type === "Identifier") {
        if (declaredTypes[node.typeName.name])
          return declaredTypes[node.typeName.name];
        switch (node.typeName.name) {
          case "Array":
          case "Function":
          case "Object":
          case "Set":
          case "Map":
          case "WeakSet":
          case "WeakMap":
            return [node.typeName.name];
          case "Record":
          case "Partial":
          case "Readonly":
          case "Pick":
          case "Omit":
          case "Exclude":
          case "Extract":
          case "Required":
          case "InstanceType":
            return ["Object"];
        }
      }
      return ["null"];
    case "TSParenthesizedType":
      return inferRuntimeType(node.typeAnnotation, declaredTypes);
    case "TSUnionType":
      return [
        ...new Set([].concat(...node.types.map((t4) => inferRuntimeType(t4, declaredTypes))))
      ];
    case "TSIntersectionType":
      return ["Object"];
    default:
      return ["null"];
  }
}

// src/core/transformScriptSetup.ts
function isAsyncImport(node) {
  if (node.type === "VariableDeclaration") {
    const declaration = node.declarations[0];
    return declaration.init.callee != null && declaration.init.callee.name === "defineAsyncComponent";
  }
  return false;
}
function transformScriptSetup(sfc, options) {
  var _a, _b;
  const { scriptSetup, script, template } = sfc;
  const { nodes: body, props, expose } = applyMacros(scriptSetup.ast.body);
  const [hoisted, setupBody] = (0, import_utils.partition)(body, (n) => isAsyncImport(n) || n.type === "ImportDeclaration" || n.type === "ExportNamedDeclaration" || n.type.startsWith("TS"));
  const declarations = new Set();
  getIdentifierDeclarations(hoisted, declarations);
  getIdentifierDeclarations(setupBody, declarations);
  const returns = Array.from(declarations).filter(Boolean).filter((i) => template.identifiers.has(i)).map((i) => {
    const id = _core.types.identifier(i);
    return _core.types.objectProperty(id, id, false, true);
  });
  const components = Array.from(declarations).filter(Boolean).filter((i) => template.components.has(i) || template.components.has(_shared.camelize.call(void 0, i)) || template.components.has(_shared.capitalize.call(void 0, _shared.camelize.call(void 0, i))));
  const __sfc = _core.types.identifier("__sfc_main");
  let hasBody = false;
  const bodyNodes = script.ast.body.map((node) => {
    if (node.type === "ExportDefaultDeclaration") {
      hasBody = true;
      return _core.types.variableDeclaration("const", [
        _core.types.variableDeclarator(__sfc, node.declaration)
      ]);
    }
    return node;
  });
  let ast = _core.types.program([
    ...sfc.extraDeclarations,
    ...hoisted,
    ...bodyNodes
  ]);
  if (!hasBody) {
    ast.body.push(_core.types.variableDeclaration("const", [
      _core.types.variableDeclarator(__sfc, _core.types.objectExpression([]))
    ]));
  }
  if (props) {
    hasBody = true;
    ast.body.push(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(__sfc, _core.types.identifier("props")), props)));
  }
  if (body.length) {
    hasBody = true;
    const returnExpr = expose ? _core.types.callExpression(_core.types.memberExpression(_core.types.identifier("Object"), _core.types.identifier("assign")), [_core.types.objectExpression(returns), expose]) : _core.types.objectExpression(returns);
    const returnStatement = _core.types.returnStatement(returnExpr);
    ast.body.push(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(__sfc, _core.types.identifier("setup")), _core.types.arrowFunctionExpression([
      _core.types.identifier("__props"),
      _core.types.identifier("__ctx")
    ], _core.types.blockStatement([
      ...setupBody,
      returnStatement
    ])))));
  }
  if (components.length) {
    hasBody = true;
    const componentsObject = _core.types.objectExpression(components.map((i) => {
      const id = _core.types.identifier(i);
      return _core.types.objectProperty(id, id, false, true);
    }));
    ast.body.push(_core.types.expressionStatement(_core.types.assignmentExpression("=", _core.types.memberExpression(__sfc, _core.types.identifier("components")), _core.types.callExpression(_core.types.memberExpression(_core.types.identifier("Object"), _core.types.identifier("assign")), [
      componentsObject,
      _core.types.memberExpression(__sfc, _core.types.identifier("components"))
    ]))));
  }
  if (!hasBody && !(options == null ? void 0 : options.astTransforms)) {
    return {
      ast: null,
      code: ""
    };
  }
  ast.body.push(_core.types.exportDefaultDeclaration(__sfc));
  ast = ((_b = (_a = options == null ? void 0 : options.astTransforms) == null ? void 0 : _a.post) == null ? void 0 : _b.call(_a, ast, sfc)) || ast;
  return {
    ast,
    code: _generator2.default.call(void 0, ast).code
  };
}

// src/core/transformSfcRefSugar.ts




function transformSfcRefSugar(sfc, options) {
  const importedHelpers = new Set();
  for (const script of [sfc.script, sfc.scriptSetup]) {
    if (_reftransform.shouldTransform.call(void 0, script.content)) {
      const s = new (0, _magicstring2.default)(script.content);
      const { importedHelpers: imports } = _reftransform.transformAST.call(void 0, script.ast, s);
      Array.from(imports).forEach((helper) => importedHelpers.add(helper));
      script.content = s.toString();
      script.ast = _parser.parse.call(void 0, script.content, sfc.parserOptions).program;
    }
  }
  if (importedHelpers.size) {
    sfc.extraDeclarations = [
      _core.types.importDeclaration(Array.from(importedHelpers).map((i) => _core.types.importSpecifier(_core.types.identifier(`_${i}`), _core.types.identifier(i))), _core.types.stringLiteral(options.importHelpersFrom))
    ];
  }
}

// src/core/options.ts
function resolveOptions(options = {}) {
  return Object.assign({}, {
    sourceMap: true,
    refTransform: false,
    importHelpersFrom: "@vue/composition-api",
    astTransforms: {}
  }, options);
}

// src/core/transform.ts
var scriptSetupRE = /<script\s(.*\s)?setup(\s.*)?>/;
function shouldTransform2(code, id, options) {
  if (code.includes("export default __sfc_main"))
    return false;
  return (options == null ? void 0 : options.refTransform) && _reftransform.shouldTransform.call(void 0, code) || scriptSetupRE.test(code);
}
function transform(input, id, options) {
  if (!shouldTransform2(input, id, options))
    return null;
  const resolved = resolveOptions(options);
  if (id.endsWith(".vue") || id.includes(".vue?vue"))
    return transformVue(input, id, resolved);
  else
    return transformNonVue(input, id, resolved);
}
function transformNonVue(input, id, options) {
  if (options.refTransform && _reftransform.shouldTransform.call(void 0, input)) {
    return _reftransform.transform.call(void 0, input, {
      filename: id,
      sourceMap: options.sourceMap,
      importHelpersFrom: options.importHelpersFrom
    });
  }
  return null;
}
function transformVue(input, id, options) {
  const s = new (0, _magicstring2.default)(input);
  const sfc = parseSFC(input, id);
  if (options.refTransform)
    transformSfcRefSugar(sfc, options);
  const { code } = transformScriptSetup(sfc, options);
  const attributes = _chunkDUTQDV3Qjs.__spreadValues.call(void 0, _chunkDUTQDV3Qjs.__spreadValues.call(void 0, {}, sfc.script.attrs), sfc.scriptSetup.attrs);
  delete attributes.setup;
  const attr = Object.entries(attributes).map(([key, value]) => value ? `${key}="${value}"` : key).join(" ");
  if (code) {
    const block = `<script ${attr}>
${code}
<\/script>`;
    s.remove(sfc.script.start, sfc.script.end);
    if (sfc.scriptSetup.start !== sfc.scriptSetup.end) {
      s.overwrite(sfc.scriptSetup.start, sfc.scriptSetup.end, block);
    } else {
      s.prependLeft(0, `${block}
`);
    }
  }
  return {
    code: s.toString(),
    map: options.sourceMap ? s.generateMap({
      source: id,
      includeContent: true
    }) : null
  };
}

// src/index.ts
var src_default = _unplugin.createUnplugin.call(void 0, (options = {}) => {
  const filter = createFilter(options.include || (options.refTransform ? [/\.vue$/, /\.vue\?vue/, /\.[jt]sx?$/] : [/\.vue$/, /\.vue\?vue/]), options.exclude || [/node_modules/, /\.git/, /\.nuxt/]);
  return {
    name: "unplugin-vue2-script-setup",
    enforce: "pre",
    transformInclude(id) {
      return filter(id);
    },
    transform(code, id) {
      try {
        return transform(code, id, options);
      } catch (e) {
        this.error(e);
      }
    }
  };
});






exports.transformScriptSetup = transformScriptSetup; exports.shouldTransform = shouldTransform2; exports.transform = transform; exports.src_default = src_default;
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/
/*!
 * Pug
 * Copyright(c) 2010 TJ Holowaychuk <tj@vision-media.ca>
 * MIT Licensed
 */
